
10-DebounceMultisamples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d4  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003c4  080003c4  000013cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003c4  080003cc  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003cc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003cc  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010ab  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ed  00000000  00000000  000024a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00002698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c39  00000000  00000000  00002728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000069c  00000000  00000000  00004361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008098  00000000  00000000  000049fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ca95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  0000cad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0000cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	080003ac 	.word	0x080003ac

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	080003ac 	.word	0x080003ac

08000230 <read_button_multiple_samples>:
	for (volatile int i = 0; i < count * 1000; i++);
	return 1;
}

// Button debouncing using multiple samples approach
uint8_t read_button_multiple_samples(void) {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
    static uint8_t button_state = BUTTON_RELEASED;
    static uint8_t counter = 0;
    const uint8_t debounce_count = 10;  // Number of consecutive samples
 8000236:	230a      	movs	r3, #10
 8000238:	71fb      	strb	r3, [r7, #7]

    // Read raw button state - using the bitfield access like in first program
    uint8_t raw_state = GPIOC->IDR.IDR13 ? BUTTON_PRESSED : BUTTON_RELEASED;
 800023a:	4b18      	ldr	r3, [pc, #96]	@ (800029c <read_button_multiple_samples+0x6c>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8000242:	b2db      	uxtb	r3, r3
 8000244:	71bb      	strb	r3, [r7, #6]

    // Reset counter if state changes
    if (raw_state == button_state)
 8000246:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <read_button_multiple_samples+0x70>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	79ba      	ldrb	r2, [r7, #6]
 800024c:	429a      	cmp	r2, r3
 800024e:	d10a      	bne.n	8000266 <read_button_multiple_samples+0x36>
    {
        if (counter > 0)
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <read_button_multiple_samples+0x74>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d019      	beq.n	800028c <read_button_multiple_samples+0x5c>
        {
            counter--;
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <read_button_multiple_samples+0x74>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	3b01      	subs	r3, #1
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <read_button_multiple_samples+0x74>)
 8000262:	701a      	strb	r2, [r3, #0]
 8000264:	e012      	b.n	800028c <read_button_multiple_samples+0x5c>
        }
    }
    else
    {
        // Increment counter for consistent readings
        if (counter < debounce_count)
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <read_button_multiple_samples+0x74>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	79fa      	ldrb	r2, [r7, #7]
 800026c:	429a      	cmp	r2, r3
 800026e:	d905      	bls.n	800027c <read_button_multiple_samples+0x4c>
        {
            counter++;
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <read_button_multiple_samples+0x74>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <read_button_multiple_samples+0x74>)
 800027a:	701a      	strb	r2, [r3, #0]
        }

        // Update state after sufficient consistent readings
        if (counter >= debounce_count)
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <read_button_multiple_samples+0x74>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	429a      	cmp	r2, r3
 8000284:	d802      	bhi.n	800028c <read_button_multiple_samples+0x5c>
        {
            button_state = raw_state;
 8000286:	4a06      	ldr	r2, [pc, #24]	@ (80002a0 <read_button_multiple_samples+0x70>)
 8000288:	79bb      	ldrb	r3, [r7, #6]
 800028a:	7013      	strb	r3, [r2, #0]
        }
    }

    return button_state;
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <read_button_multiple_samples+0x70>)
 800028e:	781b      	ldrb	r3, [r3, #0]
}
 8000290:	4618      	mov	r0, r3
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	42020800 	.word	0x42020800
 80002a0:	2000001c 	.word	0x2000001c
 80002a4:	2000001d 	.word	0x2000001d

080002a8 <main>:

int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	RCC->AHB2ENR.GPIOBEN = ENABLED;
 80002ac:	4a15      	ldr	r2, [pc, #84]	@ (8000304 <main+0x5c>)
 80002ae:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR.GPIOCEN = ENABLED;
 80002b6:	4a13      	ldr	r2, [pc, #76]	@ (8000304 <main+0x5c>)
 80002b8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOB->MODER.MODER7 = OUTPUT_MODE;
 80002c0:	4a11      	ldr	r2, [pc, #68]	@ (8000308 <main+0x60>)
 80002c2:	6813      	ldr	r3, [r2, #0]
 80002c4:	2101      	movs	r1, #1
 80002c6:	f361 338f 	bfi	r3, r1, #14, #2
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER.MODER13 = INPUT_MODE;
 80002cc:	4a0f      	ldr	r2, [pc, #60]	@ (800030c <main+0x64>)
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002d4:	6013      	str	r3, [r2, #0]
	GPIOB->ODR.ODR7 = ON;
 80002d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000308 <main+0x60>)
 80002d8:	6953      	ldr	r3, [r2, #20]
 80002da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002de:	6153      	str	r3, [r2, #20]

	do {
		if (read_button_multiple_samples() == BUTTON_PRESSED)
 80002e0:	f7ff ffa6 	bl	8000230 <read_button_multiple_samples>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d105      	bne.n	80002f6 <main+0x4e>
		{
			GPIOB->ODR.ODR7 = ON;
 80002ea:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <main+0x60>)
 80002ec:	6953      	ldr	r3, [r2, #20]
 80002ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002f2:	6153      	str	r3, [r2, #20]
 80002f4:	e7f4      	b.n	80002e0 <main+0x38>
		}
		else
		{
			GPIOB->ODR.ODR7 = OFF;
 80002f6:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <main+0x60>)
 80002f8:	6953      	ldr	r3, [r2, #20]
 80002fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002fe:	6153      	str	r3, [r2, #20]
		if (read_button_multiple_samples() == BUTTON_PRESSED)
 8000300:	e7ee      	b.n	80002e0 <main+0x38>
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	42020400 	.word	0x42020400
 800030c:	42020800 	.word	0x42020800

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	@ (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffb1 	bl	80002a8 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	20000020 	.word	0x20000020

08000360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC1_2_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	@ (800039c <__libc_init_array+0x38>)
 8000368:	2600      	movs	r6, #0
 800036a:	4c0d      	ldr	r4, [pc, #52]	@ (80003a0 <__libc_init_array+0x3c>)
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	10a4      	asrs	r4, r4, #2
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	@ (80003a4 <__libc_init_array+0x40>)
 8000376:	2600      	movs	r6, #0
 8000378:	4c0b      	ldr	r4, [pc, #44]	@ (80003a8 <__libc_init_array+0x44>)
 800037a:	f000 f817 	bl	80003ac <_init>
 800037e:	1b64      	subs	r4, r4, r5
 8000380:	10a4      	asrs	r4, r4, #2
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	3601      	adds	r6, #1
 800038e:	4798      	blx	r3
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	3601      	adds	r6, #1
 8000398:	4798      	blx	r3
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
