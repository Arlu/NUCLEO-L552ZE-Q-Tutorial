
Ex03-MultipleButtonsWithDebounceDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004b8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004b8  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001124  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000273  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00000064  00000000  00000000  0000287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  000028e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000046  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010b3  00000000  00000000  00002986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006f8  00000000  00000000  00003a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000477a  00000000  00000000  00004131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000088ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000094  00000000  00000000  000088f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00008984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	00000000 	.word	0x00000000
 8000210:	08000498 	.word	0x08000498

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000004 	.word	0x20000004
 800022c:	08000498 	.word	0x08000498

08000230 <read_buttons_with_delay>:
{
	for (volatile int i = 0; i < count * 1000; i++);
	return 1;
}

enum ClickedButtons read_buttons_with_delay() {
 8000230:	b430      	push	{r4, r5}
    static enum ClickedButtons buttons_state = NONE_PRESSED;

    // Read the raw buttons state:
    enum ClickedButtons raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
 8000232:	4a36      	ldr	r2, [pc, #216]	@ (800030c <read_buttons_with_delay+0xdc>)
    raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
    raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 8000234:	4c36      	ldr	r4, [pc, #216]	@ (8000310 <read_buttons_with_delay+0xe0>)
    raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 8000236:	4b37      	ldr	r3, [pc, #220]	@ (8000314 <read_buttons_with_delay+0xe4>)
    enum ClickedButtons raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
 8000238:	6911      	ldr	r1, [r2, #16]
    raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 800023a:	691b      	ldr	r3, [r3, #16]
    raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 800023c:	6920      	ldr	r0, [r4, #16]
    raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 800023e:	f003 0301 	and.w	r3, r3, #1
    raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 8000242:	f3c0 2040 	ubfx	r0, r0, #9, #1
    raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
 8000246:	6922      	ldr	r2, [r4, #16]
    raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 8000248:	f080 0001 	eor.w	r0, r0, #1
    raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 800024c:	f083 0301 	eor.w	r3, r3, #1
    raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 8000250:	0080      	lsls	r0, r0, #2
 8000252:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
 8000256:	f3c2 2200 	ubfx	r2, r2, #8, #1
    enum ClickedButtons raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
 800025a:	f3c1 3340 	ubfx	r3, r1, #13, #1
    raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 800025e:	4318      	orrs	r0, r3
    raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
 8000260:	f082 0201 	eor.w	r2, r2, #1
 8000264:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
    raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 8000268:	4a2b      	ldr	r2, [pc, #172]	@ (8000318 <read_buttons_with_delay+0xe8>)
    raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;

    // If state changed:
    if (raw_states != buttons_state) {
 800026a:	4b2c      	ldr	r3, [pc, #176]	@ (800031c <read_buttons_with_delay+0xec>)
    raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 800026c:	6911      	ldr	r1, [r2, #16]
    raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 800026e:	6922      	ldr	r2, [r4, #16]
    raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 8000270:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 8000274:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 8000278:	f081 0101 	eor.w	r1, r1, #1
 800027c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
    raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 8000280:	f082 0201 	eor.w	r2, r2, #1
    if (raw_states != buttons_state) {
 8000284:	781d      	ldrb	r5, [r3, #0]
    raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 8000286:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
 800028a:	b2c0      	uxtb	r0, r0
    if (raw_states != buttons_state) {
 800028c:	4285      	cmp	r5, r0
enum ClickedButtons read_buttons_with_delay() {
 800028e:	b082      	sub	sp, #8
    if (raw_states != buttons_state) {
 8000290:	d038      	beq.n	8000304 <read_buttons_with_delay+0xd4>
	for (volatile int i = 0; i < count * 1000; i++);
 8000292:	2200      	movs	r2, #0
 8000294:	f644 611f 	movw	r1, #19999	@ 0x4e1f
 8000298:	9201      	str	r2, [sp, #4]
 800029a:	9a01      	ldr	r2, [sp, #4]
 800029c:	428a      	cmp	r2, r1
 800029e:	dc05      	bgt.n	80002ac <read_buttons_with_delay+0x7c>
 80002a0:	9a01      	ldr	r2, [sp, #4]
 80002a2:	3201      	adds	r2, #1
 80002a4:	9201      	str	r2, [sp, #4]
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	428a      	cmp	r2, r1
 80002aa:	ddf9      	ble.n	80002a0 <read_buttons_with_delay+0x70>
        delay(20);  // Wait ~20ms

        // Read again after delay:
        raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
        raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
        raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 80002ac:	4d18      	ldr	r5, [pc, #96]	@ (8000310 <read_buttons_with_delay+0xe0>)
        raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
 80002ae:	4917      	ldr	r1, [pc, #92]	@ (800030c <read_buttons_with_delay+0xdc>)
        raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 80002b0:	4a18      	ldr	r2, [pc, #96]	@ (8000314 <read_buttons_with_delay+0xe4>)
        raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
 80002b2:	6909      	ldr	r1, [r1, #16]
        raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 80002b4:	6912      	ldr	r2, [r2, #16]
        raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 80002b6:	6928      	ldr	r0, [r5, #16]
        raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 80002b8:	f002 0201 	and.w	r2, r2, #1
        raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 80002bc:	f3c0 2040 	ubfx	r0, r0, #9, #1
 80002c0:	f080 0001 	eor.w	r0, r0, #1
        raw_states |= (JOYSTICK_CENTER ? BUTTON_RELEASED : BUTTON_PRESSED) << 1;
 80002c4:	f082 0201 	eor.w	r2, r2, #1
        raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 80002c8:	0080      	lsls	r0, r0, #2
 80002ca:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
        raw_states = USER_BUTTON ? BUTTON_PRESSED : BUTTON_RELEASED;
 80002ce:	f3c1 3240 	ubfx	r2, r1, #13, #1
        raw_states |= (JOYSTICK_UP ? BUTTON_RELEASED : BUTTON_PRESSED) << 2;
 80002d2:	4310      	orrs	r0, r2
        raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
        raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 80002d4:	4a10      	ldr	r2, [pc, #64]	@ (8000318 <read_buttons_with_delay+0xe8>)
        raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
 80002d6:	692c      	ldr	r4, [r5, #16]
        raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 80002d8:	6911      	ldr	r1, [r2, #16]
        raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
 80002da:	f3c4 2400 	ubfx	r4, r4, #8, #1
        raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 80002de:	692a      	ldr	r2, [r5, #16]
        raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 80002e0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
        raw_states |= (JOYSTICK_DOWN ? BUTTON_RELEASED : BUTTON_PRESSED) << 3;
 80002e4:	f084 0401 	eor.w	r4, r4, #1
 80002e8:	ea40 00c4 	orr.w	r0, r0, r4, lsl #3
        raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 80002ec:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        raw_states |= (JOYSTICK_LEFT ? BUTTON_RELEASED : BUTTON_PRESSED) << 4;
 80002f0:	f081 0101 	eor.w	r1, r1, #1
 80002f4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
        raw_states |= (JOYSTICK_RIGHT ? BUTTON_RELEASED : BUTTON_PRESSED) << 5;
 80002f8:	f082 0201 	eor.w	r2, r2, #1
 80002fc:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
 8000300:	b2c0      	uxtb	r0, r0

        // Update buttons state:
        buttons_state = raw_states;
 8000302:	7018      	strb	r0, [r3, #0]
    }

    return buttons_state;
}
 8000304:	b002      	add	sp, #8
 8000306:	bc30      	pop	{r4, r5}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	42020800 	.word	0x42020800
 8000310:	42021400 	.word	0x42021400
 8000314:	42020000 	.word	0x42020000
 8000318:	42021000 	.word	0x42021000
 800031c:	2000001c 	.word	0x2000001c

08000320 <main>:
	RCC->AHB2ENR.GPIOBEN = ENABLED;
	RCC->AHB2ENR.GPIOCEN = ENABLED;
	RCC->AHB2ENR.GPIOEEN = ENABLED;
	RCC->AHB2ENR.GPIOFEN = ENABLED;

	GPIOA->MODER.MODER9 = OUTPUT_MODE; // LED3_RED
 8000320:	2201      	movs	r2, #1
{
 8000322:	b570      	push	{r4, r5, r6, lr}
	RCC->AHB2ENR.GPIOAEN = ENABLED;
 8000324:	4b2f      	ldr	r3, [pc, #188]	@ (80003e4 <main+0xc4>)
	GPIOA->MODER.MODER9 = OUTPUT_MODE; // LED3_RED
 8000326:	4d30      	ldr	r5, [pc, #192]	@ (80003e8 <main+0xc8>)
	RCC->AHB2ENR.GPIOAEN = ENABLED;
 8000328:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
	GPIOB->MODER.MODER7 = OUTPUT_MODE; // LED2_BLUE
 800032a:	4e30      	ldr	r6, [pc, #192]	@ (80003ec <main+0xcc>)
	RCC->AHB2ENR.GPIOAEN = ENABLED;
 800032c:	4311      	orrs	r1, r2
 800032e:	64d9      	str	r1, [r3, #76]	@ 0x4c
	RCC->AHB2ENR.GPIOBEN = ENABLED;
 8000330:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
	GPIOC->MODER.MODER7 = OUTPUT_MODE; // LED1_GREEN
 8000332:	4c2f      	ldr	r4, [pc, #188]	@ (80003f0 <main+0xd0>)
	RCC->AHB2ENR.GPIOBEN = ENABLED;
 8000334:	f041 0102 	orr.w	r1, r1, #2
 8000338:	64d9      	str	r1, [r3, #76]	@ 0x4c
	RCC->AHB2ENR.GPIOCEN = ENABLED;
 800033a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800033c:	f041 0104 	orr.w	r1, r1, #4
 8000340:	64d9      	str	r1, [r3, #76]	@ 0x4c
	RCC->AHB2ENR.GPIOEEN = ENABLED;
 8000342:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000344:	f041 0110 	orr.w	r1, r1, #16
 8000348:	64d9      	str	r1, [r3, #76]	@ 0x4c
	RCC->AHB2ENR.GPIOFEN = ENABLED;
 800034a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800034c:	f041 0120 	orr.w	r1, r1, #32
 8000350:	64d9      	str	r1, [r3, #76]	@ 0x4c
	GPIOA->MODER.MODER9 = OUTPUT_MODE; // LED3_RED
 8000352:	682b      	ldr	r3, [r5, #0]
 8000354:	f362 4393 	bfi	r3, r2, #18, #2
 8000358:	602b      	str	r3, [r5, #0]
	GPIOB->MODER.MODER7 = OUTPUT_MODE; // LED2_BLUE
 800035a:	6833      	ldr	r3, [r6, #0]
 800035c:	f362 338f 	bfi	r3, r2, #14, #2
 8000360:	6033      	str	r3, [r6, #0]
	GPIOC->MODER.MODER7 = OUTPUT_MODE; // LED1_GREEN
 8000362:	6823      	ldr	r3, [r4, #0]
 8000364:	f362 338f 	bfi	r3, r2, #14, #2
 8000368:	6023      	str	r3, [r4, #0]

	GPIOA->MODER.MODER0 = INPUT_MODE; // Joystick center
 800036a:	682b      	ldr	r3, [r5, #0]
	GPIOC->MODER.MODER13 = INPUT_MODE; // User button
	GPIOE->MODER.MODER3 = INPUT_MODE; // Joystick left
 800036c:	4a21      	ldr	r2, [pc, #132]	@ (80003f4 <main+0xd4>)
	GPIOA->MODER.MODER0 = INPUT_MODE; // Joystick center
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	602b      	str	r3, [r5, #0]
	GPIOC->MODER.MODER13 = INPUT_MODE; // User button
 8000374:	6823      	ldr	r3, [r4, #0]
 8000376:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800037a:	6023      	str	r3, [r4, #0]
	GPIOE->MODER.MODER3 = INPUT_MODE; // Joystick left
 800037c:	6813      	ldr	r3, [r2, #0]
 800037e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000382:	6013      	str	r3, [r2, #0]
	GPIOF->MODER.MODER7 = INPUT_MODE; // Joystick right
 8000384:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <main+0xd8>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800038c:	601a      	str	r2, [r3, #0]
	GPIOF->MODER.MODER8 = INPUT_MODE; // Joystick down
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000394:	601a      	str	r2, [r3, #0]
	GPIOF->MODER.MODER9 = INPUT_MODE; // Joystick up
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800039c:	601a      	str	r2, [r3, #0]

	LED1_GREEN = ON;
 800039e:	6963      	ldr	r3, [r4, #20]
 80003a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003a4:	6163      	str	r3, [r4, #20]

	do {
		enum ClickedButtons buttons_state = read_buttons_with_delay();
 80003a6:	f7ff ff43 	bl	8000230 <read_buttons_with_delay>

		LED3_RED = (buttons_state & (USER_BUTTON_PRESSED | JOYSTICK_LEFT_PRESSED | JOYSTICK_UP_PRESSED)) ? ON : OFF;
 80003aa:	f010 0f15 	tst.w	r0, #21
 80003ae:	bf14      	ite	ne
 80003b0:	f04f 0c01 	movne.w	ip, #1
 80003b4:	f04f 0c00 	moveq.w	ip, #0
		LED2_BLUE = (buttons_state & (USER_BUTTON_PRESSED | JOYSTICK_CENTER_PRESSED | JOYSTICK_UP_PRESSED | JOYSTICK_DOWN_PRESSED)) ? ON : OFF;
 80003b8:	f010 030f 	ands.w	r3, r0, #15
 80003bc:	bf18      	it	ne
 80003be:	2301      	movne	r3, #1
		LED1_GREEN = (buttons_state & (USER_BUTTON_PRESSED | JOYSTICK_RIGHT_PRESSED | JOYSTICK_DOWN_PRESSED)) ? ON : OFF;
 80003c0:	f010 0f29 	tst.w	r0, #41	@ 0x29
 80003c4:	bf14      	ite	ne
 80003c6:	2101      	movne	r1, #1
 80003c8:	2100      	moveq	r1, #0
		LED3_RED = (buttons_state & (USER_BUTTON_PRESSED | JOYSTICK_LEFT_PRESSED | JOYSTICK_UP_PRESSED)) ? ON : OFF;
 80003ca:	696a      	ldr	r2, [r5, #20]
 80003cc:	f36c 2249 	bfi	r2, ip, #9, #1
 80003d0:	616a      	str	r2, [r5, #20]
		LED2_BLUE = (buttons_state & (USER_BUTTON_PRESSED | JOYSTICK_CENTER_PRESSED | JOYSTICK_UP_PRESSED | JOYSTICK_DOWN_PRESSED)) ? ON : OFF;
 80003d2:	6972      	ldr	r2, [r6, #20]
 80003d4:	f363 12c7 	bfi	r2, r3, #7, #1
 80003d8:	6172      	str	r2, [r6, #20]
		LED1_GREEN = (buttons_state & (USER_BUTTON_PRESSED | JOYSTICK_RIGHT_PRESSED | JOYSTICK_DOWN_PRESSED)) ? ON : OFF;
 80003da:	6963      	ldr	r3, [r4, #20]
 80003dc:	f361 13c7 	bfi	r3, r1, #7, #1
 80003e0:	6163      	str	r3, [r4, #20]
	do {
 80003e2:	e7e0      	b.n	80003a6 <main+0x86>
 80003e4:	40021000 	.word	0x40021000
 80003e8:	42020000 	.word	0x42020000
 80003ec:	42020400 	.word	0x42020400
 80003f0:	42020800 	.word	0x42020800
 80003f4:	42021000 	.word	0x42021000
 80003f8:	42021400 	.word	0x42021400

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000400:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	@ (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	@ (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	@ (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff ff77 	bl	8000320 <main>

08000432 <LoopForever>:

LoopForever:
  b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000440:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000444:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000448:	20000020 	.word	0x20000020

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	@ (8000488 <__libc_init_array+0x38>)
 8000454:	2600      	movs	r6, #0
 8000456:	4c0d      	ldr	r4, [pc, #52]	@ (800048c <__libc_init_array+0x3c>)
 8000458:	1b64      	subs	r4, r4, r5
 800045a:	10a4      	asrs	r4, r4, #2
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	@ (8000490 <__libc_init_array+0x40>)
 8000462:	2600      	movs	r6, #0
 8000464:	4c0b      	ldr	r4, [pc, #44]	@ (8000494 <__libc_init_array+0x44>)
 8000466:	f000 f817 	bl	8000498 <_init>
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	3601      	adds	r6, #1
 800047a:	4798      	blx	r3
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	3601      	adds	r6, #1
 8000484:	4798      	blx	r3
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
