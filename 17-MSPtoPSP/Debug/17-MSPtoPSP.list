
17-MSPtoPSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015f0  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  080017e0  080017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bb8  08001bb8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001bb8  08001bb8  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001bb8  08001bb8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bb8  08001bb8  00002bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bbc  08001bbc  00002bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001bc0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001c1c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001c1c  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c7d  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000685  00000000  00000000  00004d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00005390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000010c  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003021  00000000  00000000  0000561c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b41  00000000  00000000  0000863d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b0fa  00000000  00000000  0000a17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00015278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ce0  00000000  00000000  000152bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00015f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000005c 	.word	0x2000005c
 800020c:	00000000 	.word	0x00000000
 8000210:	080017c8 	.word	0x080017c8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000060 	.word	0x20000060
 800022c:	080017c8 	.word	0x080017c8

08000230 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
/* ITM Trace Enable Register */
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
    // Enable TRCENA (Trace Enable)
    DEMCR |= (1 << 24);
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <ITM_SendChar+0x44>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0d      	ldr	r2, [pc, #52]	@ (8000274 <ITM_SendChar+0x44>)
 8000240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000244:	6013      	str	r3, [r2, #0]

    // Enable stimulus port 0
    ITM_TRACE_EN |= (1 << 0);
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <ITM_SendChar+0x48>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a0b      	ldr	r2, [pc, #44]	@ (8000278 <ITM_SendChar+0x48>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6013      	str	r3, [r2, #0]

    // Wait until FIFO is ready in bit [0]
    while (!(ITM_STIMULUS_PORT0 & 1));
 8000252:	bf00      	nop
 8000254:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <ITM_SendChar+0x24>

    // Write to ITM stimulus port 0
    ITM_STIMULUS_PORT0 = ch;
 8000262:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000edfc 	.word	0xe000edfc
 8000278:	e0000e00 	.word	0xe0000e00

0800027c <_write>:

int _write(int file, char *ptr, int len)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e009      	b.n	80002a2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	60ba      	str	r2, [r7, #8]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ffca 	bl	8000230 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	3301      	adds	r3, #1
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	697a      	ldr	r2, [r7, #20]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbf1      	blt.n	800028e <_write+0x12>
  }
  return len;
 80002aa:	687b      	ldr	r3, [r7, #4]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <NVIC_EnableIRQ>:
    CUSTOM_IRQ1             = 77,  /* Example custom interrupt */
    CUSTOM_IRQ2             = 79   /* Example custom interrupt */
} IRQn_Type;

/* Function prototypes */
static inline void NVIC_EnableIRQ(IRQn_Type IRQn) {
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	int ind  = IRQn / 32;
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da00      	bge.n	80002c8 <NVIC_EnableIRQ+0x14>
 80002c6:	331f      	adds	r3, #31
 80002c8:	115b      	asrs	r3, r3, #5
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	60fb      	str	r3, [r7, #12]
	switch (ind) {
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d83b      	bhi.n	800034c <NVIC_EnableIRQ+0x98>
 80002d4:	a201      	add	r2, pc, #4	@ (adr r2, 80002dc <NVIC_EnableIRQ+0x28>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002ed 	.word	0x080002ed
 80002e0:	08000305 	.word	0x08000305
 80002e4:	0800031d 	.word	0x0800031d
 80002e8:	08000335 	.word	0x08000335
		case 0:
	        NVIC_ISER0 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <NVIC_EnableIRQ+0xa4>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 031f 	and.w	r3, r3, #31
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	4916      	ldr	r1, [pc, #88]	@ (8000358 <NVIC_EnableIRQ+0xa4>)
 80002fe:	4313      	orrs	r3, r2
 8000300:	600b      	str	r3, [r1, #0]
			break;
 8000302:	e024      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		case 1:
	        NVIC_ISER1 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <NVIC_EnableIRQ+0xa8>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	f003 031f 	and.w	r3, r3, #31
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	4911      	ldr	r1, [pc, #68]	@ (800035c <NVIC_EnableIRQ+0xa8>)
 8000316:	4313      	orrs	r3, r2
 8000318:	600b      	str	r3, [r1, #0]
	        break;
 800031a:	e018      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		case 2:
	        NVIC_ISER2 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 800031c:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <NVIC_EnableIRQ+0xac>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 031f 	and.w	r3, r3, #31
 8000326:	2101      	movs	r1, #1
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	490c      	ldr	r1, [pc, #48]	@ (8000360 <NVIC_EnableIRQ+0xac>)
 800032e:	4313      	orrs	r3, r2
 8000330:	600b      	str	r3, [r1, #0]
			break;
 8000332:	e00c      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		case 3:
	        NVIC_ISER3 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <NVIC_EnableIRQ+0xb0>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 031f 	and.w	r3, r3, #31
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	4907      	ldr	r1, [pc, #28]	@ (8000364 <NVIC_EnableIRQ+0xb0>)
 8000346:	4313      	orrs	r3, r2
 8000348:	600b      	str	r3, [r1, #0]
	        break;
 800034a:	e000      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		default:
			break;
 800034c:	bf00      	nop
	}
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000e104 	.word	0xe000e104
 8000360:	e000e108 	.word	0xe000e108
 8000364:	e000e10c 	.word	0xe000e10c

08000368 <NVIC_ClearPendingIRQ>:
		default:
			break;
	}
}

static inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	int ind  = IRQn / 32;
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	2b00      	cmp	r3, #0
 8000378:	da00      	bge.n	800037c <NVIC_ClearPendingIRQ+0x14>
 800037a:	331f      	adds	r3, #31
 800037c:	115b      	asrs	r3, r3, #5
 800037e:	b25b      	sxtb	r3, r3
 8000380:	60fb      	str	r3, [r7, #12]
	switch (ind) {
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b03      	cmp	r3, #3
 8000386:	d83b      	bhi.n	8000400 <NVIC_ClearPendingIRQ+0x98>
 8000388:	a201      	add	r2, pc, #4	@ (adr r2, 8000390 <NVIC_ClearPendingIRQ+0x28>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080003b9 	.word	0x080003b9
 8000398:	080003d1 	.word	0x080003d1
 800039c:	080003e9 	.word	0x080003e9
		case 0:
			NVIC_ICPR0 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <NVIC_ClearPendingIRQ+0xa4>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	f003 031f 	and.w	r3, r3, #31
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	4916      	ldr	r1, [pc, #88]	@ (800040c <NVIC_ClearPendingIRQ+0xa4>)
 80003b2:	4313      	orrs	r3, r2
 80003b4:	600b      	str	r3, [r1, #0]
			break;
 80003b6:	e024      	b.n	8000402 <NVIC_ClearPendingIRQ+0x9a>
		case 1:
			NVIC_ICPR1 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <NVIC_ClearPendingIRQ+0xa8>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	f003 031f 	and.w	r3, r3, #31
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	4911      	ldr	r1, [pc, #68]	@ (8000410 <NVIC_ClearPendingIRQ+0xa8>)
 80003ca:	4313      	orrs	r3, r2
 80003cc:	600b      	str	r3, [r1, #0]
			break;
 80003ce:	e018      	b.n	8000402 <NVIC_ClearPendingIRQ+0x9a>
		case 2:
			NVIC_ICPR2 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <NVIC_ClearPendingIRQ+0xac>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 031f 	and.w	r3, r3, #31
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	490c      	ldr	r1, [pc, #48]	@ (8000414 <NVIC_ClearPendingIRQ+0xac>)
 80003e2:	4313      	orrs	r3, r2
 80003e4:	600b      	str	r3, [r1, #0]
			break;
 80003e6:	e00c      	b.n	8000402 <NVIC_ClearPendingIRQ+0x9a>
		case 3:
			NVIC_ICPR3 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <NVIC_ClearPendingIRQ+0xb0>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	f003 031f 	and.w	r3, r3, #31
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	4907      	ldr	r1, [pc, #28]	@ (8000418 <NVIC_ClearPendingIRQ+0xb0>)
 80003fa:	4313      	orrs	r3, r2
 80003fc:	600b      	str	r3, [r1, #0]
			break;
 80003fe:	e000      	b.n	8000402 <NVIC_ClearPendingIRQ+0x9a>
		default:
			break;
 8000400:	bf00      	nop
	}
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	e000e280 	.word	0xe000e280
 8000410:	e000e284 	.word	0xe000e284
 8000414:	e000e288 	.word	0xe000e288
 8000418:	e000e28c 	.word	0xe000e28c

0800041c <NVIC_TriggerInterrupt>:
        *prio_reg = (*prio_reg & ~(0xFFUL << byte_offset)) | (priority << byte_offset);
    }
}

/* Utility function for generating software interrupts */
static inline void NVIC_TriggerInterrupt(IRQn_Type IRQn) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	NVIC_STIR = (uint32_t)IRQn;
 8000426:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <NVIC_TriggerInterrupt+0x1c>)
 8000428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042c:	6013      	str	r3, [r2, #0]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	e000ef00 	.word	0xe000ef00

0800043c <__get_CONTROL>:

static inline void __set_MSP(uint32_t topOfMainStack) {
    __asm volatile ("MSR MSP, %0" : : "r" (topOfMainStack) : );
}

static inline uint32_t __get_CONTROL(void) {
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
    uint32_t result;
    __asm volatile ("MRS %0, CONTROL" : "=r" (result));
 8000442:	f3ef 8314 	mrs	r3, CONTROL
 8000446:	607b      	str	r3, [r7, #4]
    return result;
 8000448:	687b      	ldr	r3, [r7, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <decode_exc_return>:
}

/**
 * Function to decode EXC_RETURN value
 */
const char* decode_exc_return(uint32_t exc_return) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
    switch(exc_return & 0x1C) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f003 031c 	and.w	r3, r3, #28
 8000462:	2b1c      	cmp	r3, #28
 8000464:	d848      	bhi.n	80004f8 <decode_exc_return+0xa4>
 8000466:	a201      	add	r2, pc, #4	@ (adr r2, 800046c <decode_exc_return+0x18>)
 8000468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046c:	080004ed 	.word	0x080004ed
 8000470:	080004f9 	.word	0x080004f9
 8000474:	080004f9 	.word	0x080004f9
 8000478:	080004f9 	.word	0x080004f9
 800047c:	080004f9 	.word	0x080004f9
 8000480:	080004f9 	.word	0x080004f9
 8000484:	080004f9 	.word	0x080004f9
 8000488:	080004f9 	.word	0x080004f9
 800048c:	080004f1 	.word	0x080004f1
 8000490:	080004f9 	.word	0x080004f9
 8000494:	080004f9 	.word	0x080004f9
 8000498:	080004f9 	.word	0x080004f9
 800049c:	080004f5 	.word	0x080004f5
 80004a0:	080004f9 	.word	0x080004f9
 80004a4:	080004f9 	.word	0x080004f9
 80004a8:	080004f9 	.word	0x080004f9
 80004ac:	080004e1 	.word	0x080004e1
 80004b0:	080004f9 	.word	0x080004f9
 80004b4:	080004f9 	.word	0x080004f9
 80004b8:	080004f9 	.word	0x080004f9
 80004bc:	080004f9 	.word	0x080004f9
 80004c0:	080004f9 	.word	0x080004f9
 80004c4:	080004f9 	.word	0x080004f9
 80004c8:	080004f9 	.word	0x080004f9
 80004cc:	080004e5 	.word	0x080004e5
 80004d0:	080004f9 	.word	0x080004f9
 80004d4:	080004f9 	.word	0x080004f9
 80004d8:	080004f9 	.word	0x080004f9
 80004dc:	080004e9 	.word	0x080004e9
        case 0x10:
            return "Return to Handler mode, use MSP, no FP state";
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <decode_exc_return+0xb0>)
 80004e2:	e00a      	b.n	80004fa <decode_exc_return+0xa6>
        case 0x18:
            return "Return to Thread mode, use MSP, no FP state";
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <decode_exc_return+0xb4>)
 80004e6:	e008      	b.n	80004fa <decode_exc_return+0xa6>
        case 0x1C:
            return "Return to Thread mode, use PSP, no FP state";
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <decode_exc_return+0xb8>)
 80004ea:	e006      	b.n	80004fa <decode_exc_return+0xa6>
        case 0x00:
            return "Return to Handler mode, use MSP, FP state";
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <decode_exc_return+0xbc>)
 80004ee:	e004      	b.n	80004fa <decode_exc_return+0xa6>
        case 0x08:
            return "Return to Thread mode, use MSP, FP state";
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <decode_exc_return+0xc0>)
 80004f2:	e002      	b.n	80004fa <decode_exc_return+0xa6>
        case 0x0C:
            return "Return to Thread mode, use PSP, FP state";
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <decode_exc_return+0xc4>)
 80004f6:	e000      	b.n	80004fa <decode_exc_return+0xa6>
        default:
            return "Unknown EXC_RETURN value";
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <decode_exc_return+0xc8>)
//        case 0xFFFFFFED:
//            return "Return to Thread mode, use PSP, FP state";
//        default:
//            return "Unknown EXC_RETURN value";
//    }
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	080017e0 	.word	0x080017e0
 8000508:	08001810 	.word	0x08001810
 800050c:	0800183c 	.word	0x0800183c
 8000510:	08001868 	.word	0x08001868
 8000514:	08001894 	.word	0x08001894
 8000518:	080018c0 	.word	0x080018c0
 800051c:	080018ec 	.word	0x080018ec

08000520 <print_stack_frame>:

void print_stack_frame(volatile uint32_t *stack_frame);


void print_stack_frame(volatile uint32_t *stack_frame)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
    printf("===== STACK FRAME =====\n");
 8000528:	4820      	ldr	r0, [pc, #128]	@ (80005ac <print_stack_frame+0x8c>)
 800052a:	f000 fadf 	bl	8000aec <puts>
    printf("R0   = 0x%08lX\n", stack_frame[0]);  /* R0 is at offset 0 */
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	481e      	ldr	r0, [pc, #120]	@ (80005b0 <print_stack_frame+0x90>)
 8000536:	f000 fa71 	bl	8000a1c <iprintf>
    printf("R1   = 0x%08lX\n", stack_frame[1]);  /* R1 is at offset 1 */
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3304      	adds	r3, #4
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	481c      	ldr	r0, [pc, #112]	@ (80005b4 <print_stack_frame+0x94>)
 8000544:	f000 fa6a 	bl	8000a1c <iprintf>
    printf("R2   = 0x%08lX\n", stack_frame[2]);  /* R2 is at offset 2 */
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3308      	adds	r3, #8
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	4819      	ldr	r0, [pc, #100]	@ (80005b8 <print_stack_frame+0x98>)
 8000552:	f000 fa63 	bl	8000a1c <iprintf>
    printf("R3   = 0x%08lX\n", stack_frame[3]);  /* R3 is at offset 3 */
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	330c      	adds	r3, #12
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	4817      	ldr	r0, [pc, #92]	@ (80005bc <print_stack_frame+0x9c>)
 8000560:	f000 fa5c 	bl	8000a1c <iprintf>
    printf("R12  = 0x%08lX\n", stack_frame[4]);  /* R12 is at offset 4 */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3310      	adds	r3, #16
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <print_stack_frame+0xa0>)
 800056e:	f000 fa55 	bl	8000a1c <iprintf>
    printf("LR   = 0x%08lX\n", stack_frame[5]);  /* LR is at offset 5 */
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3314      	adds	r3, #20
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	4812      	ldr	r0, [pc, #72]	@ (80005c4 <print_stack_frame+0xa4>)
 800057c:	f000 fa4e 	bl	8000a1c <iprintf>
    printf("PC   = 0x%08lX\n", stack_frame[6]);  /* PC is at offset 6 */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3318      	adds	r3, #24
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4619      	mov	r1, r3
 8000588:	480f      	ldr	r0, [pc, #60]	@ (80005c8 <print_stack_frame+0xa8>)
 800058a:	f000 fa47 	bl	8000a1c <iprintf>
    printf("xPSR = 0x%08lX\n", stack_frame[7]);  /* xPSR is at offset 7 */
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	331c      	adds	r3, #28
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <print_stack_frame+0xac>)
 8000598:	f000 fa40 	bl	8000a1c <iprintf>
    printf("===============================\n");
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <print_stack_frame+0xb0>)
 800059e:	f000 faa5 	bl	8000aec <puts>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	08001908 	.word	0x08001908
 80005b0:	08001920 	.word	0x08001920
 80005b4:	08001930 	.word	0x08001930
 80005b8:	08001940 	.word	0x08001940
 80005bc:	08001950 	.word	0x08001950
 80005c0:	08001960 	.word	0x08001960
 80005c4:	08001970 	.word	0x08001970
 80005c8:	08001980 	.word	0x08001980
 80005cc:	08001990 	.word	0x08001990
 80005d0:	080019a0 	.word	0x080019a0

080005d4 <USART2_IRQHandler>:
 * R0-R3, R12, LR, PC, xPSR onto the current stack (PSP or MSP)
 *
 * This function visualizes this stack frame
 */
void USART2_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
    __asm volatile ("mov %0, lr" : "=r" (result));
 80005da:	4673      	mov	r3, lr
 80005dc:	60fb      	str	r3, [r7, #12]
    return result;
 80005de:	68fb      	ldr	r3, [r7, #12]
    /* Capture the EXC_RETURN value from LR at start of handler */
    g_exc_return = read_exc_return();
 80005e0:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <USART2_IRQHandler+0xcc>)
 80005e2:	6013      	str	r3, [r2, #0]

    /* Get pointer to the automatically stacked registers */
    uint32_t *stack_frame;

    /* Check which stack pointer was active when the interrupt occurred */
    uint32_t control = __get_CONTROL();
 80005e4:	f7ff ff2a 	bl	800043c <__get_CONTROL>
 80005e8:	6138      	str	r0, [r7, #16]
    if (control & 0x2) { /* Thread mode using PSP */
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d005      	beq.n	8000600 <USART2_IRQHandler+0x2c>
    __asm volatile ("MRS %0, PSP" : "=r" (result));
 80005f4:	f3ef 8309 	mrs	r3, PSP
 80005f8:	60bb      	str	r3, [r7, #8]
    return result;
 80005fa:	68bb      	ldr	r3, [r7, #8]
        stack_frame = (uint32_t *)__get_PSP();
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e004      	b.n	800060a <USART2_IRQHandler+0x36>
    __asm volatile ("MRS %0, MSP" : "=r" (result));
 8000600:	f3ef 8308 	mrs	r3, MSP
 8000604:	607b      	str	r3, [r7, #4]
    return result;
 8000606:	687b      	ldr	r3, [r7, #4]
    } else {            /* Thread mode using MSP or Handler mode */
        stack_frame = (uint32_t *)__get_MSP();
 8000608:	617b      	str	r3, [r7, #20]
    }

    /* Print EXC_RETURN information */
    printf("\n-- INTERRUPT HANDLER ENTERED --\n");
 800060a:	4826      	ldr	r0, [pc, #152]	@ (80006a4 <USART2_IRQHandler+0xd0>)
 800060c:	f000 fa6e 	bl	8000aec <puts>
    printf("EXC_RETURN value in LR: 0x%08lX\n", g_exc_return);
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <USART2_IRQHandler+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4824      	ldr	r0, [pc, #144]	@ (80006a8 <USART2_IRQHandler+0xd4>)
 8000618:	f000 fa00 	bl	8000a1c <iprintf>
    printf("Meaning: %s\n\n", decode_exc_return(g_exc_return));
 800061c:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <USART2_IRQHandler+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff17 	bl	8000454 <decode_exc_return>
 8000626:	4603      	mov	r3, r0
 8000628:	4619      	mov	r1, r3
 800062a:	4820      	ldr	r0, [pc, #128]	@ (80006ac <USART2_IRQHandler+0xd8>)
 800062c:	f000 f9f6 	bl	8000a1c <iprintf>

    /* Print the automatically stacked registers */
    print_stack_frame(stack_frame);
 8000630:	6978      	ldr	r0, [r7, #20]
 8000632:	f7ff ff75 	bl	8000520 <print_stack_frame>

    /* Visualize stack pointer address before and after processing */
    printf("\nSP before registers pushed: 0x%08lX\n", (uint32_t)stack_frame + 32); /* 8 registers * 4 bytes */
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3320      	adds	r3, #32
 800063a:	4619      	mov	r1, r3
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <USART2_IRQHandler+0xdc>)
 800063e:	f000 f9ed 	bl	8000a1c <iprintf>
    printf("SP during IRQ handler:     0x%08lX\n", (uint32_t)stack_frame);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	4619      	mov	r1, r3
 8000646:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <USART2_IRQHandler+0xe0>)
 8000648:	f000 f9e8 	bl	8000a1c <iprintf>

    printf("\nWhen this handler returns, the processor will:\n");
 800064c:	481a      	ldr	r0, [pc, #104]	@ (80006b8 <USART2_IRQHandler+0xe4>)
 800064e:	f000 fa4d 	bl	8000aec <puts>
    printf("1. Restore registers R0-R3, R12, LR, PC, PSR from stack\n");
 8000652:	481a      	ldr	r0, [pc, #104]	@ (80006bc <USART2_IRQHandler+0xe8>)
 8000654:	f000 fa4a 	bl	8000aec <puts>
    printf("2. Use EXC_RETURN (0x%08lX) to determine return behavior\n", g_exc_return);
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <USART2_IRQHandler+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	4818      	ldr	r0, [pc, #96]	@ (80006c0 <USART2_IRQHandler+0xec>)
 8000660:	f000 f9dc 	bl	8000a1c <iprintf>
    printf("3. Return to %s mode using %s\n\n",
           (g_exc_return & 0x8) ? "Thread" : "Handler",
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <USART2_IRQHandler+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0308 	and.w	r3, r3, #8
    printf("3. Return to %s mode using %s\n\n",
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <USART2_IRQHandler+0xa0>
 8000670:	4914      	ldr	r1, [pc, #80]	@ (80006c4 <USART2_IRQHandler+0xf0>)
 8000672:	e000      	b.n	8000676 <USART2_IRQHandler+0xa2>
 8000674:	4914      	ldr	r1, [pc, #80]	@ (80006c8 <USART2_IRQHandler+0xf4>)
           (g_exc_return & 0x4) ? "PSP" : "MSP");
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <USART2_IRQHandler+0xcc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 0304 	and.w	r3, r3, #4
    printf("3. Return to %s mode using %s\n\n",
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <USART2_IRQHandler+0xb2>
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <USART2_IRQHandler+0xf8>)
 8000684:	e000      	b.n	8000688 <USART2_IRQHandler+0xb4>
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <USART2_IRQHandler+0xfc>)
 8000688:	461a      	mov	r2, r3
 800068a:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <USART2_IRQHandler+0x100>)
 800068c:	f000 f9c6 	bl	8000a1c <iprintf>

    /* Clear the pending interrupt */
    NVIC_ClearPendingIRQ(TEST_IRQ);
 8000690:	203e      	movs	r0, #62	@ 0x3e
 8000692:	f7ff fe69 	bl	8000368 <NVIC_ClearPendingIRQ>
}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078
 80006a4:	080019c0 	.word	0x080019c0
 80006a8:	080019e4 	.word	0x080019e4
 80006ac:	08001a08 	.word	0x08001a08
 80006b0:	08001a18 	.word	0x08001a18
 80006b4:	08001a40 	.word	0x08001a40
 80006b8:	08001a64 	.word	0x08001a64
 80006bc:	08001a94 	.word	0x08001a94
 80006c0:	08001acc 	.word	0x08001acc
 80006c4:	08001b08 	.word	0x08001b08
 80006c8:	08001b10 	.word	0x08001b10
 80006cc:	08001b18 	.word	0x08001b18
 80006d0:	08001b1c 	.word	0x08001b1c
 80006d4:	08001b20 	.word	0x08001b20

080006d8 <trigger_test_interrupt>:


/* Setup and trigger the interrupt */
void trigger_test_interrupt(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    /* Trigger the interrupt using STIR */
//    NVIC_SetPendingIRQ(TEST_IRQ);
    NVIC_TriggerInterrupt(TEST_IRQ);
 80006dc:	203e      	movs	r0, #62	@ 0x3e
 80006de:	f7ff fe9d 	bl	800041c <NVIC_TriggerInterrupt>

    printf("Returned from interrupt handler\n");
 80006e2:	4802      	ldr	r0, [pc, #8]	@ (80006ec <trigger_test_interrupt+0x14>)
 80006e4:	f000 fa02 	bl	8000aec <puts>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08001b40 	.word	0x08001b40

080006f0 <main>:


int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
    uint32_t *stack_frame;

	printf("\n--- Stack Visualization Demo ---\n");
 80006f6:	4810      	ldr	r0, [pc, #64]	@ (8000738 <main+0x48>)
 80006f8:	f000 f9f8 	bl	8000aec <puts>
    /* Start first task by switching to PSP */
//    switch_sp_to_psp();

    /* Enable the interrupt */
    NVIC_EnableIRQ(TEST_IRQ);
 80006fc:	203e      	movs	r0, #62	@ 0x3e
 80006fe:	f7ff fdd9 	bl	80002b4 <NVIC_EnableIRQ>
    /* Check which stack pointer was active when the interrupt occurred */
    uint32_t control = __get_CONTROL();
 8000702:	f7ff fe9b 	bl	800043c <__get_CONTROL>
 8000706:	60b8      	str	r0, [r7, #8]
    if (control & 0x2) { /* Thread mode using PSP */
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	2b00      	cmp	r3, #0
 8000710:	d005      	beq.n	800071e <main+0x2e>
    __asm volatile ("MRS %0, PSP" : "=r" (result));
 8000712:	f3ef 8309 	mrs	r3, PSP
 8000716:	607b      	str	r3, [r7, #4]
    return result;
 8000718:	687b      	ldr	r3, [r7, #4]
        stack_frame = (uint32_t *)__get_PSP();
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e004      	b.n	8000728 <main+0x38>
    __asm volatile ("MRS %0, MSP" : "=r" (result));
 800071e:	f3ef 8308 	mrs	r3, MSP
 8000722:	603b      	str	r3, [r7, #0]
    return result;
 8000724:	683b      	ldr	r3, [r7, #0]
    } else {            /* Thread mode using MSP or Handler mode */
        stack_frame = (uint32_t *)__get_MSP();
 8000726:	60fb      	str	r3, [r7, #12]
    }
    /* Print the automatically stacked registers */
    print_stack_frame(stack_frame);
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f7ff fef9 	bl	8000520 <print_stack_frame>
    trigger_test_interrupt();
 800072e:	f7ff ffd3 	bl	80006d8 <trigger_test_interrupt>

    /* Loop forever */
	for(;;);
 8000732:	bf00      	nop
 8000734:	e7fd      	b.n	8000732 <main+0x42>
 8000736:	bf00      	nop
 8000738:	08001b60 	.word	0x08001b60

0800073c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	e00a      	b.n	8000764 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800074e:	f3af 8000 	nop.w
 8000752:	4601      	mov	r1, r0
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	60ba      	str	r2, [r7, #8]
 800075a:	b2ca      	uxtb	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	dbf0      	blt.n	800074e <_read+0x12>
  }

  return len;
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800079c:	605a      	str	r2, [r3, #4]
  return 0;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <_isatty>:

int _isatty(int file)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f000 fa9e 	bl	8000d48 <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20030000 	.word	0x20030000
 8000838:	00000400 	.word	0x00000400
 800083c:	2000007c 	.word	0x2000007c
 8000840:	200001d0 	.word	0x200001d0

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	@ (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	@ (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f000 fa6f 	bl	8000d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff ff3b 	bl	80006f0 <main>

0800087a <LoopForever>:

LoopForever:
  b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000888:	08001bc0 	.word	0x08001bc0
  ldr r2, =_sbss
 800088c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000890:	200001cc 	.word	0x200001cc

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <std>:
 8000898:	2300      	movs	r3, #0
 800089a:	b510      	push	{r4, lr}
 800089c:	4604      	mov	r4, r0
 800089e:	6083      	str	r3, [r0, #8]
 80008a0:	8181      	strh	r1, [r0, #12]
 80008a2:	4619      	mov	r1, r3
 80008a4:	6643      	str	r3, [r0, #100]	@ 0x64
 80008a6:	81c2      	strh	r2, [r0, #14]
 80008a8:	2208      	movs	r2, #8
 80008aa:	6183      	str	r3, [r0, #24]
 80008ac:	e9c0 3300 	strd	r3, r3, [r0]
 80008b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008b4:	305c      	adds	r0, #92	@ 0x5c
 80008b6:	f000 f9f9 	bl	8000cac <memset>
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <std+0x58>)
 80008bc:	6224      	str	r4, [r4, #32]
 80008be:	6263      	str	r3, [r4, #36]	@ 0x24
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <std+0x5c>)
 80008c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <std+0x60>)
 80008c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <std+0x64>)
 80008ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <std+0x68>)
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d006      	beq.n	80008e0 <std+0x48>
 80008d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80008d6:	4294      	cmp	r4, r2
 80008d8:	d002      	beq.n	80008e0 <std+0x48>
 80008da:	33d0      	adds	r3, #208	@ 0xd0
 80008dc:	429c      	cmp	r4, r3
 80008de:	d105      	bne.n	80008ec <std+0x54>
 80008e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80008e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e8:	f000 ba58 	b.w	8000d9c <__retarget_lock_init_recursive>
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	08000afd 	.word	0x08000afd
 80008f4:	08000b1f 	.word	0x08000b1f
 80008f8:	08000b57 	.word	0x08000b57
 80008fc:	08000b7b 	.word	0x08000b7b
 8000900:	20000080 	.word	0x20000080

08000904 <stdio_exit_handler>:
 8000904:	4a02      	ldr	r2, [pc, #8]	@ (8000910 <stdio_exit_handler+0xc>)
 8000906:	4903      	ldr	r1, [pc, #12]	@ (8000914 <stdio_exit_handler+0x10>)
 8000908:	4803      	ldr	r0, [pc, #12]	@ (8000918 <stdio_exit_handler+0x14>)
 800090a:	f000 b869 	b.w	80009e0 <_fwalk_sglue>
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000
 8000914:	08001635 	.word	0x08001635
 8000918:	20000010 	.word	0x20000010

0800091c <cleanup_stdio>:
 800091c:	6841      	ldr	r1, [r0, #4]
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <cleanup_stdio+0x34>)
 8000920:	4299      	cmp	r1, r3
 8000922:	b510      	push	{r4, lr}
 8000924:	4604      	mov	r4, r0
 8000926:	d001      	beq.n	800092c <cleanup_stdio+0x10>
 8000928:	f000 fe84 	bl	8001634 <_fflush_r>
 800092c:	68a1      	ldr	r1, [r4, #8]
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <cleanup_stdio+0x38>)
 8000930:	4299      	cmp	r1, r3
 8000932:	d002      	beq.n	800093a <cleanup_stdio+0x1e>
 8000934:	4620      	mov	r0, r4
 8000936:	f000 fe7d 	bl	8001634 <_fflush_r>
 800093a:	68e1      	ldr	r1, [r4, #12]
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <cleanup_stdio+0x3c>)
 800093e:	4299      	cmp	r1, r3
 8000940:	d004      	beq.n	800094c <cleanup_stdio+0x30>
 8000942:	4620      	mov	r0, r4
 8000944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000948:	f000 be74 	b.w	8001634 <_fflush_r>
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	20000080 	.word	0x20000080
 8000954:	200000e8 	.word	0x200000e8
 8000958:	20000150 	.word	0x20000150

0800095c <global_stdio_init.part.0>:
 800095c:	b510      	push	{r4, lr}
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <global_stdio_init.part.0+0x30>)
 8000960:	2104      	movs	r1, #4
 8000962:	4c0b      	ldr	r4, [pc, #44]	@ (8000990 <global_stdio_init.part.0+0x34>)
 8000964:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <global_stdio_init.part.0+0x38>)
 8000966:	4620      	mov	r0, r4
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	f7ff ff94 	bl	8000898 <std>
 8000970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000974:	2201      	movs	r2, #1
 8000976:	2109      	movs	r1, #9
 8000978:	f7ff ff8e 	bl	8000898 <std>
 800097c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000980:	2202      	movs	r2, #2
 8000982:	2112      	movs	r1, #18
 8000984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000988:	f7ff bf86 	b.w	8000898 <std>
 800098c:	200001b8 	.word	0x200001b8
 8000990:	20000080 	.word	0x20000080
 8000994:	08000905 	.word	0x08000905

08000998 <__sfp_lock_acquire>:
 8000998:	4801      	ldr	r0, [pc, #4]	@ (80009a0 <__sfp_lock_acquire+0x8>)
 800099a:	f000 ba00 	b.w	8000d9e <__retarget_lock_acquire_recursive>
 800099e:	bf00      	nop
 80009a0:	200001c1 	.word	0x200001c1

080009a4 <__sfp_lock_release>:
 80009a4:	4801      	ldr	r0, [pc, #4]	@ (80009ac <__sfp_lock_release+0x8>)
 80009a6:	f000 b9fb 	b.w	8000da0 <__retarget_lock_release_recursive>
 80009aa:	bf00      	nop
 80009ac:	200001c1 	.word	0x200001c1

080009b0 <__sinit>:
 80009b0:	b510      	push	{r4, lr}
 80009b2:	4604      	mov	r4, r0
 80009b4:	f7ff fff0 	bl	8000998 <__sfp_lock_acquire>
 80009b8:	6a23      	ldr	r3, [r4, #32]
 80009ba:	b11b      	cbz	r3, 80009c4 <__sinit+0x14>
 80009bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c0:	f7ff bff0 	b.w	80009a4 <__sfp_lock_release>
 80009c4:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <__sinit+0x28>)
 80009c6:	6223      	str	r3, [r4, #32]
 80009c8:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <__sinit+0x2c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1f5      	bne.n	80009bc <__sinit+0xc>
 80009d0:	f7ff ffc4 	bl	800095c <global_stdio_init.part.0>
 80009d4:	e7f2      	b.n	80009bc <__sinit+0xc>
 80009d6:	bf00      	nop
 80009d8:	0800091d 	.word	0x0800091d
 80009dc:	200001b8 	.word	0x200001b8

080009e0 <_fwalk_sglue>:
 80009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e4:	4607      	mov	r7, r0
 80009e6:	4688      	mov	r8, r1
 80009e8:	4614      	mov	r4, r2
 80009ea:	2600      	movs	r6, #0
 80009ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009f0:	f1b9 0901 	subs.w	r9, r9, #1
 80009f4:	d505      	bpl.n	8000a02 <_fwalk_sglue+0x22>
 80009f6:	6824      	ldr	r4, [r4, #0]
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	d1f7      	bne.n	80009ec <_fwalk_sglue+0xc>
 80009fc:	4630      	mov	r0, r6
 80009fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a02:	89ab      	ldrh	r3, [r5, #12]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d907      	bls.n	8000a18 <_fwalk_sglue+0x38>
 8000a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	d003      	beq.n	8000a18 <_fwalk_sglue+0x38>
 8000a10:	4629      	mov	r1, r5
 8000a12:	4638      	mov	r0, r7
 8000a14:	47c0      	blx	r8
 8000a16:	4306      	orrs	r6, r0
 8000a18:	3568      	adds	r5, #104	@ 0x68
 8000a1a:	e7e9      	b.n	80009f0 <_fwalk_sglue+0x10>

08000a1c <iprintf>:
 8000a1c:	b40f      	push	{r0, r1, r2, r3}
 8000a1e:	b507      	push	{r0, r1, r2, lr}
 8000a20:	4906      	ldr	r1, [pc, #24]	@ (8000a3c <iprintf+0x20>)
 8000a22:	ab04      	add	r3, sp, #16
 8000a24:	6808      	ldr	r0, [r1, #0]
 8000a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a2a:	6881      	ldr	r1, [r0, #8]
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	f000 fad9 	bl	8000fe4 <_vfiprintf_r>
 8000a32:	b003      	add	sp, #12
 8000a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr
 8000a3c:	2000000c 	.word	0x2000000c

08000a40 <_puts_r>:
 8000a40:	6a03      	ldr	r3, [r0, #32]
 8000a42:	b570      	push	{r4, r5, r6, lr}
 8000a44:	4605      	mov	r5, r0
 8000a46:	460e      	mov	r6, r1
 8000a48:	6884      	ldr	r4, [r0, #8]
 8000a4a:	b90b      	cbnz	r3, 8000a50 <_puts_r+0x10>
 8000a4c:	f7ff ffb0 	bl	80009b0 <__sinit>
 8000a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a52:	07db      	lsls	r3, r3, #31
 8000a54:	d405      	bmi.n	8000a62 <_puts_r+0x22>
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	0598      	lsls	r0, r3, #22
 8000a5a:	d402      	bmi.n	8000a62 <_puts_r+0x22>
 8000a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a5e:	f000 f99e 	bl	8000d9e <__retarget_lock_acquire_recursive>
 8000a62:	89a3      	ldrh	r3, [r4, #12]
 8000a64:	0719      	lsls	r1, r3, #28
 8000a66:	d502      	bpl.n	8000a6e <_puts_r+0x2e>
 8000a68:	6923      	ldr	r3, [r4, #16]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d135      	bne.n	8000ada <_puts_r+0x9a>
 8000a6e:	4621      	mov	r1, r4
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 f8c5 	bl	8000c00 <__swsetup_r>
 8000a76:	b380      	cbz	r0, 8000ada <_puts_r+0x9a>
 8000a78:	f04f 35ff 	mov.w	r5, #4294967295
 8000a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a7e:	07da      	lsls	r2, r3, #31
 8000a80:	d405      	bmi.n	8000a8e <_puts_r+0x4e>
 8000a82:	89a3      	ldrh	r3, [r4, #12]
 8000a84:	059b      	lsls	r3, r3, #22
 8000a86:	d402      	bmi.n	8000a8e <_puts_r+0x4e>
 8000a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a8a:	f000 f989 	bl	8000da0 <__retarget_lock_release_recursive>
 8000a8e:	4628      	mov	r0, r5
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	da04      	bge.n	8000aa0 <_puts_r+0x60>
 8000a96:	69a2      	ldr	r2, [r4, #24]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dc17      	bgt.n	8000acc <_puts_r+0x8c>
 8000a9c:	290a      	cmp	r1, #10
 8000a9e:	d015      	beq.n	8000acc <_puts_r+0x8c>
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	6022      	str	r2, [r4, #0]
 8000aa6:	7019      	strb	r1, [r3, #0]
 8000aa8:	68a3      	ldr	r3, [r4, #8]
 8000aaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	60a3      	str	r3, [r4, #8]
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d1ed      	bne.n	8000a92 <_puts_r+0x52>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da11      	bge.n	8000ade <_puts_r+0x9e>
 8000aba:	4622      	mov	r2, r4
 8000abc:	210a      	movs	r1, #10
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f000 f85f 	bl	8000b82 <__swbuf_r>
 8000ac4:	3001      	adds	r0, #1
 8000ac6:	d0d7      	beq.n	8000a78 <_puts_r+0x38>
 8000ac8:	250a      	movs	r5, #10
 8000aca:	e7d7      	b.n	8000a7c <_puts_r+0x3c>
 8000acc:	4622      	mov	r2, r4
 8000ace:	4628      	mov	r0, r5
 8000ad0:	f000 f857 	bl	8000b82 <__swbuf_r>
 8000ad4:	3001      	adds	r0, #1
 8000ad6:	d1e7      	bne.n	8000aa8 <_puts_r+0x68>
 8000ad8:	e7ce      	b.n	8000a78 <_puts_r+0x38>
 8000ada:	3e01      	subs	r6, #1
 8000adc:	e7e4      	b.n	8000aa8 <_puts_r+0x68>
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	6022      	str	r2, [r4, #0]
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e7ee      	b.n	8000ac8 <_puts_r+0x88>
	...

08000aec <puts>:
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <puts+0xc>)
 8000aee:	4601      	mov	r1, r0
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	f7ff bfa5 	b.w	8000a40 <_puts_r>
 8000af6:	bf00      	nop
 8000af8:	2000000c 	.word	0x2000000c

08000afc <__sread>:
 8000afc:	b510      	push	{r4, lr}
 8000afe:	460c      	mov	r4, r1
 8000b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b04:	f000 f8fc 	bl	8000d00 <_read_r>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	bfab      	itete	ge
 8000b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8000b10:	181b      	addge	r3, r3, r0
 8000b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000b16:	bfac      	ite	ge
 8000b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000b1a:	81a3      	strhlt	r3, [r4, #12]
 8000b1c:	bd10      	pop	{r4, pc}

08000b1e <__swrite>:
 8000b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b22:	461f      	mov	r7, r3
 8000b24:	898b      	ldrh	r3, [r1, #12]
 8000b26:	4605      	mov	r5, r0
 8000b28:	460c      	mov	r4, r1
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	4616      	mov	r6, r2
 8000b2e:	d505      	bpl.n	8000b3c <__swrite+0x1e>
 8000b30:	2302      	movs	r3, #2
 8000b32:	2200      	movs	r2, #0
 8000b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b38:	f000 f8d0 	bl	8000cdc <_lseek_r>
 8000b3c:	89a3      	ldrh	r3, [r4, #12]
 8000b3e:	4632      	mov	r2, r6
 8000b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b44:	4628      	mov	r0, r5
 8000b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b4a:	81a3      	strh	r3, [r4, #12]
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b52:	f000 b8e7 	b.w	8000d24 <_write_r>

08000b56 <__sseek>:
 8000b56:	b510      	push	{r4, lr}
 8000b58:	460c      	mov	r4, r1
 8000b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b5e:	f000 f8bd 	bl	8000cdc <_lseek_r>
 8000b62:	1c43      	adds	r3, r0, #1
 8000b64:	89a3      	ldrh	r3, [r4, #12]
 8000b66:	bf15      	itete	ne
 8000b68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b72:	81a3      	strheq	r3, [r4, #12]
 8000b74:	bf18      	it	ne
 8000b76:	81a3      	strhne	r3, [r4, #12]
 8000b78:	bd10      	pop	{r4, pc}

08000b7a <__sclose>:
 8000b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b7e:	f000 b89d 	b.w	8000cbc <_close_r>

08000b82 <__swbuf_r>:
 8000b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b84:	460e      	mov	r6, r1
 8000b86:	4614      	mov	r4, r2
 8000b88:	4605      	mov	r5, r0
 8000b8a:	b118      	cbz	r0, 8000b94 <__swbuf_r+0x12>
 8000b8c:	6a03      	ldr	r3, [r0, #32]
 8000b8e:	b90b      	cbnz	r3, 8000b94 <__swbuf_r+0x12>
 8000b90:	f7ff ff0e 	bl	80009b0 <__sinit>
 8000b94:	69a3      	ldr	r3, [r4, #24]
 8000b96:	60a3      	str	r3, [r4, #8]
 8000b98:	89a3      	ldrh	r3, [r4, #12]
 8000b9a:	071a      	lsls	r2, r3, #28
 8000b9c:	d501      	bpl.n	8000ba2 <__swbuf_r+0x20>
 8000b9e:	6923      	ldr	r3, [r4, #16]
 8000ba0:	b943      	cbnz	r3, 8000bb4 <__swbuf_r+0x32>
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 f82b 	bl	8000c00 <__swsetup_r>
 8000baa:	b118      	cbz	r0, 8000bb4 <__swbuf_r+0x32>
 8000bac:	f04f 37ff 	mov.w	r7, #4294967295
 8000bb0:	4638      	mov	r0, r7
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	b2f6      	uxtb	r6, r6
 8000bb8:	6922      	ldr	r2, [r4, #16]
 8000bba:	4637      	mov	r7, r6
 8000bbc:	1a98      	subs	r0, r3, r2
 8000bbe:	6963      	ldr	r3, [r4, #20]
 8000bc0:	4283      	cmp	r3, r0
 8000bc2:	dc05      	bgt.n	8000bd0 <__swbuf_r+0x4e>
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	f000 fd34 	bl	8001634 <_fflush_r>
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d1ed      	bne.n	8000bac <__swbuf_r+0x2a>
 8000bd0:	68a3      	ldr	r3, [r4, #8]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60a3      	str	r3, [r4, #8]
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	6022      	str	r2, [r4, #0]
 8000bdc:	701e      	strb	r6, [r3, #0]
 8000bde:	1c43      	adds	r3, r0, #1
 8000be0:	6962      	ldr	r2, [r4, #20]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__swbuf_r+0x6e>
 8000be6:	89a3      	ldrh	r3, [r4, #12]
 8000be8:	07db      	lsls	r3, r3, #31
 8000bea:	d5e1      	bpl.n	8000bb0 <__swbuf_r+0x2e>
 8000bec:	2e0a      	cmp	r6, #10
 8000bee:	d1df      	bne.n	8000bb0 <__swbuf_r+0x2e>
 8000bf0:	4621      	mov	r1, r4
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	f000 fd1e 	bl	8001634 <_fflush_r>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d0d9      	beq.n	8000bb0 <__swbuf_r+0x2e>
 8000bfc:	e7d6      	b.n	8000bac <__swbuf_r+0x2a>
	...

08000c00 <__swsetup_r>:
 8000c00:	b538      	push	{r3, r4, r5, lr}
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <__swsetup_r+0xa8>)
 8000c04:	4605      	mov	r5, r0
 8000c06:	460c      	mov	r4, r1
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	b118      	cbz	r0, 8000c14 <__swsetup_r+0x14>
 8000c0c:	6a03      	ldr	r3, [r0, #32]
 8000c0e:	b90b      	cbnz	r3, 8000c14 <__swsetup_r+0x14>
 8000c10:	f7ff fece 	bl	80009b0 <__sinit>
 8000c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c18:	0719      	lsls	r1, r3, #28
 8000c1a:	d422      	bmi.n	8000c62 <__swsetup_r+0x62>
 8000c1c:	06da      	lsls	r2, r3, #27
 8000c1e:	d407      	bmi.n	8000c30 <__swsetup_r+0x30>
 8000c20:	2209      	movs	r2, #9
 8000c22:	602a      	str	r2, [r5, #0]
 8000c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	81a3      	strh	r3, [r4, #12]
 8000c2e:	e033      	b.n	8000c98 <__swsetup_r+0x98>
 8000c30:	0758      	lsls	r0, r3, #29
 8000c32:	d512      	bpl.n	8000c5a <__swsetup_r+0x5a>
 8000c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c36:	b141      	cbz	r1, 8000c4a <__swsetup_r+0x4a>
 8000c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d002      	beq.n	8000c46 <__swsetup_r+0x46>
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 f8af 	bl	8000da4 <_free_r>
 8000c46:	2300      	movs	r3, #0
 8000c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c4a:	89a3      	ldrh	r3, [r4, #12]
 8000c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c50:	81a3      	strh	r3, [r4, #12]
 8000c52:	2300      	movs	r3, #0
 8000c54:	6063      	str	r3, [r4, #4]
 8000c56:	6923      	ldr	r3, [r4, #16]
 8000c58:	6023      	str	r3, [r4, #0]
 8000c5a:	89a3      	ldrh	r3, [r4, #12]
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	6923      	ldr	r3, [r4, #16]
 8000c64:	b94b      	cbnz	r3, 8000c7a <__swsetup_r+0x7a>
 8000c66:	89a3      	ldrh	r3, [r4, #12]
 8000c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c70:	d003      	beq.n	8000c7a <__swsetup_r+0x7a>
 8000c72:	4621      	mov	r1, r4
 8000c74:	4628      	mov	r0, r5
 8000c76:	f000 fd2a 	bl	80016ce <__smakebuf_r>
 8000c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c7e:	f013 0201 	ands.w	r2, r3, #1
 8000c82:	d00a      	beq.n	8000c9a <__swsetup_r+0x9a>
 8000c84:	2200      	movs	r2, #0
 8000c86:	60a2      	str	r2, [r4, #8]
 8000c88:	6962      	ldr	r2, [r4, #20]
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	61a2      	str	r2, [r4, #24]
 8000c8e:	6922      	ldr	r2, [r4, #16]
 8000c90:	b942      	cbnz	r2, 8000ca4 <__swsetup_r+0xa4>
 8000c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c96:	d1c5      	bne.n	8000c24 <__swsetup_r+0x24>
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	0799      	lsls	r1, r3, #30
 8000c9c:	bf58      	it	pl
 8000c9e:	6962      	ldrpl	r2, [r4, #20]
 8000ca0:	60a2      	str	r2, [r4, #8]
 8000ca2:	e7f4      	b.n	8000c8e <__swsetup_r+0x8e>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	e7f7      	b.n	8000c98 <__swsetup_r+0x98>
 8000ca8:	2000000c 	.word	0x2000000c

08000cac <memset>:
 8000cac:	4402      	add	r2, r0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d100      	bne.n	8000cb6 <memset+0xa>
 8000cb4:	4770      	bx	lr
 8000cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8000cba:	e7f9      	b.n	8000cb0 <memset+0x4>

08000cbc <_close_r>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	4d05      	ldr	r5, [pc, #20]	@ (8000cd8 <_close_r+0x1c>)
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	602b      	str	r3, [r5, #0]
 8000cc8:	f7ff fd55 	bl	8000776 <_close>
 8000ccc:	1c43      	adds	r3, r0, #1
 8000cce:	d102      	bne.n	8000cd6 <_close_r+0x1a>
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	b103      	cbz	r3, 8000cd6 <_close_r+0x1a>
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	200001bc 	.word	0x200001bc

08000cdc <_lseek_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4d06      	ldr	r5, [pc, #24]	@ (8000cfc <_lseek_r+0x20>)
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	602a      	str	r2, [r5, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	f7ff fd67 	bl	80007be <_lseek>
 8000cf0:	1c43      	adds	r3, r0, #1
 8000cf2:	d102      	bne.n	8000cfa <_lseek_r+0x1e>
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	b103      	cbz	r3, 8000cfa <_lseek_r+0x1e>
 8000cf8:	6023      	str	r3, [r4, #0]
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}
 8000cfc:	200001bc 	.word	0x200001bc

08000d00 <_read_r>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	4604      	mov	r4, r0
 8000d04:	4d06      	ldr	r5, [pc, #24]	@ (8000d20 <_read_r+0x20>)
 8000d06:	4608      	mov	r0, r1
 8000d08:	4611      	mov	r1, r2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	602a      	str	r2, [r5, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f7ff fd14 	bl	800073c <_read>
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	d102      	bne.n	8000d1e <_read_r+0x1e>
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	b103      	cbz	r3, 8000d1e <_read_r+0x1e>
 8000d1c:	6023      	str	r3, [r4, #0]
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	200001bc 	.word	0x200001bc

08000d24 <_write_r>:
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4604      	mov	r4, r0
 8000d28:	4d06      	ldr	r5, [pc, #24]	@ (8000d44 <_write_r+0x20>)
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	602a      	str	r2, [r5, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f7ff faa2 	bl	800027c <_write>
 8000d38:	1c43      	adds	r3, r0, #1
 8000d3a:	d102      	bne.n	8000d42 <_write_r+0x1e>
 8000d3c:	682b      	ldr	r3, [r5, #0]
 8000d3e:	b103      	cbz	r3, 8000d42 <_write_r+0x1e>
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	200001bc 	.word	0x200001bc

08000d48 <__errno>:
 8000d48:	4b01      	ldr	r3, [pc, #4]	@ (8000d50 <__errno+0x8>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000000c 	.word	0x2000000c

08000d54 <__libc_init_array>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	4d0d      	ldr	r5, [pc, #52]	@ (8000d8c <__libc_init_array+0x38>)
 8000d58:	2600      	movs	r6, #0
 8000d5a:	4c0d      	ldr	r4, [pc, #52]	@ (8000d90 <__libc_init_array+0x3c>)
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	10a4      	asrs	r4, r4, #2
 8000d60:	42a6      	cmp	r6, r4
 8000d62:	d109      	bne.n	8000d78 <__libc_init_array+0x24>
 8000d64:	4d0b      	ldr	r5, [pc, #44]	@ (8000d94 <__libc_init_array+0x40>)
 8000d66:	2600      	movs	r6, #0
 8000d68:	4c0b      	ldr	r4, [pc, #44]	@ (8000d98 <__libc_init_array+0x44>)
 8000d6a:	f000 fd2d 	bl	80017c8 <_init>
 8000d6e:	1b64      	subs	r4, r4, r5
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	42a6      	cmp	r6, r4
 8000d74:	d105      	bne.n	8000d82 <__libc_init_array+0x2e>
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d7c:	3601      	adds	r6, #1
 8000d7e:	4798      	blx	r3
 8000d80:	e7ee      	b.n	8000d60 <__libc_init_array+0xc>
 8000d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d86:	3601      	adds	r6, #1
 8000d88:	4798      	blx	r3
 8000d8a:	e7f2      	b.n	8000d72 <__libc_init_array+0x1e>
 8000d8c:	08001bb8 	.word	0x08001bb8
 8000d90:	08001bb8 	.word	0x08001bb8
 8000d94:	08001bb8 	.word	0x08001bb8
 8000d98:	08001bbc 	.word	0x08001bbc

08000d9c <__retarget_lock_init_recursive>:
 8000d9c:	4770      	bx	lr

08000d9e <__retarget_lock_acquire_recursive>:
 8000d9e:	4770      	bx	lr

08000da0 <__retarget_lock_release_recursive>:
 8000da0:	4770      	bx	lr
	...

08000da4 <_free_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4605      	mov	r5, r0
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d041      	beq.n	8000e30 <_free_r+0x8c>
 8000dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000db0:	1f0c      	subs	r4, r1, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bfb8      	it	lt
 8000db6:	18e4      	addlt	r4, r4, r3
 8000db8:	f000 f8e0 	bl	8000f7c <__malloc_lock>
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e34 <_free_r+0x90>)
 8000dbe:	6813      	ldr	r3, [r2, #0]
 8000dc0:	b933      	cbnz	r3, 8000dd0 <_free_r+0x2c>
 8000dc2:	6063      	str	r3, [r4, #4]
 8000dc4:	6014      	str	r4, [r2, #0]
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dcc:	f000 b8dc 	b.w	8000f88 <__malloc_unlock>
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <_free_r+0x42>
 8000dd4:	6820      	ldr	r0, [r4, #0]
 8000dd6:	1821      	adds	r1, r4, r0
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf01      	itttt	eq
 8000ddc:	6819      	ldreq	r1, [r3, #0]
 8000dde:	685b      	ldreq	r3, [r3, #4]
 8000de0:	1809      	addeq	r1, r1, r0
 8000de2:	6021      	streq	r1, [r4, #0]
 8000de4:	e7ed      	b.n	8000dc2 <_free_r+0x1e>
 8000de6:	461a      	mov	r2, r3
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	b10b      	cbz	r3, 8000df0 <_free_r+0x4c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	d9fa      	bls.n	8000de6 <_free_r+0x42>
 8000df0:	6811      	ldr	r1, [r2, #0]
 8000df2:	1850      	adds	r0, r2, r1
 8000df4:	42a0      	cmp	r0, r4
 8000df6:	d10b      	bne.n	8000e10 <_free_r+0x6c>
 8000df8:	6820      	ldr	r0, [r4, #0]
 8000dfa:	4401      	add	r1, r0
 8000dfc:	1850      	adds	r0, r2, r1
 8000dfe:	6011      	str	r1, [r2, #0]
 8000e00:	4283      	cmp	r3, r0
 8000e02:	d1e0      	bne.n	8000dc6 <_free_r+0x22>
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4408      	add	r0, r1
 8000e0a:	6053      	str	r3, [r2, #4]
 8000e0c:	6010      	str	r0, [r2, #0]
 8000e0e:	e7da      	b.n	8000dc6 <_free_r+0x22>
 8000e10:	d902      	bls.n	8000e18 <_free_r+0x74>
 8000e12:	230c      	movs	r3, #12
 8000e14:	602b      	str	r3, [r5, #0]
 8000e16:	e7d6      	b.n	8000dc6 <_free_r+0x22>
 8000e18:	6820      	ldr	r0, [r4, #0]
 8000e1a:	1821      	adds	r1, r4, r0
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	bf02      	ittt	eq
 8000e20:	6819      	ldreq	r1, [r3, #0]
 8000e22:	685b      	ldreq	r3, [r3, #4]
 8000e24:	1809      	addeq	r1, r1, r0
 8000e26:	6063      	str	r3, [r4, #4]
 8000e28:	bf08      	it	eq
 8000e2a:	6021      	streq	r1, [r4, #0]
 8000e2c:	6054      	str	r4, [r2, #4]
 8000e2e:	e7ca      	b.n	8000dc6 <_free_r+0x22>
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
 8000e32:	bf00      	nop
 8000e34:	200001c8 	.word	0x200001c8

08000e38 <sbrk_aligned>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8000e78 <sbrk_aligned+0x40>)
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	4605      	mov	r5, r0
 8000e40:	6831      	ldr	r1, [r6, #0]
 8000e42:	b911      	cbnz	r1, 8000e4a <sbrk_aligned+0x12>
 8000e44:	f000 fca2 	bl	800178c <_sbrk_r>
 8000e48:	6030      	str	r0, [r6, #0]
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	f000 fc9d 	bl	800178c <_sbrk_r>
 8000e52:	1c43      	adds	r3, r0, #1
 8000e54:	d103      	bne.n	8000e5e <sbrk_aligned+0x26>
 8000e56:	f04f 34ff 	mov.w	r4, #4294967295
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
 8000e5e:	1cc4      	adds	r4, r0, #3
 8000e60:	f024 0403 	bic.w	r4, r4, #3
 8000e64:	42a0      	cmp	r0, r4
 8000e66:	d0f8      	beq.n	8000e5a <sbrk_aligned+0x22>
 8000e68:	1a21      	subs	r1, r4, r0
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	f000 fc8e 	bl	800178c <_sbrk_r>
 8000e70:	3001      	adds	r0, #1
 8000e72:	d1f2      	bne.n	8000e5a <sbrk_aligned+0x22>
 8000e74:	e7ef      	b.n	8000e56 <sbrk_aligned+0x1e>
 8000e76:	bf00      	nop
 8000e78:	200001c4 	.word	0x200001c4

08000e7c <_malloc_r>:
 8000e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e80:	1ccd      	adds	r5, r1, #3
 8000e82:	4606      	mov	r6, r0
 8000e84:	f025 0503 	bic.w	r5, r5, #3
 8000e88:	3508      	adds	r5, #8
 8000e8a:	2d0c      	cmp	r5, #12
 8000e8c:	bf38      	it	cc
 8000e8e:	250c      	movcc	r5, #12
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	db01      	blt.n	8000e98 <_malloc_r+0x1c>
 8000e94:	42a9      	cmp	r1, r5
 8000e96:	d904      	bls.n	8000ea2 <_malloc_r+0x26>
 8000e98:	230c      	movs	r3, #12
 8000e9a:	6033      	str	r3, [r6, #0]
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f78 <_malloc_r+0xfc>
 8000ea6:	f000 f869 	bl	8000f7c <__malloc_lock>
 8000eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8000eae:	461c      	mov	r4, r3
 8000eb0:	bb44      	cbnz	r4, 8000f04 <_malloc_r+0x88>
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f7ff ffbf 	bl	8000e38 <sbrk_aligned>
 8000eba:	1c43      	adds	r3, r0, #1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	d158      	bne.n	8000f72 <_malloc_r+0xf6>
 8000ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ec4:	4627      	mov	r7, r4
 8000ec6:	2f00      	cmp	r7, #0
 8000ec8:	d143      	bne.n	8000f52 <_malloc_r+0xd6>
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	d04b      	beq.n	8000f66 <_malloc_r+0xea>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	4639      	mov	r1, r7
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	eb04 0903 	add.w	r9, r4, r3
 8000ed8:	f000 fc58 	bl	800178c <_sbrk_r>
 8000edc:	4581      	cmp	r9, r0
 8000ede:	d142      	bne.n	8000f66 <_malloc_r+0xea>
 8000ee0:	6821      	ldr	r1, [r4, #0]
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	1a6d      	subs	r5, r5, r1
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f7ff ffa6 	bl	8000e38 <sbrk_aligned>
 8000eec:	3001      	adds	r0, #1
 8000eee:	d03a      	beq.n	8000f66 <_malloc_r+0xea>
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	442b      	add	r3, r5
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	bb62      	cbnz	r2, 8000f58 <_malloc_r+0xdc>
 8000efe:	f8c8 7000 	str.w	r7, [r8]
 8000f02:	e00f      	b.n	8000f24 <_malloc_r+0xa8>
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	1b52      	subs	r2, r2, r5
 8000f08:	d420      	bmi.n	8000f4c <_malloc_r+0xd0>
 8000f0a:	2a0b      	cmp	r2, #11
 8000f0c:	d917      	bls.n	8000f3e <_malloc_r+0xc2>
 8000f0e:	1961      	adds	r1, r4, r5
 8000f10:	42a3      	cmp	r3, r4
 8000f12:	6025      	str	r5, [r4, #0]
 8000f14:	bf18      	it	ne
 8000f16:	6059      	strne	r1, [r3, #4]
 8000f18:	6863      	ldr	r3, [r4, #4]
 8000f1a:	bf08      	it	eq
 8000f1c:	f8c8 1000 	streq.w	r1, [r8]
 8000f20:	5162      	str	r2, [r4, r5]
 8000f22:	604b      	str	r3, [r1, #4]
 8000f24:	4630      	mov	r0, r6
 8000f26:	f000 f82f 	bl	8000f88 <__malloc_unlock>
 8000f2a:	f104 000b 	add.w	r0, r4, #11
 8000f2e:	1d23      	adds	r3, r4, #4
 8000f30:	f020 0007 	bic.w	r0, r0, #7
 8000f34:	1ac2      	subs	r2, r0, r3
 8000f36:	bf1c      	itt	ne
 8000f38:	1a1b      	subne	r3, r3, r0
 8000f3a:	50a3      	strne	r3, [r4, r2]
 8000f3c:	e7af      	b.n	8000e9e <_malloc_r+0x22>
 8000f3e:	6862      	ldr	r2, [r4, #4]
 8000f40:	42a3      	cmp	r3, r4
 8000f42:	bf0c      	ite	eq
 8000f44:	f8c8 2000 	streq.w	r2, [r8]
 8000f48:	605a      	strne	r2, [r3, #4]
 8000f4a:	e7eb      	b.n	8000f24 <_malloc_r+0xa8>
 8000f4c:	4623      	mov	r3, r4
 8000f4e:	6864      	ldr	r4, [r4, #4]
 8000f50:	e7ae      	b.n	8000eb0 <_malloc_r+0x34>
 8000f52:	463c      	mov	r4, r7
 8000f54:	687f      	ldr	r7, [r7, #4]
 8000f56:	e7b6      	b.n	8000ec6 <_malloc_r+0x4a>
 8000f58:	461a      	mov	r2, r3
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	42a3      	cmp	r3, r4
 8000f5e:	d1fb      	bne.n	8000f58 <_malloc_r+0xdc>
 8000f60:	2300      	movs	r3, #0
 8000f62:	6053      	str	r3, [r2, #4]
 8000f64:	e7de      	b.n	8000f24 <_malloc_r+0xa8>
 8000f66:	230c      	movs	r3, #12
 8000f68:	4630      	mov	r0, r6
 8000f6a:	6033      	str	r3, [r6, #0]
 8000f6c:	f000 f80c 	bl	8000f88 <__malloc_unlock>
 8000f70:	e794      	b.n	8000e9c <_malloc_r+0x20>
 8000f72:	6005      	str	r5, [r0, #0]
 8000f74:	e7d6      	b.n	8000f24 <_malloc_r+0xa8>
 8000f76:	bf00      	nop
 8000f78:	200001c8 	.word	0x200001c8

08000f7c <__malloc_lock>:
 8000f7c:	4801      	ldr	r0, [pc, #4]	@ (8000f84 <__malloc_lock+0x8>)
 8000f7e:	f7ff bf0e 	b.w	8000d9e <__retarget_lock_acquire_recursive>
 8000f82:	bf00      	nop
 8000f84:	200001c0 	.word	0x200001c0

08000f88 <__malloc_unlock>:
 8000f88:	4801      	ldr	r0, [pc, #4]	@ (8000f90 <__malloc_unlock+0x8>)
 8000f8a:	f7ff bf09 	b.w	8000da0 <__retarget_lock_release_recursive>
 8000f8e:	bf00      	nop
 8000f90:	200001c0 	.word	0x200001c0

08000f94 <__sfputc_r>:
 8000f94:	6893      	ldr	r3, [r2, #8]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	b410      	push	{r4}
 8000f9c:	6093      	str	r3, [r2, #8]
 8000f9e:	da07      	bge.n	8000fb0 <__sfputc_r+0x1c>
 8000fa0:	6994      	ldr	r4, [r2, #24]
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	db01      	blt.n	8000faa <__sfputc_r+0x16>
 8000fa6:	290a      	cmp	r1, #10
 8000fa8:	d102      	bne.n	8000fb0 <__sfputc_r+0x1c>
 8000faa:	bc10      	pop	{r4}
 8000fac:	f7ff bde9 	b.w	8000b82 <__swbuf_r>
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	1c58      	adds	r0, r3, #1
 8000fb4:	6010      	str	r0, [r2, #0]
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	7019      	strb	r1, [r3, #0]
 8000fba:	bc10      	pop	{r4}
 8000fbc:	4770      	bx	lr

08000fbe <__sfputs_r>:
 8000fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	460f      	mov	r7, r1
 8000fc4:	4614      	mov	r4, r2
 8000fc6:	18d5      	adds	r5, r2, r3
 8000fc8:	42ac      	cmp	r4, r5
 8000fca:	d101      	bne.n	8000fd0 <__sfputs_r+0x12>
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e007      	b.n	8000fe0 <__sfputs_r+0x22>
 8000fd0:	463a      	mov	r2, r7
 8000fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f7ff ffdc 	bl	8000f94 <__sfputc_r>
 8000fdc:	1c43      	adds	r3, r0, #1
 8000fde:	d1f3      	bne.n	8000fc8 <__sfputs_r+0xa>
 8000fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fe4 <_vfiprintf_r>:
 8000fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe8:	460d      	mov	r5, r1
 8000fea:	b09d      	sub	sp, #116	@ 0x74
 8000fec:	4614      	mov	r4, r2
 8000fee:	4698      	mov	r8, r3
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	b118      	cbz	r0, 8000ffc <_vfiprintf_r+0x18>
 8000ff4:	6a03      	ldr	r3, [r0, #32]
 8000ff6:	b90b      	cbnz	r3, 8000ffc <_vfiprintf_r+0x18>
 8000ff8:	f7ff fcda 	bl	80009b0 <__sinit>
 8000ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ffe:	07d9      	lsls	r1, r3, #31
 8001000:	d405      	bmi.n	800100e <_vfiprintf_r+0x2a>
 8001002:	89ab      	ldrh	r3, [r5, #12]
 8001004:	059a      	lsls	r2, r3, #22
 8001006:	d402      	bmi.n	800100e <_vfiprintf_r+0x2a>
 8001008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800100a:	f7ff fec8 	bl	8000d9e <__retarget_lock_acquire_recursive>
 800100e:	89ab      	ldrh	r3, [r5, #12]
 8001010:	071b      	lsls	r3, r3, #28
 8001012:	d501      	bpl.n	8001018 <_vfiprintf_r+0x34>
 8001014:	692b      	ldr	r3, [r5, #16]
 8001016:	b99b      	cbnz	r3, 8001040 <_vfiprintf_r+0x5c>
 8001018:	4629      	mov	r1, r5
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fdf0 	bl	8000c00 <__swsetup_r>
 8001020:	b170      	cbz	r0, 8001040 <_vfiprintf_r+0x5c>
 8001022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001024:	07dc      	lsls	r4, r3, #31
 8001026:	d504      	bpl.n	8001032 <_vfiprintf_r+0x4e>
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	b01d      	add	sp, #116	@ 0x74
 800102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001032:	89ab      	ldrh	r3, [r5, #12]
 8001034:	0598      	lsls	r0, r3, #22
 8001036:	d4f7      	bmi.n	8001028 <_vfiprintf_r+0x44>
 8001038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800103a:	f7ff feb1 	bl	8000da0 <__retarget_lock_release_recursive>
 800103e:	e7f3      	b.n	8001028 <_vfiprintf_r+0x44>
 8001040:	2300      	movs	r3, #0
 8001042:	f8cd 800c 	str.w	r8, [sp, #12]
 8001046:	f04f 0901 	mov.w	r9, #1
 800104a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8001200 <_vfiprintf_r+0x21c>
 800104e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001050:	2320      	movs	r3, #32
 8001052:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001056:	2330      	movs	r3, #48	@ 0x30
 8001058:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800105c:	4623      	mov	r3, r4
 800105e:	469a      	mov	sl, r3
 8001060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001064:	b10a      	cbz	r2, 800106a <_vfiprintf_r+0x86>
 8001066:	2a25      	cmp	r2, #37	@ 0x25
 8001068:	d1f9      	bne.n	800105e <_vfiprintf_r+0x7a>
 800106a:	ebba 0b04 	subs.w	fp, sl, r4
 800106e:	d00b      	beq.n	8001088 <_vfiprintf_r+0xa4>
 8001070:	465b      	mov	r3, fp
 8001072:	4622      	mov	r2, r4
 8001074:	4629      	mov	r1, r5
 8001076:	4630      	mov	r0, r6
 8001078:	f7ff ffa1 	bl	8000fbe <__sfputs_r>
 800107c:	3001      	adds	r0, #1
 800107e:	f000 80a7 	beq.w	80011d0 <_vfiprintf_r+0x1ec>
 8001082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001084:	445a      	add	r2, fp
 8001086:	9209      	str	r2, [sp, #36]	@ 0x24
 8001088:	f89a 3000 	ldrb.w	r3, [sl]
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 809f 	beq.w	80011d0 <_vfiprintf_r+0x1ec>
 8001092:	2300      	movs	r3, #0
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	f10a 0a01 	add.w	sl, sl, #1
 800109c:	9304      	str	r3, [sp, #16]
 800109e:	9307      	str	r3, [sp, #28]
 80010a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80010a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80010a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010aa:	4654      	mov	r4, sl
 80010ac:	2205      	movs	r2, #5
 80010ae:	4854      	ldr	r0, [pc, #336]	@ (8001200 <_vfiprintf_r+0x21c>)
 80010b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010b4:	f000 fb7a 	bl	80017ac <memchr>
 80010b8:	9a04      	ldr	r2, [sp, #16]
 80010ba:	b9d8      	cbnz	r0, 80010f4 <_vfiprintf_r+0x110>
 80010bc:	06d1      	lsls	r1, r2, #27
 80010be:	bf44      	itt	mi
 80010c0:	2320      	movmi	r3, #32
 80010c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010c6:	0713      	lsls	r3, r2, #28
 80010c8:	bf44      	itt	mi
 80010ca:	232b      	movmi	r3, #43	@ 0x2b
 80010cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010d0:	f89a 3000 	ldrb.w	r3, [sl]
 80010d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80010d6:	d015      	beq.n	8001104 <_vfiprintf_r+0x120>
 80010d8:	9a07      	ldr	r2, [sp, #28]
 80010da:	4654      	mov	r4, sl
 80010dc:	2000      	movs	r0, #0
 80010de:	f04f 0c0a 	mov.w	ip, #10
 80010e2:	4621      	mov	r1, r4
 80010e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010e8:	3b30      	subs	r3, #48	@ 0x30
 80010ea:	2b09      	cmp	r3, #9
 80010ec:	d94b      	bls.n	8001186 <_vfiprintf_r+0x1a2>
 80010ee:	b1b0      	cbz	r0, 800111e <_vfiprintf_r+0x13a>
 80010f0:	9207      	str	r2, [sp, #28]
 80010f2:	e014      	b.n	800111e <_vfiprintf_r+0x13a>
 80010f4:	eba0 0308 	sub.w	r3, r0, r8
 80010f8:	46a2      	mov	sl, r4
 80010fa:	fa09 f303 	lsl.w	r3, r9, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	9304      	str	r3, [sp, #16]
 8001102:	e7d2      	b.n	80010aa <_vfiprintf_r+0xc6>
 8001104:	9b03      	ldr	r3, [sp, #12]
 8001106:	1d19      	adds	r1, r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	9103      	str	r1, [sp, #12]
 800110e:	bfbb      	ittet	lt
 8001110:	425b      	neglt	r3, r3
 8001112:	f042 0202 	orrlt.w	r2, r2, #2
 8001116:	9307      	strge	r3, [sp, #28]
 8001118:	9307      	strlt	r3, [sp, #28]
 800111a:	bfb8      	it	lt
 800111c:	9204      	strlt	r2, [sp, #16]
 800111e:	7823      	ldrb	r3, [r4, #0]
 8001120:	2b2e      	cmp	r3, #46	@ 0x2e
 8001122:	d10a      	bne.n	800113a <_vfiprintf_r+0x156>
 8001124:	7863      	ldrb	r3, [r4, #1]
 8001126:	2b2a      	cmp	r3, #42	@ 0x2a
 8001128:	d132      	bne.n	8001190 <_vfiprintf_r+0x1ac>
 800112a:	9b03      	ldr	r3, [sp, #12]
 800112c:	3402      	adds	r4, #2
 800112e:	1d1a      	adds	r2, r3, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001136:	9203      	str	r2, [sp, #12]
 8001138:	9305      	str	r3, [sp, #20]
 800113a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001204 <_vfiprintf_r+0x220>
 800113e:	2203      	movs	r2, #3
 8001140:	7821      	ldrb	r1, [r4, #0]
 8001142:	4650      	mov	r0, sl
 8001144:	f000 fb32 	bl	80017ac <memchr>
 8001148:	b138      	cbz	r0, 800115a <_vfiprintf_r+0x176>
 800114a:	eba0 000a 	sub.w	r0, r0, sl
 800114e:	2240      	movs	r2, #64	@ 0x40
 8001150:	9b04      	ldr	r3, [sp, #16]
 8001152:	3401      	adds	r4, #1
 8001154:	4082      	lsls	r2, r0
 8001156:	4313      	orrs	r3, r2
 8001158:	9304      	str	r3, [sp, #16]
 800115a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800115e:	2206      	movs	r2, #6
 8001160:	4829      	ldr	r0, [pc, #164]	@ (8001208 <_vfiprintf_r+0x224>)
 8001162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001166:	f000 fb21 	bl	80017ac <memchr>
 800116a:	2800      	cmp	r0, #0
 800116c:	d03f      	beq.n	80011ee <_vfiprintf_r+0x20a>
 800116e:	4b27      	ldr	r3, [pc, #156]	@ (800120c <_vfiprintf_r+0x228>)
 8001170:	bb1b      	cbnz	r3, 80011ba <_vfiprintf_r+0x1d6>
 8001172:	9b03      	ldr	r3, [sp, #12]
 8001174:	3307      	adds	r3, #7
 8001176:	f023 0307 	bic.w	r3, r3, #7
 800117a:	3308      	adds	r3, #8
 800117c:	9303      	str	r3, [sp, #12]
 800117e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001180:	443b      	add	r3, r7
 8001182:	9309      	str	r3, [sp, #36]	@ 0x24
 8001184:	e76a      	b.n	800105c <_vfiprintf_r+0x78>
 8001186:	fb0c 3202 	mla	r2, ip, r2, r3
 800118a:	460c      	mov	r4, r1
 800118c:	2001      	movs	r0, #1
 800118e:	e7a8      	b.n	80010e2 <_vfiprintf_r+0xfe>
 8001190:	2300      	movs	r3, #0
 8001192:	3401      	adds	r4, #1
 8001194:	f04f 0c0a 	mov.w	ip, #10
 8001198:	4619      	mov	r1, r3
 800119a:	9305      	str	r3, [sp, #20]
 800119c:	4620      	mov	r0, r4
 800119e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011a2:	3a30      	subs	r2, #48	@ 0x30
 80011a4:	2a09      	cmp	r2, #9
 80011a6:	d903      	bls.n	80011b0 <_vfiprintf_r+0x1cc>
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0c6      	beq.n	800113a <_vfiprintf_r+0x156>
 80011ac:	9105      	str	r1, [sp, #20]
 80011ae:	e7c4      	b.n	800113a <_vfiprintf_r+0x156>
 80011b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80011b4:	4604      	mov	r4, r0
 80011b6:	2301      	movs	r3, #1
 80011b8:	e7f0      	b.n	800119c <_vfiprintf_r+0x1b8>
 80011ba:	ab03      	add	r3, sp, #12
 80011bc:	462a      	mov	r2, r5
 80011be:	a904      	add	r1, sp, #16
 80011c0:	4630      	mov	r0, r6
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <_vfiprintf_r+0x22c>)
 80011c6:	f3af 8000 	nop.w
 80011ca:	4607      	mov	r7, r0
 80011cc:	1c78      	adds	r0, r7, #1
 80011ce:	d1d6      	bne.n	800117e <_vfiprintf_r+0x19a>
 80011d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80011d2:	07d9      	lsls	r1, r3, #31
 80011d4:	d405      	bmi.n	80011e2 <_vfiprintf_r+0x1fe>
 80011d6:	89ab      	ldrh	r3, [r5, #12]
 80011d8:	059a      	lsls	r2, r3, #22
 80011da:	d402      	bmi.n	80011e2 <_vfiprintf_r+0x1fe>
 80011dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011de:	f7ff fddf 	bl	8000da0 <__retarget_lock_release_recursive>
 80011e2:	89ab      	ldrh	r3, [r5, #12]
 80011e4:	065b      	lsls	r3, r3, #25
 80011e6:	f53f af1f 	bmi.w	8001028 <_vfiprintf_r+0x44>
 80011ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80011ec:	e71e      	b.n	800102c <_vfiprintf_r+0x48>
 80011ee:	ab03      	add	r3, sp, #12
 80011f0:	462a      	mov	r2, r5
 80011f2:	a904      	add	r1, sp, #16
 80011f4:	4630      	mov	r0, r6
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <_vfiprintf_r+0x22c>)
 80011fa:	f000 f87d 	bl	80012f8 <_printf_i>
 80011fe:	e7e4      	b.n	80011ca <_vfiprintf_r+0x1e6>
 8001200:	08001b82 	.word	0x08001b82
 8001204:	08001b88 	.word	0x08001b88
 8001208:	08001b8c 	.word	0x08001b8c
 800120c:	00000000 	.word	0x00000000
 8001210:	08000fbf 	.word	0x08000fbf

08001214 <_printf_common>:
 8001214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001218:	4616      	mov	r6, r2
 800121a:	4698      	mov	r8, r3
 800121c:	688a      	ldr	r2, [r1, #8]
 800121e:	4607      	mov	r7, r0
 8001220:	690b      	ldr	r3, [r1, #16]
 8001222:	460c      	mov	r4, r1
 8001224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001228:	4293      	cmp	r3, r2
 800122a:	bfb8      	it	lt
 800122c:	4613      	movlt	r3, r2
 800122e:	6033      	str	r3, [r6, #0]
 8001230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001234:	b10a      	cbz	r2, 800123a <_printf_common+0x26>
 8001236:	3301      	adds	r3, #1
 8001238:	6033      	str	r3, [r6, #0]
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	0699      	lsls	r1, r3, #26
 800123e:	bf42      	ittt	mi
 8001240:	6833      	ldrmi	r3, [r6, #0]
 8001242:	3302      	addmi	r3, #2
 8001244:	6033      	strmi	r3, [r6, #0]
 8001246:	6825      	ldr	r5, [r4, #0]
 8001248:	f015 0506 	ands.w	r5, r5, #6
 800124c:	d106      	bne.n	800125c <_printf_common+0x48>
 800124e:	f104 0a19 	add.w	sl, r4, #25
 8001252:	68e3      	ldr	r3, [r4, #12]
 8001254:	6832      	ldr	r2, [r6, #0]
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	42ab      	cmp	r3, r5
 800125a:	dc2b      	bgt.n	80012b4 <_printf_common+0xa0>
 800125c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001260:	6822      	ldr	r2, [r4, #0]
 8001262:	3b00      	subs	r3, #0
 8001264:	bf18      	it	ne
 8001266:	2301      	movne	r3, #1
 8001268:	0692      	lsls	r2, r2, #26
 800126a:	d430      	bmi.n	80012ce <_printf_common+0xba>
 800126c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001270:	4641      	mov	r1, r8
 8001272:	4638      	mov	r0, r7
 8001274:	47c8      	blx	r9
 8001276:	3001      	adds	r0, #1
 8001278:	d023      	beq.n	80012c2 <_printf_common+0xae>
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	341a      	adds	r4, #26
 800127e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8001282:	f003 0306 	and.w	r3, r3, #6
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf0a      	itet	eq
 800128a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800128e:	2500      	movne	r5, #0
 8001290:	6833      	ldreq	r3, [r6, #0]
 8001292:	f04f 0600 	mov.w	r6, #0
 8001296:	bf08      	it	eq
 8001298:	1aed      	subeq	r5, r5, r3
 800129a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800129e:	bf08      	it	eq
 80012a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bfc4      	itt	gt
 80012a8:	1a9b      	subgt	r3, r3, r2
 80012aa:	18ed      	addgt	r5, r5, r3
 80012ac:	42b5      	cmp	r5, r6
 80012ae:	d11a      	bne.n	80012e6 <_printf_common+0xd2>
 80012b0:	2000      	movs	r0, #0
 80012b2:	e008      	b.n	80012c6 <_printf_common+0xb2>
 80012b4:	2301      	movs	r3, #1
 80012b6:	4652      	mov	r2, sl
 80012b8:	4641      	mov	r1, r8
 80012ba:	4638      	mov	r0, r7
 80012bc:	47c8      	blx	r9
 80012be:	3001      	adds	r0, #1
 80012c0:	d103      	bne.n	80012ca <_printf_common+0xb6>
 80012c2:	f04f 30ff 	mov.w	r0, #4294967295
 80012c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ca:	3501      	adds	r5, #1
 80012cc:	e7c1      	b.n	8001252 <_printf_common+0x3e>
 80012ce:	18e1      	adds	r1, r4, r3
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	2030      	movs	r0, #48	@ 0x30
 80012d4:	3302      	adds	r3, #2
 80012d6:	4422      	add	r2, r4
 80012d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80012dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80012e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80012e4:	e7c2      	b.n	800126c <_printf_common+0x58>
 80012e6:	2301      	movs	r3, #1
 80012e8:	4622      	mov	r2, r4
 80012ea:	4641      	mov	r1, r8
 80012ec:	4638      	mov	r0, r7
 80012ee:	47c8      	blx	r9
 80012f0:	3001      	adds	r0, #1
 80012f2:	d0e6      	beq.n	80012c2 <_printf_common+0xae>
 80012f4:	3601      	adds	r6, #1
 80012f6:	e7d9      	b.n	80012ac <_printf_common+0x98>

080012f8 <_printf_i>:
 80012f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012fc:	7e0f      	ldrb	r7, [r1, #24]
 80012fe:	4691      	mov	r9, r2
 8001300:	4680      	mov	r8, r0
 8001302:	460c      	mov	r4, r1
 8001304:	2f78      	cmp	r7, #120	@ 0x78
 8001306:	469a      	mov	sl, r3
 8001308:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800130a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800130e:	d807      	bhi.n	8001320 <_printf_i+0x28>
 8001310:	2f62      	cmp	r7, #98	@ 0x62
 8001312:	d80a      	bhi.n	800132a <_printf_i+0x32>
 8001314:	2f00      	cmp	r7, #0
 8001316:	f000 80d1 	beq.w	80014bc <_printf_i+0x1c4>
 800131a:	2f58      	cmp	r7, #88	@ 0x58
 800131c:	f000 80b8 	beq.w	8001490 <_printf_i+0x198>
 8001320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001328:	e03a      	b.n	80013a0 <_printf_i+0xa8>
 800132a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800132e:	2b15      	cmp	r3, #21
 8001330:	d8f6      	bhi.n	8001320 <_printf_i+0x28>
 8001332:	a101      	add	r1, pc, #4	@ (adr r1, 8001338 <_printf_i+0x40>)
 8001334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001338:	08001391 	.word	0x08001391
 800133c:	080013a5 	.word	0x080013a5
 8001340:	08001321 	.word	0x08001321
 8001344:	08001321 	.word	0x08001321
 8001348:	08001321 	.word	0x08001321
 800134c:	08001321 	.word	0x08001321
 8001350:	080013a5 	.word	0x080013a5
 8001354:	08001321 	.word	0x08001321
 8001358:	08001321 	.word	0x08001321
 800135c:	08001321 	.word	0x08001321
 8001360:	08001321 	.word	0x08001321
 8001364:	080014a3 	.word	0x080014a3
 8001368:	080013cf 	.word	0x080013cf
 800136c:	0800145d 	.word	0x0800145d
 8001370:	08001321 	.word	0x08001321
 8001374:	08001321 	.word	0x08001321
 8001378:	080014c5 	.word	0x080014c5
 800137c:	08001321 	.word	0x08001321
 8001380:	080013cf 	.word	0x080013cf
 8001384:	08001321 	.word	0x08001321
 8001388:	08001321 	.word	0x08001321
 800138c:	08001465 	.word	0x08001465
 8001390:	6833      	ldr	r3, [r6, #0]
 8001392:	1d1a      	adds	r2, r3, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6032      	str	r2, [r6, #0]
 8001398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800139c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013a0:	2301      	movs	r3, #1
 80013a2:	e09c      	b.n	80014de <_printf_i+0x1e6>
 80013a4:	6833      	ldr	r3, [r6, #0]
 80013a6:	6820      	ldr	r0, [r4, #0]
 80013a8:	1d19      	adds	r1, r3, #4
 80013aa:	6031      	str	r1, [r6, #0]
 80013ac:	0606      	lsls	r6, r0, #24
 80013ae:	d501      	bpl.n	80013b4 <_printf_i+0xbc>
 80013b0:	681d      	ldr	r5, [r3, #0]
 80013b2:	e003      	b.n	80013bc <_printf_i+0xc4>
 80013b4:	0645      	lsls	r5, r0, #25
 80013b6:	d5fb      	bpl.n	80013b0 <_printf_i+0xb8>
 80013b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013bc:	2d00      	cmp	r5, #0
 80013be:	da03      	bge.n	80013c8 <_printf_i+0xd0>
 80013c0:	232d      	movs	r3, #45	@ 0x2d
 80013c2:	426d      	negs	r5, r5
 80013c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013c8:	4858      	ldr	r0, [pc, #352]	@ (800152c <_printf_i+0x234>)
 80013ca:	230a      	movs	r3, #10
 80013cc:	e011      	b.n	80013f2 <_printf_i+0xfa>
 80013ce:	6821      	ldr	r1, [r4, #0]
 80013d0:	6833      	ldr	r3, [r6, #0]
 80013d2:	0608      	lsls	r0, r1, #24
 80013d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80013d8:	d402      	bmi.n	80013e0 <_printf_i+0xe8>
 80013da:	0649      	lsls	r1, r1, #25
 80013dc:	bf48      	it	mi
 80013de:	b2ad      	uxthmi	r5, r5
 80013e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80013e2:	6033      	str	r3, [r6, #0]
 80013e4:	4851      	ldr	r0, [pc, #324]	@ (800152c <_printf_i+0x234>)
 80013e6:	bf14      	ite	ne
 80013e8:	230a      	movne	r3, #10
 80013ea:	2308      	moveq	r3, #8
 80013ec:	2100      	movs	r1, #0
 80013ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80013f2:	6866      	ldr	r6, [r4, #4]
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	60a6      	str	r6, [r4, #8]
 80013f8:	db05      	blt.n	8001406 <_printf_i+0x10e>
 80013fa:	6821      	ldr	r1, [r4, #0]
 80013fc:	432e      	orrs	r6, r5
 80013fe:	f021 0104 	bic.w	r1, r1, #4
 8001402:	6021      	str	r1, [r4, #0]
 8001404:	d04b      	beq.n	800149e <_printf_i+0x1a6>
 8001406:	4616      	mov	r6, r2
 8001408:	fbb5 f1f3 	udiv	r1, r5, r3
 800140c:	fb03 5711 	mls	r7, r3, r1, r5
 8001410:	5dc7      	ldrb	r7, [r0, r7]
 8001412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001416:	462f      	mov	r7, r5
 8001418:	460d      	mov	r5, r1
 800141a:	42bb      	cmp	r3, r7
 800141c:	d9f4      	bls.n	8001408 <_printf_i+0x110>
 800141e:	2b08      	cmp	r3, #8
 8001420:	d10b      	bne.n	800143a <_printf_i+0x142>
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	07df      	lsls	r7, r3, #31
 8001426:	d508      	bpl.n	800143a <_printf_i+0x142>
 8001428:	6923      	ldr	r3, [r4, #16]
 800142a:	6861      	ldr	r1, [r4, #4]
 800142c:	4299      	cmp	r1, r3
 800142e:	bfde      	ittt	le
 8001430:	2330      	movle	r3, #48	@ 0x30
 8001432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800143a:	1b92      	subs	r2, r2, r6
 800143c:	6122      	str	r2, [r4, #16]
 800143e:	464b      	mov	r3, r9
 8001440:	aa03      	add	r2, sp, #12
 8001442:	4621      	mov	r1, r4
 8001444:	4640      	mov	r0, r8
 8001446:	f8cd a000 	str.w	sl, [sp]
 800144a:	f7ff fee3 	bl	8001214 <_printf_common>
 800144e:	3001      	adds	r0, #1
 8001450:	d14a      	bne.n	80014e8 <_printf_i+0x1f0>
 8001452:	f04f 30ff 	mov.w	r0, #4294967295
 8001456:	b004      	add	sp, #16
 8001458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	6023      	str	r3, [r4, #0]
 8001464:	2778      	movs	r7, #120	@ 0x78
 8001466:	4832      	ldr	r0, [pc, #200]	@ (8001530 <_printf_i+0x238>)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800146e:	061f      	lsls	r7, r3, #24
 8001470:	6831      	ldr	r1, [r6, #0]
 8001472:	f851 5b04 	ldr.w	r5, [r1], #4
 8001476:	d402      	bmi.n	800147e <_printf_i+0x186>
 8001478:	065f      	lsls	r7, r3, #25
 800147a:	bf48      	it	mi
 800147c:	b2ad      	uxthmi	r5, r5
 800147e:	6031      	str	r1, [r6, #0]
 8001480:	07d9      	lsls	r1, r3, #31
 8001482:	bf44      	itt	mi
 8001484:	f043 0320 	orrmi.w	r3, r3, #32
 8001488:	6023      	strmi	r3, [r4, #0]
 800148a:	b11d      	cbz	r5, 8001494 <_printf_i+0x19c>
 800148c:	2310      	movs	r3, #16
 800148e:	e7ad      	b.n	80013ec <_printf_i+0xf4>
 8001490:	4826      	ldr	r0, [pc, #152]	@ (800152c <_printf_i+0x234>)
 8001492:	e7e9      	b.n	8001468 <_printf_i+0x170>
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	f023 0320 	bic.w	r3, r3, #32
 800149a:	6023      	str	r3, [r4, #0]
 800149c:	e7f6      	b.n	800148c <_printf_i+0x194>
 800149e:	4616      	mov	r6, r2
 80014a0:	e7bd      	b.n	800141e <_printf_i+0x126>
 80014a2:	6833      	ldr	r3, [r6, #0]
 80014a4:	6825      	ldr	r5, [r4, #0]
 80014a6:	1d18      	adds	r0, r3, #4
 80014a8:	6961      	ldr	r1, [r4, #20]
 80014aa:	6030      	str	r0, [r6, #0]
 80014ac:	062e      	lsls	r6, r5, #24
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	d501      	bpl.n	80014b6 <_printf_i+0x1be>
 80014b2:	6019      	str	r1, [r3, #0]
 80014b4:	e002      	b.n	80014bc <_printf_i+0x1c4>
 80014b6:	0668      	lsls	r0, r5, #25
 80014b8:	d5fb      	bpl.n	80014b2 <_printf_i+0x1ba>
 80014ba:	8019      	strh	r1, [r3, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	4616      	mov	r6, r2
 80014c0:	6123      	str	r3, [r4, #16]
 80014c2:	e7bc      	b.n	800143e <_printf_i+0x146>
 80014c4:	6833      	ldr	r3, [r6, #0]
 80014c6:	2100      	movs	r1, #0
 80014c8:	1d1a      	adds	r2, r3, #4
 80014ca:	6032      	str	r2, [r6, #0]
 80014cc:	681e      	ldr	r6, [r3, #0]
 80014ce:	6862      	ldr	r2, [r4, #4]
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 f96b 	bl	80017ac <memchr>
 80014d6:	b108      	cbz	r0, 80014dc <_printf_i+0x1e4>
 80014d8:	1b80      	subs	r0, r0, r6
 80014da:	6060      	str	r0, [r4, #4]
 80014dc:	6863      	ldr	r3, [r4, #4]
 80014de:	6123      	str	r3, [r4, #16]
 80014e0:	2300      	movs	r3, #0
 80014e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014e6:	e7aa      	b.n	800143e <_printf_i+0x146>
 80014e8:	6923      	ldr	r3, [r4, #16]
 80014ea:	4632      	mov	r2, r6
 80014ec:	4649      	mov	r1, r9
 80014ee:	4640      	mov	r0, r8
 80014f0:	47d0      	blx	sl
 80014f2:	3001      	adds	r0, #1
 80014f4:	d0ad      	beq.n	8001452 <_printf_i+0x15a>
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	079b      	lsls	r3, r3, #30
 80014fa:	d413      	bmi.n	8001524 <_printf_i+0x22c>
 80014fc:	68e0      	ldr	r0, [r4, #12]
 80014fe:	9b03      	ldr	r3, [sp, #12]
 8001500:	4298      	cmp	r0, r3
 8001502:	bfb8      	it	lt
 8001504:	4618      	movlt	r0, r3
 8001506:	e7a6      	b.n	8001456 <_printf_i+0x15e>
 8001508:	2301      	movs	r3, #1
 800150a:	4632      	mov	r2, r6
 800150c:	4649      	mov	r1, r9
 800150e:	4640      	mov	r0, r8
 8001510:	47d0      	blx	sl
 8001512:	3001      	adds	r0, #1
 8001514:	d09d      	beq.n	8001452 <_printf_i+0x15a>
 8001516:	3501      	adds	r5, #1
 8001518:	68e3      	ldr	r3, [r4, #12]
 800151a:	9903      	ldr	r1, [sp, #12]
 800151c:	1a5b      	subs	r3, r3, r1
 800151e:	42ab      	cmp	r3, r5
 8001520:	dcf2      	bgt.n	8001508 <_printf_i+0x210>
 8001522:	e7eb      	b.n	80014fc <_printf_i+0x204>
 8001524:	2500      	movs	r5, #0
 8001526:	f104 0619 	add.w	r6, r4, #25
 800152a:	e7f5      	b.n	8001518 <_printf_i+0x220>
 800152c:	08001b93 	.word	0x08001b93
 8001530:	08001ba4 	.word	0x08001ba4

08001534 <__sflush_r>:
 8001534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	0716      	lsls	r6, r2, #28
 800153c:	4605      	mov	r5, r0
 800153e:	460c      	mov	r4, r1
 8001540:	d454      	bmi.n	80015ec <__sflush_r+0xb8>
 8001542:	684b      	ldr	r3, [r1, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dc02      	bgt.n	800154e <__sflush_r+0x1a>
 8001548:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	dd48      	ble.n	80015e0 <__sflush_r+0xac>
 800154e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001550:	2e00      	cmp	r6, #0
 8001552:	d045      	beq.n	80015e0 <__sflush_r+0xac>
 8001554:	2300      	movs	r3, #0
 8001556:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800155a:	682f      	ldr	r7, [r5, #0]
 800155c:	6a21      	ldr	r1, [r4, #32]
 800155e:	602b      	str	r3, [r5, #0]
 8001560:	d030      	beq.n	80015c4 <__sflush_r+0x90>
 8001562:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001564:	89a3      	ldrh	r3, [r4, #12]
 8001566:	0759      	lsls	r1, r3, #29
 8001568:	d505      	bpl.n	8001576 <__sflush_r+0x42>
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	1ad2      	subs	r2, r2, r3
 800156e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001570:	b10b      	cbz	r3, 8001576 <__sflush_r+0x42>
 8001572:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001574:	1ad2      	subs	r2, r2, r3
 8001576:	2300      	movs	r3, #0
 8001578:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800157a:	6a21      	ldr	r1, [r4, #32]
 800157c:	4628      	mov	r0, r5
 800157e:	47b0      	blx	r6
 8001580:	1c43      	adds	r3, r0, #1
 8001582:	89a3      	ldrh	r3, [r4, #12]
 8001584:	d106      	bne.n	8001594 <__sflush_r+0x60>
 8001586:	6829      	ldr	r1, [r5, #0]
 8001588:	291d      	cmp	r1, #29
 800158a:	d82b      	bhi.n	80015e4 <__sflush_r+0xb0>
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <__sflush_r+0xfc>)
 800158e:	40ca      	lsrs	r2, r1
 8001590:	07d6      	lsls	r6, r2, #31
 8001592:	d527      	bpl.n	80015e4 <__sflush_r+0xb0>
 8001594:	2200      	movs	r2, #0
 8001596:	04d9      	lsls	r1, r3, #19
 8001598:	6062      	str	r2, [r4, #4]
 800159a:	6922      	ldr	r2, [r4, #16]
 800159c:	6022      	str	r2, [r4, #0]
 800159e:	d504      	bpl.n	80015aa <__sflush_r+0x76>
 80015a0:	1c42      	adds	r2, r0, #1
 80015a2:	d101      	bne.n	80015a8 <__sflush_r+0x74>
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	b903      	cbnz	r3, 80015aa <__sflush_r+0x76>
 80015a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80015aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015ac:	602f      	str	r7, [r5, #0]
 80015ae:	b1b9      	cbz	r1, 80015e0 <__sflush_r+0xac>
 80015b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015b4:	4299      	cmp	r1, r3
 80015b6:	d002      	beq.n	80015be <__sflush_r+0x8a>
 80015b8:	4628      	mov	r0, r5
 80015ba:	f7ff fbf3 	bl	8000da4 <_free_r>
 80015be:	2300      	movs	r3, #0
 80015c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80015c2:	e00d      	b.n	80015e0 <__sflush_r+0xac>
 80015c4:	2301      	movs	r3, #1
 80015c6:	4628      	mov	r0, r5
 80015c8:	47b0      	blx	r6
 80015ca:	4602      	mov	r2, r0
 80015cc:	1c50      	adds	r0, r2, #1
 80015ce:	d1c9      	bne.n	8001564 <__sflush_r+0x30>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0c6      	beq.n	8001564 <__sflush_r+0x30>
 80015d6:	2b1d      	cmp	r3, #29
 80015d8:	d001      	beq.n	80015de <__sflush_r+0xaa>
 80015da:	2b16      	cmp	r3, #22
 80015dc:	d11c      	bne.n	8001618 <__sflush_r+0xe4>
 80015de:	602f      	str	r7, [r5, #0]
 80015e0:	2000      	movs	r0, #0
 80015e2:	e020      	b.n	8001626 <__sflush_r+0xf2>
 80015e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	e019      	b.n	8001620 <__sflush_r+0xec>
 80015ec:	690f      	ldr	r7, [r1, #16]
 80015ee:	2f00      	cmp	r7, #0
 80015f0:	d0f6      	beq.n	80015e0 <__sflush_r+0xac>
 80015f2:	0793      	lsls	r3, r2, #30
 80015f4:	680e      	ldr	r6, [r1, #0]
 80015f6:	600f      	str	r7, [r1, #0]
 80015f8:	bf0c      	ite	eq
 80015fa:	694b      	ldreq	r3, [r1, #20]
 80015fc:	2300      	movne	r3, #0
 80015fe:	1bf6      	subs	r6, r6, r7
 8001600:	608b      	str	r3, [r1, #8]
 8001602:	2e00      	cmp	r6, #0
 8001604:	ddec      	ble.n	80015e0 <__sflush_r+0xac>
 8001606:	4633      	mov	r3, r6
 8001608:	463a      	mov	r2, r7
 800160a:	6a21      	ldr	r1, [r4, #32]
 800160c:	4628      	mov	r0, r5
 800160e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001612:	47e0      	blx	ip
 8001614:	2800      	cmp	r0, #0
 8001616:	dc07      	bgt.n	8001628 <__sflush_r+0xf4>
 8001618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800161c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	81a3      	strh	r3, [r4, #12]
 8001626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001628:	4407      	add	r7, r0
 800162a:	1a36      	subs	r6, r6, r0
 800162c:	e7e9      	b.n	8001602 <__sflush_r+0xce>
 800162e:	bf00      	nop
 8001630:	20400001 	.word	0x20400001

08001634 <_fflush_r>:
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	690b      	ldr	r3, [r1, #16]
 8001638:	4605      	mov	r5, r0
 800163a:	460c      	mov	r4, r1
 800163c:	b913      	cbnz	r3, 8001644 <_fflush_r+0x10>
 800163e:	2500      	movs	r5, #0
 8001640:	4628      	mov	r0, r5
 8001642:	bd38      	pop	{r3, r4, r5, pc}
 8001644:	b118      	cbz	r0, 800164e <_fflush_r+0x1a>
 8001646:	6a03      	ldr	r3, [r0, #32]
 8001648:	b90b      	cbnz	r3, 800164e <_fflush_r+0x1a>
 800164a:	f7ff f9b1 	bl	80009b0 <__sinit>
 800164e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f3      	beq.n	800163e <_fflush_r+0xa>
 8001656:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001658:	07d0      	lsls	r0, r2, #31
 800165a:	d404      	bmi.n	8001666 <_fflush_r+0x32>
 800165c:	0599      	lsls	r1, r3, #22
 800165e:	d402      	bmi.n	8001666 <_fflush_r+0x32>
 8001660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001662:	f7ff fb9c 	bl	8000d9e <__retarget_lock_acquire_recursive>
 8001666:	4628      	mov	r0, r5
 8001668:	4621      	mov	r1, r4
 800166a:	f7ff ff63 	bl	8001534 <__sflush_r>
 800166e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001670:	4605      	mov	r5, r0
 8001672:	07da      	lsls	r2, r3, #31
 8001674:	d4e4      	bmi.n	8001640 <_fflush_r+0xc>
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	059b      	lsls	r3, r3, #22
 800167a:	d4e1      	bmi.n	8001640 <_fflush_r+0xc>
 800167c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800167e:	f7ff fb8f 	bl	8000da0 <__retarget_lock_release_recursive>
 8001682:	e7dd      	b.n	8001640 <_fflush_r+0xc>

08001684 <__swhatbuf_r>:
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460c      	mov	r4, r1
 8001688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800168c:	b096      	sub	sp, #88	@ 0x58
 800168e:	4615      	mov	r5, r2
 8001690:	2900      	cmp	r1, #0
 8001692:	461e      	mov	r6, r3
 8001694:	da0c      	bge.n	80016b0 <__swhatbuf_r+0x2c>
 8001696:	89a3      	ldrh	r3, [r4, #12]
 8001698:	2100      	movs	r1, #0
 800169a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800169e:	bf14      	ite	ne
 80016a0:	2340      	movne	r3, #64	@ 0x40
 80016a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80016a6:	2000      	movs	r0, #0
 80016a8:	6031      	str	r1, [r6, #0]
 80016aa:	602b      	str	r3, [r5, #0]
 80016ac:	b016      	add	sp, #88	@ 0x58
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	466a      	mov	r2, sp
 80016b2:	f000 f849 	bl	8001748 <_fstat_r>
 80016b6:	2800      	cmp	r0, #0
 80016b8:	dbed      	blt.n	8001696 <__swhatbuf_r+0x12>
 80016ba:	9901      	ldr	r1, [sp, #4]
 80016bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80016c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80016c4:	4259      	negs	r1, r3
 80016c6:	4159      	adcs	r1, r3
 80016c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016cc:	e7eb      	b.n	80016a6 <__swhatbuf_r+0x22>

080016ce <__smakebuf_r>:
 80016ce:	898b      	ldrh	r3, [r1, #12]
 80016d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016d2:	079d      	lsls	r5, r3, #30
 80016d4:	4606      	mov	r6, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	d507      	bpl.n	80016ea <__smakebuf_r+0x1c>
 80016da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80016de:	6023      	str	r3, [r4, #0]
 80016e0:	6123      	str	r3, [r4, #16]
 80016e2:	2301      	movs	r3, #1
 80016e4:	6163      	str	r3, [r4, #20]
 80016e6:	b003      	add	sp, #12
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ea:	ab01      	add	r3, sp, #4
 80016ec:	466a      	mov	r2, sp
 80016ee:	f7ff ffc9 	bl	8001684 <__swhatbuf_r>
 80016f2:	9f00      	ldr	r7, [sp, #0]
 80016f4:	4605      	mov	r5, r0
 80016f6:	4630      	mov	r0, r6
 80016f8:	4639      	mov	r1, r7
 80016fa:	f7ff fbbf 	bl	8000e7c <_malloc_r>
 80016fe:	b948      	cbnz	r0, 8001714 <__smakebuf_r+0x46>
 8001700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001704:	059a      	lsls	r2, r3, #22
 8001706:	d4ee      	bmi.n	80016e6 <__smakebuf_r+0x18>
 8001708:	f023 0303 	bic.w	r3, r3, #3
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	81a3      	strh	r3, [r4, #12]
 8001712:	e7e2      	b.n	80016da <__smakebuf_r+0xc>
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	6020      	str	r0, [r4, #0]
 8001718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171c:	81a3      	strh	r3, [r4, #12]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001724:	b15b      	cbz	r3, 800173e <__smakebuf_r+0x70>
 8001726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800172a:	4630      	mov	r0, r6
 800172c:	f000 f81e 	bl	800176c <_isatty_r>
 8001730:	b128      	cbz	r0, 800173e <__smakebuf_r+0x70>
 8001732:	89a3      	ldrh	r3, [r4, #12]
 8001734:	f023 0303 	bic.w	r3, r3, #3
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	81a3      	strh	r3, [r4, #12]
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	431d      	orrs	r5, r3
 8001742:	81a5      	strh	r5, [r4, #12]
 8001744:	e7cf      	b.n	80016e6 <__smakebuf_r+0x18>
	...

08001748 <_fstat_r>:
 8001748:	b538      	push	{r3, r4, r5, lr}
 800174a:	2300      	movs	r3, #0
 800174c:	4d06      	ldr	r5, [pc, #24]	@ (8001768 <_fstat_r+0x20>)
 800174e:	4604      	mov	r4, r0
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	602b      	str	r3, [r5, #0]
 8001756:	f7ff f819 	bl	800078c <_fstat>
 800175a:	1c43      	adds	r3, r0, #1
 800175c:	d102      	bne.n	8001764 <_fstat_r+0x1c>
 800175e:	682b      	ldr	r3, [r5, #0]
 8001760:	b103      	cbz	r3, 8001764 <_fstat_r+0x1c>
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	bd38      	pop	{r3, r4, r5, pc}
 8001766:	bf00      	nop
 8001768:	200001bc 	.word	0x200001bc

0800176c <_isatty_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	2300      	movs	r3, #0
 8001770:	4d05      	ldr	r5, [pc, #20]	@ (8001788 <_isatty_r+0x1c>)
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	602b      	str	r3, [r5, #0]
 8001778:	f7ff f817 	bl	80007aa <_isatty>
 800177c:	1c43      	adds	r3, r0, #1
 800177e:	d102      	bne.n	8001786 <_isatty_r+0x1a>
 8001780:	682b      	ldr	r3, [r5, #0]
 8001782:	b103      	cbz	r3, 8001786 <_isatty_r+0x1a>
 8001784:	6023      	str	r3, [r4, #0]
 8001786:	bd38      	pop	{r3, r4, r5, pc}
 8001788:	200001bc 	.word	0x200001bc

0800178c <_sbrk_r>:
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	2300      	movs	r3, #0
 8001790:	4d05      	ldr	r5, [pc, #20]	@ (80017a8 <_sbrk_r+0x1c>)
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	f7ff f81e 	bl	80007d8 <_sbrk>
 800179c:	1c43      	adds	r3, r0, #1
 800179e:	d102      	bne.n	80017a6 <_sbrk_r+0x1a>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	b103      	cbz	r3, 80017a6 <_sbrk_r+0x1a>
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	200001bc 	.word	0x200001bc

080017ac <memchr>:
 80017ac:	b2c9      	uxtb	r1, r1
 80017ae:	4603      	mov	r3, r0
 80017b0:	4402      	add	r2, r0
 80017b2:	b510      	push	{r4, lr}
 80017b4:	4293      	cmp	r3, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	d101      	bne.n	80017be <memchr+0x12>
 80017ba:	2000      	movs	r0, #0
 80017bc:	e003      	b.n	80017c6 <memchr+0x1a>
 80017be:	7804      	ldrb	r4, [r0, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	428c      	cmp	r4, r1
 80017c4:	d1f6      	bne.n	80017b4 <memchr+0x8>
 80017c6:	bd10      	pop	{r4, pc}

080017c8 <_init>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr

080017d4 <_fini>:
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d6:	bf00      	nop
 80017d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017da:	bc08      	pop	{r3}
 80017dc:	469e      	mov	lr, r3
 80017de:	4770      	bx	lr
