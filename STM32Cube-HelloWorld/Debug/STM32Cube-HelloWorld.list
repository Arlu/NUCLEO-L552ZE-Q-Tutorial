
STM32Cube-HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea4  08003ea4  00005090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eac  08003eac  00005090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08003eb4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000090  08003f44  00005090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08003f44  00005344  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d15e  00000000  00000000  000050c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd8  00000000  00000000  00012224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00014200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000893  00000000  00000000  00014d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f79  00000000  00000000  000155e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5c8  00000000  00000000  0003e55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003c5  00000000  00000000  0004bb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033bc  00000000  00000000  0014bf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0014f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000090 	.word	0x20000090
 8000210:	00000000 	.word	0x00000000
 8000214:	08003dc0 	.word	0x08003dc0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000094 	.word	0x20000094
 8000230:	08003dc0 	.word	0x08003dc0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00b      	beq.n	80005f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	e000      	b.n	80005dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fd64 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f838 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f89a 	bl	8000744 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000610:	f000 f885 	bl	800071e <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fab3 	bl	8000b80 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fab0 	bl	8000b80 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000620:	2002      	movs	r0, #2
 8000622:	f000 faad 	bl	8000b80 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000626:	2101      	movs	r1, #1
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fb07 	bl	8000c3c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <main+0x74>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000634:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <main+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <main+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000642:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <main+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <main+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800064e:	4909      	ldr	r1, [pc, #36]	@ (8000674 <main+0x74>)
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fbaf 	bl	8000db4 <BSP_COM_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <main+0x60>
  {
    Error_Handler();
 800065c:	f000 f8be 	bl	80007dc <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  printf("Hello World from STM32L552ZE using STM32Cube!\n");
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <main+0x78>)
 8000662:	f003 f819 	bl	8003698 <puts>
	  HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f000 fda7 	bl	80011bc <HAL_Delay>
	  printf("Hello World from STM32L552ZE using STM32Cube!\n");
 800066e:	bf00      	nop
 8000670:	e7f6      	b.n	8000660 <main+0x60>
 8000672:	bf00      	nop
 8000674:	200000ac 	.word	0x200000ac
 8000678:	08003dd8 	.word	0x08003dd8

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b098      	sub	sp, #96	@ 0x60
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2248      	movs	r2, #72	@ 0x48
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f8e4 	bl	8003858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800069e:	2000      	movs	r0, #0
 80006a0:	f001 f91e 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006aa:	f000 f897 	bl	80007dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ae:	2310      	movs	r3, #16
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ba:	2360      	movs	r3, #96	@ 0x60
 80006bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c2:	2301      	movs	r3, #1
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006ca:	2337      	movs	r3, #55	@ 0x37
 80006cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f98e 	bl	8001a00 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f000 f877 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2105      	movs	r1, #5
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fe50 	bl	80023ac <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f863 	bl	80007dc <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3760      	adds	r7, #96	@ 0x60
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000722:	2000      	movs	r0, #0
 8000724:	f001 f89e 	bl	8001864 <HAL_ICACHE_ConfigAssociativityMode>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800072e:	f000 f855 	bl	80007dc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000732:	f001 f8b7 	bl	80018a4 <HAL_ICACHE_Enable>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800073c:	f000 f84e 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x5c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	e009      	b.n	80007ca <_write+0x26>
  {
	ITM_SendChar(*ptr++);
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	60ba      	str	r2, [r7, #8]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fef6 	bl	80005b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dbf1      	blt.n	80007b6 <_write+0x12>
  }
  return len;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	@ 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <NMI_Handler+0x4>

08000838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <MemManage_Handler+0x4>

08000848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <UsageFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000886:	f000 fc79 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 fa78 	bl	8000d88 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
  }

  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	@ (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f002 ffc0 	bl	80038f4 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20030000 	.word	0x20030000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	200000bc 	.word	0x200000bc
 80009a8:	20000348 	.word	0x20000348

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80009d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d107      	bne.n	80009f2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80009e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 80009e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e005      	b.n	80009fe <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80009f2:	4b48      	ldr	r3, [pc, #288]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80009fe:	4a46      	ldr	r2, [pc, #280]	@ (8000b18 <SystemCoreClockUpdate+0x148>)
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a08:	4b42      	ldr	r3, [pc, #264]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
 8000a10:	2b0c      	cmp	r3, #12
 8000a12:	d866      	bhi.n	8000ae2 <SystemCoreClockUpdate+0x112>
 8000a14:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <SystemCoreClockUpdate+0x4c>)
 8000a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1a:	bf00      	nop
 8000a1c:	08000a51 	.word	0x08000a51
 8000a20:	08000ae3 	.word	0x08000ae3
 8000a24:	08000ae3 	.word	0x08000ae3
 8000a28:	08000ae3 	.word	0x08000ae3
 8000a2c:	08000a59 	.word	0x08000a59
 8000a30:	08000ae3 	.word	0x08000ae3
 8000a34:	08000ae3 	.word	0x08000ae3
 8000a38:	08000ae3 	.word	0x08000ae3
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000ae3 	.word	0x08000ae3
 8000a44:	08000ae3 	.word	0x08000ae3
 8000a48:	08000ae3 	.word	0x08000ae3
 8000a4c:	08000a69 	.word	0x08000a69
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000a50:	4a32      	ldr	r2, [pc, #200]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	6013      	str	r3, [r2, #0]
      break;
 8000a56:	e048      	b.n	8000aea <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000a58:	4b30      	ldr	r3, [pc, #192]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000a5a:	4a31      	ldr	r2, [pc, #196]	@ (8000b20 <SystemCoreClockUpdate+0x150>)
 8000a5c:	601a      	str	r2, [r3, #0]
      break;
 8000a5e:	e044      	b.n	8000aea <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000a60:	4b2e      	ldr	r3, [pc, #184]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000a62:	4a30      	ldr	r2, [pc, #192]	@ (8000b24 <SystemCoreClockUpdate+0x154>)
 8000a64:	601a      	str	r2, [r3, #0]
      break;
 8000a66:	e040      	b.n	8000aea <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000a68:	4b2a      	ldr	r3, [pc, #168]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000a72:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	f003 030f 	and.w	r3, r3, #15
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d003      	beq.n	8000a8e <SystemCoreClockUpdate+0xbe>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d006      	beq.n	8000a9a <SystemCoreClockUpdate+0xca>
 8000a8c:	e00b      	b.n	8000aa6 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000a8e:	4a24      	ldr	r2, [pc, #144]	@ (8000b20 <SystemCoreClockUpdate+0x150>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	613b      	str	r3, [r7, #16]
          break;
 8000a98:	e00b      	b.n	8000ab2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000a9a:	4a22      	ldr	r2, [pc, #136]	@ (8000b24 <SystemCoreClockUpdate+0x154>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	613b      	str	r3, [r7, #16]
          break;
 8000aa4:	e005      	b.n	8000ab2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	613b      	str	r3, [r7, #16]
          break;
 8000ab0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000ab2:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	fb02 f303 	mul.w	r3, r2, r3
 8000ac2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0e5b      	lsrs	r3, r3, #25
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000ade:	6013      	str	r3, [r2, #0]
      break;
 8000ae0:	e003      	b.n	8000aea <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	6013      	str	r3, [r2, #0]
      break;
 8000ae8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <SystemCoreClockUpdate+0x144>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b28 <SystemCoreClockUpdate+0x158>)
 8000af6:	5cd3      	ldrb	r3, [r2, r3]
 8000af8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <SystemCoreClockUpdate+0x14c>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	08003e4c 	.word	0x08003e4c
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	00f42400 	.word	0x00f42400
 8000b24:	007a1200 	.word	0x007a1200
 8000b28:	08003e34 	.word	0x08003e34

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b30:	f7ff ff3c 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b36:	e003      	b.n	8000b40 <LoopCopyDataInit>

08000b38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b3e:	3104      	adds	r1, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b40:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b48:	d3f6      	bcc.n	8000b38 <CopyDataInit>
	ldr	r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b4c:	e002      	b.n	8000b54 <LoopFillZerobss>

08000b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b50:	f842 3b04 	str.w	r3, [r2], #4

08000b54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <LoopForever+0x16>)
	cmp	r2, r3
 8000b56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b58:	d3f9      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5a:	f002 fed1 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fd4f 	bl	8000600 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b64:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000b68:	08003eb4 	.word	0x08003eb4
	ldr	r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b70:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000b74:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000b78:	20000344 	.word	0x20000344

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LED1)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10c      	bne.n	8000baa <BSP_LED_Init+0x2a>
  {
    LED1_GPIO_CLK_ENABLE();
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	e01b      	b.n	8000be2 <BSP_LED_Init+0x62>
  }
  else if (Led == LED2)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d10c      	bne.n	8000bca <BSP_LED_Init+0x4a>
  {
    LED2_GPIO_CLK_ENABLE();
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	e00b      	b.n	8000be2 <BSP_LED_Init+0x62>
  }
  else /* Led = LED3 */
  {
    LED3_GPIO_CLK_ENABLE();
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <BSP_LED_Init+0xb0>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a13      	ldr	r2, [pc, #76]	@ (8000c34 <BSP_LED_Init+0xb4>)
 8000be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <BSP_LED_Init+0xb8>)
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	f107 0214 	add.w	r2, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fc94 	bl	8001534 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <BSP_LED_Init+0xb8>)
 8000c10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <BSP_LED_Init+0xb4>)
 8000c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f000 fe08 	bl	8001834 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	20000004 	.word	0x20000004
 8000c38:	2000000c 	.word	0x2000000c

08000c3c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000c50:	230f      	movs	r3, #15
 8000c52:	617b      	str	r3, [r7, #20]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <BSP_PB_Init+0x118>)
 8000c56:	613b      	str	r3, [r7, #16]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000c58:	4b3f      	ldr	r3, [pc, #252]	@ (8000d58 <BSP_PB_Init+0x11c>)
 8000c5a:	60fb      	str	r3, [r7, #12]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <BSP_PB_Init+0x120>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c60:	4a3e      	ldr	r2, [pc, #248]	@ (8000d5c <BSP_PB_Init+0x120>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c68:	4b3c      	ldr	r3, [pc, #240]	@ (8000d5c <BSP_PB_Init+0x120>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	4a3a      	ldr	r2, [pc, #232]	@ (8000d60 <BSP_PB_Init+0x124>)
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Pull  = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c82:	2302      	movs	r3, #2
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10b      	bne.n	8000ca4 <BSP_PB_Init+0x68>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4a34      	ldr	r2, [pc, #208]	@ (8000d64 <BSP_PB_Init+0x128>)
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	f107 0218 	add.w	r2, r7, #24
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fc48 	bl	8001534 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d14f      	bne.n	8000d4a <BSP_PB_Init+0x10e>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 8000caa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d64 <BSP_PB_Init+0x128>)
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	f107 0218 	add.w	r2, r7, #24
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fc38 	bl	8001534 <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a26      	ldr	r2, [pc, #152]	@ (8000d68 <BSP_PB_Init+0x12c>)
 8000cd0:	441a      	add	r2, r3
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	3330      	adds	r3, #48	@ 0x30
 8000cd8:	443b      	add	r3, r7
 8000cda:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	f000 fbca 	bl	800147a <HAL_EXTI_GetHandle>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d12b      	bne.n	8000d44 <BSP_PB_Init+0x108>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_RISING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <BSP_PB_Init+0x12c>)
 8000cf8:	1898      	adds	r0, r3, r2
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	3330      	adds	r3, #48	@ 0x30
 8000d00:	443b      	add	r3, r7
 8000d02:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000d06:	461a      	mov	r2, r3
 8000d08:	2101      	movs	r1, #1
 8000d0a:	f000 fb8a 	bl	8001422 <HAL_EXTI_RegisterCallback>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d113      	bne.n	8000d3c <BSP_PB_Init+0x100>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a15      	ldr	r2, [pc, #84]	@ (8000d6c <BSP_PB_Init+0x130>)
 8000d18:	56d0      	ldrsb	r0, [r2, r3]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	3330      	adds	r3, #48	@ 0x30
 8000d20:	443b      	add	r3, r7
 8000d22:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f000 fb46 	bl	80013ba <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <BSP_PB_Init+0x130>)
 8000d32:	56d3      	ldrsb	r3, [r2, r3]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fb5a 	bl	80013ee <HAL_NVIC_EnableIRQ>
 8000d3a:	e006      	b.n	8000d4a <BSP_PB_Init+0x10e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000d3c:	f06f 0303 	mvn.w	r3, #3
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d42:	e002      	b.n	8000d4a <BSP_PB_Init+0x10e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000d44:	f06f 0303 	mvn.w	r3, #3
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }

  return status;
 8000d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3730      	adds	r7, #48	@ 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	0600000d 	.word	0x0600000d
 8000d58:	08000f21 	.word	0x08000f21
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	20000018 	.word	0x20000018
 8000d64:	2000001c 	.word	0x2000001c
 8000d68:	200001e8 	.word	0x200001e8
 8000d6c:	20000020 	.word	0x20000020

08000d70 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <BSP_PB_IRQHandler+0x28>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fb7f 	bl	80014a4 <HAL_EXTI_IRQHandler>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001e8 	.word	0x200001e8

08000db4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000dca:	f06f 0301 	mvn.w	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e03a      	b.n	8000e48 <BSP_COM_Init+0x94>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	491f      	ldr	r1, [pc, #124]	@ (8000e54 <BSP_COM_Init+0xa0>)
 8000dd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ddc:	491e      	ldr	r1, [pc, #120]	@ (8000e58 <BSP_COM_Init+0xa4>)
 8000dde:	2094      	movs	r0, #148	@ 0x94
 8000de0:	fb00 f303 	mul.w	r3, r0, r3
 8000de4:	440b      	add	r3, r1
 8000de6:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2294      	movs	r2, #148	@ 0x94
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <BSP_COM_Init+0xa4>)
 8000df2:	4413      	add	r3, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f89b 	bl	8000f30 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d123      	bne.n	8000e48 <BSP_COM_Init+0x94>
    {
      if (COM == COM1)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d110      	bne.n	8000e28 <BSP_COM_Init+0x74>
      {
        if (MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2294      	movs	r2, #148	@ 0x94
 8000e0a:	fb02 f303 	mul.w	r3, r2, r3
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <BSP_COM_Init+0xa4>)
 8000e10:	4413      	add	r3, r2
 8000e12:	6839      	ldr	r1, [r7, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f821 	bl	8000e5c <MX_LPUART1_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000e20:	f06f 0303 	mvn.w	r3, #3
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e00f      	b.n	8000e48 <BSP_COM_Init+0x94>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2294      	movs	r2, #148	@ 0x94
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <BSP_COM_Init+0xa4>)
 8000e32:	4413      	add	r3, r2
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f841 	bl	8000ebe <MX_USART3_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <BSP_COM_Init+0x94>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000e42:	f06f 0303 	mvn.w	r3, #3
 8000e46:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return status;
 8000e48:	68fb      	ldr	r3, [r7, #12]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000024 	.word	0x20000024
 8000e58:	200000c0 	.word	0x200000c0

08000e5c <MX_LPUART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	891b      	ldrh	r3, [r3, #8]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	895b      	ldrh	r3, [r3, #10]
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	899b      	ldrh	r3, [r3, #12]
 8000e94:	461a      	mov	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ea0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f001 fd60 	bl	8002974 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <MX_USART3_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	891b      	ldrh	r3, [r3, #8]
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	895b      	ldrh	r3, [r3, #10]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	899b      	ldrh	r3, [r3, #12]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f02:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f001 fd2f 	bl	8002974 <HAL_UART_Init>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff ff23 	bl	8000d70 <BSP_PB_Callback>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b098      	sub	sp, #96	@ 0x60
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init;
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT, COM2_TX_GPIO_PORT};
 8000f38:	4a60      	ldr	r2, [pc, #384]	@ (80010bc <UART_MspInit+0x18c>)
 8000f3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f42:	e883 0003 	stmia.w	r3, {r0, r1}
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT, COM2_RX_GPIO_PORT};
 8000f46:	4a5d      	ldr	r2, [pc, #372]	@ (80010bc <UART_MspInit+0x18c>)
 8000f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f50:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t         COM_TX_PIN[COMn]  = {COM1_TX_PIN, COM2_TX_PIN};
 8000f54:	4b5a      	ldr	r3, [pc, #360]	@ (80010c0 <UART_MspInit+0x190>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t         COM_RX_PIN[COMn]  = {COM1_RX_PIN, COM2_RX_PIN};
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80010c4 <UART_MspInit+0x194>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t          COM_TX_AF[COMn]   = {COM1_TX_AF, COM2_TX_AF};
 8000f60:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000f64:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t          COM_RX_AF[COMn]   = {COM1_RX_AF, COM2_RX_AF};
 8000f66:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8000f6a:	853b      	strh	r3, [r7, #40]	@ 0x28
  COM_TypeDef      COM;

  /* Get COM according instance */
  COM = (huart->Instance == COM1_UART) ? COM1 : COM2;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a55      	ldr	r2, [pc, #340]	@ (80010c8 <UART_MspInit+0x198>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  /* Enable COM and GPIO clocks */
  if (COM == COM1)
 8000f80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d132      	bne.n	8000fee <UART_MspInit+0xbe>
  {
    /* Enable VddIO2 for GPIOG */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b50      	ldr	r3, [pc, #320]	@ (80010cc <UART_MspInit+0x19c>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80010cc <UART_MspInit+0x19c>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f94:	4b4d      	ldr	r3, [pc, #308]	@ (80010cc <UART_MspInit+0x19c>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    HAL_PWREx_EnableVddIO2();
 8000fa0:	f000 fcfa 	bl	8001998 <HAL_PWREx_EnableVddIO2>
    COM1_TX_GPIO_CLK_ENABLE();
 8000fa4:	4b49      	ldr	r3, [pc, #292]	@ (80010cc <UART_MspInit+0x19c>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	4a48      	ldr	r2, [pc, #288]	@ (80010cc <UART_MspInit+0x19c>)
 8000faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb0:	4b46      	ldr	r3, [pc, #280]	@ (80010cc <UART_MspInit+0x19c>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb8:	623b      	str	r3, [r7, #32]
 8000fba:	6a3b      	ldr	r3, [r7, #32]
    COM1_RX_GPIO_CLK_ENABLE();
 8000fbc:	4b43      	ldr	r3, [pc, #268]	@ (80010cc <UART_MspInit+0x19c>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	4a42      	ldr	r2, [pc, #264]	@ (80010cc <UART_MspInit+0x19c>)
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc8:	4b40      	ldr	r3, [pc, #256]	@ (80010cc <UART_MspInit+0x19c>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
    COM1_CLK_ENABLE();
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80010cc <UART_MspInit+0x19c>)
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80010cc <UART_MspInit+0x19c>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <UART_MspInit+0x19c>)
 8000fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	e023      	b.n	8001036 <UART_MspInit+0x106>
  }
  else /* COM = COM2 */
  {
    COM2_TX_GPIO_CLK_ENABLE();
 8000fee:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <UART_MspInit+0x19c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	4a36      	ldr	r2, [pc, #216]	@ (80010cc <UART_MspInit+0x19c>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffa:	4b34      	ldr	r3, [pc, #208]	@ (80010cc <UART_MspInit+0x19c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    COM2_RX_GPIO_CLK_ENABLE();
 8001006:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <UART_MspInit+0x19c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a30      	ldr	r2, [pc, #192]	@ (80010cc <UART_MspInit+0x19c>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b2e      	ldr	r3, [pc, #184]	@ (80010cc <UART_MspInit+0x19c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    COM2_CLK_ENABLE();
 800101e:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <UART_MspInit+0x19c>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <UART_MspInit+0x19c>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001028:	6593      	str	r3, [r2, #88]	@ 0x58
 800102a:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <UART_MspInit+0x19c>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8001036:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	3360      	adds	r3, #96	@ 0x60
 800103e:	443b      	add	r3, r7
 8001040:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001044:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_Init.Pull      = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_Init.Alternate = COM_TX_AF[COM];
 8001052:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001056:	3360      	adds	r3, #96	@ 0x60
 8001058:	443b      	add	r3, r7
 800105a:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 800105e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 8001060:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3360      	adds	r3, #96	@ 0x60
 8001068:	443b      	add	r3, r7
 800106a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800106e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fa5d 	bl	8001534 <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 800107a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	3360      	adds	r3, #96	@ 0x60
 8001082:	443b      	add	r3, r7
 8001084:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8001088:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_Init.Alternate = COM_RX_AF[COM];
 800108a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800108e:	3360      	adds	r3, #96	@ 0x60
 8001090:	443b      	add	r3, r7
 8001092:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001096:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 8001098:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	3360      	adds	r3, #96	@ 0x60
 80010a0:	443b      	add	r3, r7
 80010a2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80010a6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fa41 	bl	8001534 <HAL_GPIO_Init>
}
 80010b2:	bf00      	nop
 80010b4:	3760      	adds	r7, #96	@ 0x60
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08003e24 	.word	0x08003e24
 80010c0:	08003e2c 	.word	0x08003e2c
 80010c4:	08003e30 	.word	0x08003e30
 80010c8:	40008000 	.word	0x40008000
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010da:	2004      	movs	r0, #4
 80010dc:	f000 f962 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80010e0:	f7ff fc76 	bl	80009d0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f80d 	bl	8001104 <HAL_InitTick>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	e001      	b.n	80010fa <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f6:	f7ff fb77 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f96b 	bl	800140a <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f937 	bl	80013ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000030 	.word	0x20000030
 8001174:	20000000 	.word	0x20000000
 8001178:	2000002c 	.word	0x2000002c

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000030 	.word	0x20000030
 80011a0:	200001f4 	.word	0x200001f4

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200001f4 	.word	0x200001f4

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000030 	.word	0x20000030

08001204 <__NVIC_SetPriorityGrouping>:
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0152      	lsls	r2, r2, #5
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0152      	lsls	r2, r2, #5
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b03      	cmp	r3, #3
 8001314:	bf28      	it	cs
 8001316:	2303      	movcs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3303      	adds	r3, #3
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b04      	subs	r3, #4
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	2107      	movs	r1, #7
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff29 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff40 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff90 	bl	80012f8 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5f 	bl	80012a4 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa4 	bl	8001360 <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001422:	b480      	push	{r7}
 8001424:	b087      	sub	sp, #28
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	460b      	mov	r3, r1
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d011      	beq.n	800145e <HAL_EXTI_RegisterCallback+0x3c>
 800143a:	2b02      	cmp	r3, #2
 800143c:	dc13      	bgt.n	8001466 <HAL_EXTI_RegisterCallback+0x44>
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <HAL_EXTI_RegisterCallback+0x26>
 8001442:	2b01      	cmp	r3, #1
 8001444:	d007      	beq.n	8001456 <HAL_EXTI_RegisterCallback+0x34>
 8001446:	e00e      	b.n	8001466 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
      break;
 8001454:	e00a      	b.n	800146c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
      break;
 800145c:	e006      	b.n	800146c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
      break;
 8001464:	e002      	b.n	800146c <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
      break;
 800146a:	bf00      	nop
  }

  return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	371c      	adds	r7, #28
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  /* Check null pointer */
  if(hexti == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e003      	b.n	8001496 <HAL_EXTI_GetHandle+0x1c>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Store line number as handle private field */
  hexti->Line = ExtiLine;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	4b17      	ldr	r3, [pc, #92]	@ (800152c <HAL_EXTI_IRQHandler+0x88>)
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->RisingCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_EXTI_IRQHandler+0x8c>)
 80014fc:	4413      	add	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	60bb      	str	r3, [r7, #8]

  if(regval != 0U)
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if(hexti->FallingCallback != NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4798      	blx	r3
    }
  }
}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	4002f40c 	.word	0x4002f40c
 8001530:	4002f410 	.word	0x4002f410

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001542:	e158      	b.n	80017f6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 814a 	beq.w	80017f0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d005      	beq.n	8001574 <HAL_GPIO_Init+0x40>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0201 	and.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d017      	beq.n	8001612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d123      	bne.n	8001666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80a4 	beq.w	80017f0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80016a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3318      	adds	r3, #24
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	220f      	movs	r2, #15
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a52      	ldr	r2, [pc, #328]	@ (8001818 <HAL_GPIO_Init+0x2e4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d025      	beq.n	8001720 <HAL_GPIO_Init+0x1ec>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a51      	ldr	r2, [pc, #324]	@ (800181c <HAL_GPIO_Init+0x2e8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d01f      	beq.n	800171c <HAL_GPIO_Init+0x1e8>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a50      	ldr	r2, [pc, #320]	@ (8001820 <HAL_GPIO_Init+0x2ec>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d019      	beq.n	8001718 <HAL_GPIO_Init+0x1e4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001824 <HAL_GPIO_Init+0x2f0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_GPIO_Init+0x1e0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001828 <HAL_GPIO_Init+0x2f4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1dc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a4d      	ldr	r2, [pc, #308]	@ (800182c <HAL_GPIO_Init+0x2f8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1d8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <HAL_GPIO_Init+0x2fc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1d4>
 8001704:	2306      	movs	r3, #6
 8001706:	e00c      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001708:	2307      	movs	r3, #7
 800170a:	e00a      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 800170c:	2305      	movs	r3, #5
 800170e:	e008      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001710:	2304      	movs	r3, #4
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001714:	2303      	movs	r3, #3
 8001716:	e004      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001718:	2302      	movs	r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001720:	2300      	movs	r3, #0
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	00d2      	lsls	r2, r2, #3
 800172a:	4093      	lsls	r3, r2
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001732:	4938      	ldr	r1, [pc, #224]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3318      	adds	r3, #24
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001764:	4a2b      	ldr	r2, [pc, #172]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800176a:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178e:	4a21      	ldr	r2, [pc, #132]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 8001796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 80017c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_GPIO_Init+0x2e0>)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3301      	adds	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	f47f ae9f 	bne.w	8001544 <HAL_GPIO_Init+0x10>
  }
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	4002f400 	.word	0x4002f400
 8001818:	42020000 	.word	0x42020000
 800181c:	42020400 	.word	0x42020400
 8001820:	42020800 	.word	0x42020800
 8001824:	42020c00 	.word	0x42020c00
 8001828:	42021000 	.word	0x42021000
 800182c:	42021400 	.word	0x42021400
 8001830:	42021800 	.word	0x42021800

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001850:	e002      	b.n	8001858 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e007      	b.n	8001892 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0204 	bic.w	r2, r3, #4
 800188a:	4905      	ldr	r1, [pc, #20]	@ (80018a0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40030400 	.word	0x40030400

080018a4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_ICACHE_Enable+0x1c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_ICACHE_Enable+0x1c>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40030400 	.word	0x40030400

080018c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018f0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80018f2:	f000 f861 	bl	80019b8 <HAL_PWREx_SMPS_GetEffectiveMode>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018fc:	d101      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e03e      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800190a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800190e:	d101      	bne.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e035      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	d101      	bne.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e02f      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001928:	4917      	ldr	r1, [pc, #92]	@ (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	4a16      	ldr	r2, [pc, #88]	@ (8001990 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	09db      	lsrs	r3, r3, #7
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	4a13      	ldr	r2, [pc, #76]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	3301      	adds	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001950:	e002      	b.n	8001958 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3b01      	subs	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001964:	d102      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f2      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001978:	d101      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e000      	b.n	8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40007000 	.word	0x40007000
 800198c:	20000000 	.word	0x20000000
 8001990:	0a7c5ac5 	.word	0x0a7c5ac5
 8001994:	cccccccd 	.word	0xcccccccd

08001998 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6053      	str	r3, [r2, #4]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40007000 	.word	0x40007000

080019b8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80019ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e00a      	b.n	80019ec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80019e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	e001      	b.n	80019ec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40007000 	.word	0x40007000

08001a00 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f000 bcc2 	b.w	8002398 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a14:	4b99      	ldr	r3, [pc, #612]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1e:	4b97      	ldr	r3, [pc, #604]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80e9 	beq.w	8001c08 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4a>
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	f040 8083 	bne.w	8001b4a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d17f      	bne.n	8001b4a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_RCC_OscConfig+0x64>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f000 bc9a 	b.w	8002398 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a68:	4b84      	ldr	r3, [pc, #528]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_RCC_OscConfig+0x7e>
 8001a74:	4b81      	ldr	r3, [pc, #516]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7c:	e005      	b.n	8001a8a <HAL_RCC_OscConfig+0x8a>
 8001a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d224      	bcs.n	8001ad8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe9c 	bl	80027d0 <RCC_SetFlashLatencyFromMSIRange>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f000 bc7a 	b.w	8002398 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa4:	4b75      	ldr	r3, [pc, #468]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a74      	ldr	r2, [pc, #464]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b72      	ldr	r3, [pc, #456]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	496f      	ldr	r1, [pc, #444]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	496a      	ldr	r1, [pc, #424]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
 8001ad6:	e026      	b.n	8001b26 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad8:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a67      	ldr	r2, [pc, #412]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	4962      	ldr	r1, [pc, #392]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af6:	4b61      	ldr	r3, [pc, #388]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	495d      	ldr	r1, [pc, #372]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fe5b 	bl	80027d0 <RCC_SetFlashLatencyFromMSIRange>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f000 bc39 	b.w	8002398 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b26:	f000 fe17 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a54      	ldr	r2, [pc, #336]	@ (8001c80 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b30:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <HAL_RCC_OscConfig+0x284>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fae5 	bl	8001104 <HAL_InitTick>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d060      	beq.n	8001c06 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	f000 bc27 	b.w	8002398 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d039      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b52:	4b4a      	ldr	r3, [pc, #296]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a49      	ldr	r2, [pc, #292]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fb21 	bl	80011a4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b64:	e00f      	b.n	8001b86 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b66:	f7ff fb1d 	bl	80011a4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d908      	bls.n	8001b86 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b74:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f000 bc09 	b.w	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b86:	4b3d      	ldr	r3, [pc, #244]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0e9      	beq.n	8001b66 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a39      	ldr	r2, [pc, #228]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b37      	ldr	r3, [pc, #220]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	4934      	ldr	r1, [pc, #208]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	492f      	ldr	r1, [pc, #188]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e020      	b.n	8001c08 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2c      	ldr	r2, [pc, #176]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fae7 	bl	80011a4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd8:	e00e      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7ff fae3 	bl	80011a4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d907      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be8:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e3cf      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf8:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ea      	bne.n	8001bda <HAL_RCC_OscConfig+0x1da>
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d07e      	beq.n	8001d12 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x226>
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d10e      	bne.n	8001c3e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d10b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06e      	beq.n	8001d10 <HAL_RCC_OscConfig+0x310>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d16a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e3ac      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x256>
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e024      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2a0>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c5e:	d113      	bne.n	8001c88 <HAL_RCC_OscConfig+0x288>
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a02      	ldr	r2, [pc, #8]	@ (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e012      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2a0>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	20000000 	.word	0x20000000
 8001c84:	2000002c 	.word	0x2000002c
 8001c88:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a8a      	ldr	r2, [pc, #552]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b88      	ldr	r3, [pc, #544]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a87      	ldr	r2, [pc, #540]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d019      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fa7c 	bl	80011a4 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e00e      	b.n	8001cce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fa78 	bl	80011a4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d907      	bls.n	8001cce <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	4b7e      	ldr	r3, [pc, #504]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e364      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	4b7a      	ldr	r3, [pc, #488]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ea      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2b0>
 8001cda:	e01a      	b.n	8001d12 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fa62 	bl	80011a4 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce2:	e00e      	b.n	8001d02 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fa5e 	bl	80011a4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d907      	bls.n	8001d02 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf2:	4b71      	ldr	r3, [pc, #452]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e34a      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ea      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2e4>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x330>
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	4b61      	ldr	r3, [pc, #388]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x348>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e327      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b5b      	ldr	r3, [pc, #364]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	4958      	ldr	r1, [pc, #352]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5c:	e04c      	b.n	8001df8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d029      	beq.n	8001dba <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b54      	ldr	r3, [pc, #336]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a53      	ldr	r2, [pc, #332]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fa17 	bl	80011a4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	e00e      	b.n	8001d98 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fa13 	bl	80011a4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d907      	bls.n	8001d98 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e2ff      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d98:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ea      	beq.n	8001d7a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b44      	ldr	r3, [pc, #272]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	4941      	ldr	r1, [pc, #260]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e01e      	b.n	8001df8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f9ed 	bl	80011a4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	e00e      	b.n	8001dec <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff f9e9 	bl	80011a4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d907      	bls.n	8001dec <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e2d5      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dec:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ea      	bne.n	8001dce <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d062      	beq.n	8001eca <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d038      	beq.n	8001e7e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d108      	bne.n	8001e26 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001e14:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1a:	4a27      	ldr	r2, [pc, #156]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f023 0310 	bic.w	r3, r3, #16
 8001e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e24:	e007      	b.n	8001e36 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001e26:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2c:	4a22      	ldr	r2, [pc, #136]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f9ad 	bl	80011a4 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4c:	e00f      	b.n	8001e6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4e:	f7ff f9a9 	bl	80011a4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b07      	cmp	r3, #7
 8001e5a:	d908      	bls.n	8001e6e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5c:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e294      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0e8      	beq.n	8001e4e <HAL_RCC_OscConfig+0x44e>
 8001e7c:	e025      	b.n	8001eca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e84:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f989 	bl	80011a4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e94:	e012      	b.n	8001ebc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff f985 	bl	80011a4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d90b      	bls.n	8001ebc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e270      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1e5      	bne.n	8001e96 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 812d 	beq.w	8002132 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001edc:	4ba0      	ldr	r3, [pc, #640]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b9d      	ldr	r3, [pc, #628]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eec:	4a9c      	ldr	r2, [pc, #624]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ef4:	4b9a      	ldr	r3, [pc, #616]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f00:	2301      	movs	r3, #1
 8001f02:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f04:	4b97      	ldr	r3, [pc, #604]	@ (8002164 <HAL_RCC_OscConfig+0x764>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11e      	bne.n	8001f4e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f10:	4b94      	ldr	r3, [pc, #592]	@ (8002164 <HAL_RCC_OscConfig+0x764>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a93      	ldr	r2, [pc, #588]	@ (8002164 <HAL_RCC_OscConfig+0x764>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f942 	bl	80011a4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f22:	e00e      	b.n	8001f42 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f24:	f7ff f93e 	bl	80011a4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d907      	bls.n	8001f42 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f32:	4b8c      	ldr	r3, [pc, #560]	@ (8002164 <HAL_RCC_OscConfig+0x764>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e22a      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	4b88      	ldr	r3, [pc, #544]	@ (8002164 <HAL_RCC_OscConfig+0x764>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ea      	beq.n	8001f24 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01f      	beq.n	8001f9a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f66:	4b7e      	ldr	r3, [pc, #504]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f76:	4b7a      	ldr	r3, [pc, #488]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7c:	4a78      	ldr	r2, [pc, #480]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f86:	e018      	b.n	8001fba <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f88:	4b75      	ldr	r3, [pc, #468]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8e:	4a74      	ldr	r2, [pc, #464]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f98:	e00f      	b.n	8001fba <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f9a:	4b71      	ldr	r3, [pc, #452]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa0:	4a6f      	ldr	r2, [pc, #444]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001faa:	4b6d      	ldr	r3, [pc, #436]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d068      	beq.n	8002094 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f8ef 	bl	80011a4 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc8:	e011      	b.n	8001fee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff f8eb 	bl	80011a4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fdc:	4b60      	ldr	r3, [pc, #384]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1d4      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	4b5c      	ldr	r3, [pc, #368]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0e6      	beq.n	8001fca <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002004:	2b00      	cmp	r3, #0
 8002006:	d022      	beq.n	800204e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002008:	4b55      	ldr	r3, [pc, #340]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200e:	4a54      	ldr	r2, [pc, #336]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002018:	e011      	b.n	800203e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7ff f8c3 	bl	80011a4 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d908      	bls.n	800203e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800202c:	4b4c      	ldr	r3, [pc, #304]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ac      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800203e:	4b48      	ldr	r3, [pc, #288]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0e6      	beq.n	800201a <HAL_RCC_OscConfig+0x61a>
 800204c:	e068      	b.n	8002120 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800204e:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	4a42      	ldr	r2, [pc, #264]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800205e:	e011      	b.n	8002084 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7ff f8a0 	bl	80011a4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d908      	bls.n	8002084 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e189      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002084:	4b36      	ldr	r3, [pc, #216]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e6      	bne.n	8002060 <HAL_RCC_OscConfig+0x660>
 8002092:	e045      	b.n	8002120 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f886 	bl	80011a4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800209a:	e011      	b.n	80020c0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff f882 	bl	80011a4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d908      	bls.n	80020c0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e16b      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e6      	bne.n	800209c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d021      	beq.n	8002120 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 80020e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020ec:	e011      	b.n	8002112 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7ff f859 	bl	80011a4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e142      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e6      	bne.n	80020ee <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d04f      	beq.n	80021de <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d028      	beq.n	8002198 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 8002148:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <HAL_RCC_OscConfig+0x760>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff f825 	bl	80011a4 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x788>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002168:	f7ff f81c 	bl	80011a4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d908      	bls.n	8002188 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002176:	4b8a      	ldr	r3, [pc, #552]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e107      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002188:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 800218a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0e8      	beq.n	8002168 <HAL_RCC_OscConfig+0x768>
 8002196:	e022      	b.n	80021de <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002198:	4b81      	ldr	r3, [pc, #516]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800219e:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fffc 	bl	80011a4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021ae:	e00f      	b.n	80021d0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7fe fff8 	bl	80011a4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d908      	bls.n	80021d0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021be:	4b78      	ldr	r3, [pc, #480]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80021c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0e3      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d0:	4b73      	ldr	r3, [pc, #460]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80021d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e8      	bne.n	80021b0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80d7 	beq.w	8002396 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e8:	4b6d      	ldr	r3, [pc, #436]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	f000 8091 	beq.w	8002318 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d166      	bne.n	80022cc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a67      	ldr	r2, [pc, #412]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002204:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7fe ffcb 	bl	80011a4 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	e00e      	b.n	8002230 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe ffc7 	bl	80011a4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d907      	bls.n	8002230 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	4b5f      	ldr	r3, [pc, #380]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0b3      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002230:	4b5b      	ldr	r3, [pc, #364]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ea      	bne.n	8002212 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4b58      	ldr	r3, [pc, #352]	@ (80023a4 <HAL_RCC_OscConfig+0x9a4>)
 8002242:	4013      	ands	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800224c:	3a01      	subs	r2, #1
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002256:	0212      	lsls	r2, r2, #8
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800225e:	0852      	lsrs	r2, r2, #1
 8002260:	3a01      	subs	r2, #1
 8002262:	0552      	lsls	r2, r2, #21
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800226a:	0852      	lsrs	r2, r2, #1
 800226c:	3a01      	subs	r2, #1
 800226e:	0652      	lsls	r2, r2, #25
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002276:	06d2      	lsls	r2, r2, #27
 8002278:	430a      	orrs	r2, r1
 800227a:	4949      	ldr	r1, [pc, #292]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a46      	ldr	r2, [pc, #280]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800228c:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a43      	ldr	r2, [pc, #268]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002296:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe ff84 	bl	80011a4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229e:	e00e      	b.n	80022be <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe ff80 	bl	80011a4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d907      	bls.n	80022be <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	4b3c      	ldr	r3, [pc, #240]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e06c      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	4b38      	ldr	r3, [pc, #224]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ea      	beq.n	80022a0 <HAL_RCC_OscConfig+0x8a0>
 80022ca:	e064      	b.n	8002396 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a33      	ldr	r2, [pc, #204]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80022d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff64 	bl	80011a4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022de:	e00e      	b.n	80022fe <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe ff60 	bl	80011a4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d907      	bls.n	80022fe <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ee:	4b2c      	ldr	r3, [pc, #176]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04c      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fe:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ea      	bne.n	80022e0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800230a:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4924      	ldr	r1, [pc, #144]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_OscConfig+0x9a8>)
 8002312:	4013      	ands	r3, r2
 8002314:	60cb      	str	r3, [r1, #12]
 8002316:	e03e      	b.n	8002396 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e039      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_RCC_OscConfig+0x9a0>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	429a      	cmp	r2, r3
 8002336:	d12c      	bne.n	8002392 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002342:	3b01      	subs	r3, #1
 8002344:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d123      	bne.n	8002392 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002354:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d11b      	bne.n	8002392 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d113      	bne.n	8002392 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	3b01      	subs	r3, #1
 8002378:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d109      	bne.n	8002392 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	3b01      	subs	r3, #1
 800238c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	019f800c 	.word	0x019f800c
 80023a8:	feeefffc 	.word	0xfeeefffc

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e11c      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b90      	ldr	r3, [pc, #576]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d910      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 020f 	bic.w	r2, r3, #15
 80023da:	498b      	ldr	r1, [pc, #556]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b89      	ldr	r3, [pc, #548]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e104      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b81      	ldr	r3, [pc, #516]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800240c:	429a      	cmp	r2, r3
 800240e:	d908      	bls.n	8002422 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b7e      	ldr	r3, [pc, #504]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	497b      	ldr	r1, [pc, #492]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8085 	beq.w	800253a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d11f      	bne.n	8002478 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002438:	4b74      	ldr	r3, [pc, #464]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0da      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002448:	f000 fa26 	bl	8002898 <RCC_GetSysClockFreqFromPLLSource>
 800244c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4a6f      	ldr	r2, [pc, #444]	@ (8002610 <HAL_RCC_ClockConfig+0x264>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d947      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002456:	4b6d      	ldr	r3, [pc, #436]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d141      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002462:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800246a:	4a68      	ldr	r2, [pc, #416]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002470:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e036      	b.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d107      	bne.n	8002490 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002480:	4b62      	ldr	r3, [pc, #392]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d115      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b6      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002498:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0aa      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a8:	4b58      	ldr	r3, [pc, #352]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0a2      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024b8:	f000 f8b0 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4a53      	ldr	r2, [pc, #332]	@ (8002610 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d90f      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024c6:	4b51      	ldr	r3, [pc, #324]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024d2:	4b4e      	ldr	r3, [pc, #312]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024da:	4a4c      	ldr	r2, [pc, #304]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e6:	4b49      	ldr	r3, [pc, #292]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 0203 	bic.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4946      	ldr	r1, [pc, #280]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fe54 	bl	80011a4 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	e013      	b.n	8002528 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002500:	f7fe fe50 	bl	80011a4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d90a      	bls.n	8002528 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e06a      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002528:	4b38      	ldr	r3, [pc, #224]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 020c 	and.w	r2, r3, #12
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	429a      	cmp	r2, r3
 8002538:	d1e2      	bne.n	8002500 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b80      	cmp	r3, #128	@ 0x80
 800253e:	d105      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002540:	4b32      	ldr	r3, [pc, #200]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a31      	ldr	r2, [pc, #196]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800254a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b28      	ldr	r3, [pc, #160]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4925      	ldr	r1, [pc, #148]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257a:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d210      	bcs.n	80025aa <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002588:	4b1f      	ldr	r3, [pc, #124]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 020f 	bic.w	r2, r3, #15
 8002590:	491d      	ldr	r1, [pc, #116]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_ClockConfig+0x25c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e029      	b.n	80025fe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4912      	ldr	r1, [pc, #72]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d4:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	490a      	ldr	r1, [pc, #40]	@ (800260c <HAL_RCC_ClockConfig+0x260>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025e8:	f000 f8b6 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <HAL_RCC_ClockConfig+0x268>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCC_ClockConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fd84 	bl	8001104 <HAL_InitTick>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
 8002610:	04c4b400 	.word	0x04c4b400
 8002614:	20000000 	.word	0x20000000
 8002618:	2000002c 	.word	0x2000002c

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	@ 0x24
 8002620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002634:	4b44      	ldr	r3, [pc, #272]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x34>
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d121      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d11e      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002650:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800265c:	4b3a      	ldr	r3, [pc, #232]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 800265e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e005      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800266c:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002678:	4a34      	ldr	r2, [pc, #208]	@ (800274c <HAL_RCC_GetSysClockFreq+0x130>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d102      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002694:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x134>)
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e004      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x138>)
 80026a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d146      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026aa:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b4:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3301      	adds	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d003      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0xb4>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d00d      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0xce>
 80026ce:	e019      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x134>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 80026da:	68d2      	ldr	r2, [r2, #12]
 80026dc:	0a12      	lsrs	r2, r2, #8
 80026de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	617b      	str	r3, [r7, #20]
        break;
 80026e8:	e019      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x138>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	4a15      	ldr	r2, [pc, #84]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	0a12      	lsrs	r2, r2, #8
 80026f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
        break;
 8002702:	e00c      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 800270e:	68d2      	ldr	r2, [r2, #12]
 8002710:	0a12      	lsrs	r2, r2, #8
 8002712:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
        break;
 800271c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0e5b      	lsrs	r3, r3, #25
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	3301      	adds	r3, #1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002738:	69bb      	ldr	r3, [r7, #24]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	08003e4c 	.word	0x08003e4c
 8002750:	00f42400 	.word	0x00f42400
 8002754:	007a1200 	.word	0x007a1200

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800275c:	f7ff ff5e 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetHCLKFreq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	08003e34 	.word	0x08003e34

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff ffe8 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08003e44 	.word	0x08003e44

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffd4 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0adb      	lsrs	r3, r3, #11
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08003e44 	.word	0x08003e44

080027d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027e8:	f7ff f86c 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 80027ec:	6138      	str	r0, [r7, #16]
 80027ee:	e014      	b.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f4:	4a26      	ldr	r2, [pc, #152]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80027f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fc:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002808:	f7ff f85c 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 800280c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	4a1f      	ldr	r2, [pc, #124]	@ (8002890 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002818:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002826:	d10b      	bne.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b80      	cmp	r3, #128	@ 0x80
 800282c:	d919      	bls.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2ba0      	cmp	r3, #160	@ 0xa0
 8002832:	d902      	bls.n	800283a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002834:	2302      	movs	r3, #2
 8002836:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002838:	e013      	b.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800283a:	2301      	movs	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800283e:	e010      	b.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b80      	cmp	r3, #128	@ 0x80
 8002844:	d902      	bls.n	800284c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002846:	2303      	movs	r3, #3
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e00a      	b.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b80      	cmp	r3, #128	@ 0x80
 8002850:	d102      	bne.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002852:	2302      	movs	r3, #2
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e004      	b.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b70      	cmp	r3, #112	@ 0x70
 800285c:	d101      	bne.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800285e:	2301      	movs	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002862:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 020f 	bic.w	r2, r3, #15
 800286a:	490a      	ldr	r1, [pc, #40]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40022000 	.word	0x40022000

08002898 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800289e:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3301      	adds	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d015      	beq.n	80028e8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d839      	bhi.n	8002936 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d01c      	beq.n	8002902 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d133      	bne.n	8002936 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ce:	4a26      	ldr	r2, [pc, #152]	@ (8002968 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	0a12      	lsrs	r2, r2, #8
 80028dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	613b      	str	r3, [r7, #16]
      break;
 80028e6:	e029      	b.n	800293c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e8:	4a20      	ldr	r2, [pc, #128]	@ (800296c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	0a12      	lsrs	r2, r2, #8
 80028f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	e01c      	b.n	800293c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002902:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e005      	b.n	800292a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800292a:	4a11      	ldr	r2, [pc, #68]	@ (8002970 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	613b      	str	r3, [r7, #16]
        break;
 8002934:	e002      	b.n	800293c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
      break;
 800293a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0e5b      	lsrs	r3, r3, #25
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002956:	683b      	ldr	r3, [r7, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40021000 	.word	0x40021000
 8002968:	00f42400 	.word	0x00f42400
 800296c:	007a1200 	.word	0x007a1200
 8002970:	08003e4c 	.word	0x08003e4c

08002974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e042      	b.n	8002a0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f83b 	bl	8002a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2224      	movs	r2, #36	@ 0x24
 80029a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fb32 	bl	8003028 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f82f 	bl	8002a28 <UART_SetConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e01b      	b.n	8002a0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fbb1 	bl	800316c <UART_CheckIdleState>
 8002a0a:	4603      	mov	r3, r0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b08c      	sub	sp, #48	@ 0x30
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4baa      	ldr	r3, [pc, #680]	@ (8002d00 <UART_SetConfig+0x2d8>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a9f      	ldr	r2, [pc, #636]	@ (8002d04 <UART_SetConfig+0x2dc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002a9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	f023 010f 	bic.w	r1, r3, #15
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a90      	ldr	r2, [pc, #576]	@ (8002d08 <UART_SetConfig+0x2e0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d125      	bne.n	8002b18 <UART_SetConfig+0xf0>
 8002acc:	4b8f      	ldr	r3, [pc, #572]	@ (8002d0c <UART_SetConfig+0x2e4>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d81a      	bhi.n	8002b10 <UART_SetConfig+0xe8>
 8002ada:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae0 <UART_SetConfig+0xb8>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b01 	.word	0x08002b01
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002b09 	.word	0x08002b09
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af6:	e116      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002af8:	2302      	movs	r3, #2
 8002afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002afe:	e112      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b00:	2304      	movs	r3, #4
 8002b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b06:	e10e      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b08:	2308      	movs	r3, #8
 8002b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b0e:	e10a      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b10:	2310      	movs	r3, #16
 8002b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b16:	e106      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8002d10 <UART_SetConfig+0x2e8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d138      	bne.n	8002b94 <UART_SetConfig+0x16c>
 8002b22:	4b7a      	ldr	r3, [pc, #488]	@ (8002d0c <UART_SetConfig+0x2e4>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d82d      	bhi.n	8002b8c <UART_SetConfig+0x164>
 8002b30:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <UART_SetConfig+0x110>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002b8d 	.word	0x08002b8d
 8002b40:	08002b8d 	.word	0x08002b8d
 8002b44:	08002b8d 	.word	0x08002b8d
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002b8d 	.word	0x08002b8d
 8002b50:	08002b8d 	.word	0x08002b8d
 8002b54:	08002b8d 	.word	0x08002b8d
 8002b58:	08002b75 	.word	0x08002b75
 8002b5c:	08002b8d 	.word	0x08002b8d
 8002b60:	08002b8d 	.word	0x08002b8d
 8002b64:	08002b8d 	.word	0x08002b8d
 8002b68:	08002b85 	.word	0x08002b85
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b72:	e0d8      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b74:	2302      	movs	r3, #2
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b7a:	e0d4      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b82:	e0d0      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b84:	2308      	movs	r3, #8
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b8a:	e0cc      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b92:	e0c8      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5e      	ldr	r2, [pc, #376]	@ (8002d14 <UART_SetConfig+0x2ec>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d125      	bne.n	8002bea <UART_SetConfig+0x1c2>
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d0c <UART_SetConfig+0x2e4>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ba8:	2b30      	cmp	r3, #48	@ 0x30
 8002baa:	d016      	beq.n	8002bda <UART_SetConfig+0x1b2>
 8002bac:	2b30      	cmp	r3, #48	@ 0x30
 8002bae:	d818      	bhi.n	8002be2 <UART_SetConfig+0x1ba>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d00a      	beq.n	8002bca <UART_SetConfig+0x1a2>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d814      	bhi.n	8002be2 <UART_SetConfig+0x1ba>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <UART_SetConfig+0x19a>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d008      	beq.n	8002bd2 <UART_SetConfig+0x1aa>
 8002bc0:	e00f      	b.n	8002be2 <UART_SetConfig+0x1ba>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc8:	e0ad      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd0:	e0a9      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd8:	e0a5      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002bda:	2308      	movs	r3, #8
 8002bdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002be0:	e0a1      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002be2:	2310      	movs	r3, #16
 8002be4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002be8:	e09d      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a4a      	ldr	r2, [pc, #296]	@ (8002d18 <UART_SetConfig+0x2f0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d125      	bne.n	8002c40 <UART_SetConfig+0x218>
 8002bf4:	4b45      	ldr	r3, [pc, #276]	@ (8002d0c <UART_SetConfig+0x2e4>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c00:	d016      	beq.n	8002c30 <UART_SetConfig+0x208>
 8002c02:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c04:	d818      	bhi.n	8002c38 <UART_SetConfig+0x210>
 8002c06:	2b80      	cmp	r3, #128	@ 0x80
 8002c08:	d00a      	beq.n	8002c20 <UART_SetConfig+0x1f8>
 8002c0a:	2b80      	cmp	r3, #128	@ 0x80
 8002c0c:	d814      	bhi.n	8002c38 <UART_SetConfig+0x210>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <UART_SetConfig+0x1f0>
 8002c12:	2b40      	cmp	r3, #64	@ 0x40
 8002c14:	d008      	beq.n	8002c28 <UART_SetConfig+0x200>
 8002c16:	e00f      	b.n	8002c38 <UART_SetConfig+0x210>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c1e:	e082      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c20:	2302      	movs	r3, #2
 8002c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c26:	e07e      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2e:	e07a      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c30:	2308      	movs	r3, #8
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c36:	e076      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3e:	e072      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a35      	ldr	r2, [pc, #212]	@ (8002d1c <UART_SetConfig+0x2f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d12a      	bne.n	8002ca0 <UART_SetConfig+0x278>
 8002c4a:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <UART_SetConfig+0x2e4>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c58:	d01a      	beq.n	8002c90 <UART_SetConfig+0x268>
 8002c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c5e:	d81b      	bhi.n	8002c98 <UART_SetConfig+0x270>
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c64:	d00c      	beq.n	8002c80 <UART_SetConfig+0x258>
 8002c66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c6a:	d815      	bhi.n	8002c98 <UART_SetConfig+0x270>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <UART_SetConfig+0x250>
 8002c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c74:	d008      	beq.n	8002c88 <UART_SetConfig+0x260>
 8002c76:	e00f      	b.n	8002c98 <UART_SetConfig+0x270>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7e:	e052      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c80:	2302      	movs	r3, #2
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c86:	e04e      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c8e:	e04a      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c90:	2308      	movs	r3, #8
 8002c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c96:	e046      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c9e:	e042      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <UART_SetConfig+0x2dc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d13a      	bne.n	8002d20 <UART_SetConfig+0x2f8>
 8002caa:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <UART_SetConfig+0x2e4>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cb8:	d01a      	beq.n	8002cf0 <UART_SetConfig+0x2c8>
 8002cba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cbe:	d81b      	bhi.n	8002cf8 <UART_SetConfig+0x2d0>
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cc4:	d00c      	beq.n	8002ce0 <UART_SetConfig+0x2b8>
 8002cc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cca:	d815      	bhi.n	8002cf8 <UART_SetConfig+0x2d0>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <UART_SetConfig+0x2b0>
 8002cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd4:	d008      	beq.n	8002ce8 <UART_SetConfig+0x2c0>
 8002cd6:	e00f      	b.n	8002cf8 <UART_SetConfig+0x2d0>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cde:	e022      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce6:	e01e      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cee:	e01a      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf6:	e016      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfe:	e012      	b.n	8002d26 <UART_SetConfig+0x2fe>
 8002d00:	cfff69f3 	.word	0xcfff69f3
 8002d04:	40008000 	.word	0x40008000
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40004400 	.word	0x40004400
 8002d14:	40004800 	.word	0x40004800
 8002d18:	40004c00 	.word	0x40004c00
 8002d1c:	40005000 	.word	0x40005000
 8002d20:	2310      	movs	r3, #16
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4ab0      	ldr	r2, [pc, #704]	@ (8002fec <UART_SetConfig+0x5c4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f040 809b 	bne.w	8002e68 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d827      	bhi.n	8002d8a <UART_SetConfig+0x362>
 8002d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <UART_SetConfig+0x318>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002d6d 	.word	0x08002d6d
 8002d48:	08002d75 	.word	0x08002d75
 8002d4c:	08002d8b 	.word	0x08002d8b
 8002d50:	08002d7b 	.word	0x08002d7b
 8002d54:	08002d8b 	.word	0x08002d8b
 8002d58:	08002d8b 	.word	0x08002d8b
 8002d5c:	08002d8b 	.word	0x08002d8b
 8002d60:	08002d83 	.word	0x08002d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d64:	f7ff fd0c 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8002d68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d6a:	e014      	b.n	8002d96 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7ff fd1c 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8002d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d72:	e010      	b.n	8002d96 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d74:	4b9e      	ldr	r3, [pc, #632]	@ (8002ff0 <UART_SetConfig+0x5c8>)
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d78:	e00d      	b.n	8002d96 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7a:	f7ff fc4f 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8002d7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d80:	e009      	b.n	8002d96 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d88:	e005      	b.n	8002d96 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8130 	beq.w	8002ffe <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	4a94      	ldr	r2, [pc, #592]	@ (8002ff4 <UART_SetConfig+0x5cc>)
 8002da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002da8:	461a      	mov	r2, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d305      	bcc.n	8002dce <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d903      	bls.n	8002dd6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002dd4:	e113      	b.n	8002ffe <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	60fa      	str	r2, [r7, #12]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	4a84      	ldr	r2, [pc, #528]	@ (8002ff4 <UART_SetConfig+0x5cc>)
 8002de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2200      	movs	r2, #0
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002df4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df8:	f7fd fa1c 	bl	8000234 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	020b      	lsls	r3, r1, #8
 8002e0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e12:	0202      	lsls	r2, r0, #8
 8002e14:	6979      	ldr	r1, [r7, #20]
 8002e16:	6849      	ldr	r1, [r1, #4]
 8002e18:	0849      	lsrs	r1, r1, #1
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	4605      	mov	r5, r0
 8002e20:	eb12 0804 	adds.w	r8, r2, r4
 8002e24:	eb43 0905 	adc.w	r9, r3, r5
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	469a      	mov	sl, r3
 8002e30:	4693      	mov	fp, r2
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	4640      	mov	r0, r8
 8002e38:	4649      	mov	r1, r9
 8002e3a:	f7fd f9fb 	bl	8000234 <__aeabi_uldivmod>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4613      	mov	r3, r2
 8002e44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e4c:	d308      	bcc.n	8002e60 <UART_SetConfig+0x438>
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e54:	d204      	bcs.n	8002e60 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e0ce      	b.n	8002ffe <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e66:	e0ca      	b.n	8002ffe <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e70:	d166      	bne.n	8002f40 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8002e72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d827      	bhi.n	8002eca <UART_SetConfig+0x4a2>
 8002e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e80 <UART_SetConfig+0x458>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002ea5 	.word	0x08002ea5
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002ecb 	.word	0x08002ecb
 8002e90:	08002ebb 	.word	0x08002ebb
 8002e94:	08002ecb 	.word	0x08002ecb
 8002e98:	08002ecb 	.word	0x08002ecb
 8002e9c:	08002ecb 	.word	0x08002ecb
 8002ea0:	08002ec3 	.word	0x08002ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f7ff fc6c 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002eaa:	e014      	b.n	8002ed6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff fc7c 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8002eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002eb2:	e010      	b.n	8002ed6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ff0 <UART_SetConfig+0x5c8>)
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002eb8:	e00d      	b.n	8002ed6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eba:	f7ff fbaf 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8002ebe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ec0:	e009      	b.n	8002ed6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ec8:	e005      	b.n	8002ed6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8090 	beq.w	8002ffe <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee2:	4a44      	ldr	r2, [pc, #272]	@ (8002ff4 <UART_SetConfig+0x5cc>)
 8002ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ef0:	005a      	lsls	r2, r3, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	441a      	add	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	d916      	bls.n	8002f38 <UART_SetConfig+0x510>
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f10:	d212      	bcs.n	8002f38 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f023 030f 	bic.w	r3, r3, #15
 8002f1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	8bfb      	ldrh	r3, [r7, #30]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	8bfa      	ldrh	r2, [r7, #30]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	e062      	b.n	8002ffe <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f3e:	e05e      	b.n	8002ffe <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d828      	bhi.n	8002f9a <UART_SetConfig+0x572>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <UART_SetConfig+0x528>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f85 	.word	0x08002f85
 8002f5c:	08002f9b 	.word	0x08002f9b
 8002f60:	08002f8b 	.word	0x08002f8b
 8002f64:	08002f9b 	.word	0x08002f9b
 8002f68:	08002f9b 	.word	0x08002f9b
 8002f6c:	08002f9b 	.word	0x08002f9b
 8002f70:	08002f93 	.word	0x08002f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7ff fc04 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8002f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f7a:	e014      	b.n	8002fa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7ff fc14 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8002f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f82:	e010      	b.n	8002fa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <UART_SetConfig+0x5c8>)
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f88:	e00d      	b.n	8002fa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8a:	f7ff fb47 	bl	800261c <HAL_RCC_GetSysClockFreq>
 8002f8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f90:	e009      	b.n	8002fa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f98:	e005      	b.n	8002fa6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fa4:	bf00      	nop
    }

    if (pclk != 0U)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d028      	beq.n	8002ffe <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <UART_SetConfig+0x5cc>)
 8002fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	441a      	add	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	d910      	bls.n	8002ff8 <UART_SetConfig+0x5d0>
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fdc:	d20c      	bcs.n	8002ff8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	e009      	b.n	8002ffe <UART_SetConfig+0x5d6>
 8002fea:	bf00      	nop
 8002fec:	40008000 	.word	0x40008000
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	08003e8c 	.word	0x08003e8c
      }
      else
      {
        ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2201      	movs	r2, #1
 8003002:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2201      	movs	r2, #1
 800300a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2200      	movs	r2, #0
 8003012:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2200      	movs	r2, #0
 8003018:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800301a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800301e:	4618      	mov	r0, r3
 8003020:	3730      	adds	r7, #48	@ 0x30
 8003022:	46bd      	mov	sp, r7
 8003024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01a      	beq.n	800313e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003126:	d10a      	bne.n	800313e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b098      	sub	sp, #96	@ 0x60
 8003170:	af02      	add	r7, sp, #8
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800317c:	f7fe f812 	bl	80011a4 <HAL_GetTick>
 8003180:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d12f      	bne.n	80031f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f88e 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d022      	beq.n	80031f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031be:	653b      	str	r3, [r7, #80]	@ 0x50
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e6      	bne.n	80031aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e063      	b.n	80032b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d149      	bne.n	8003292 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	2200      	movs	r2, #0
 8003208:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f857 	bl	80032c0 <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d03c      	beq.n	8003292 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	623b      	str	r3, [r7, #32]
   return(result);
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800322c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003236:	633b      	str	r3, [r7, #48]	@ 0x30
 8003238:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800323c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e6      	bne.n	8003218 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3308      	adds	r3, #8
 8003250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	60fb      	str	r3, [r7, #12]
   return(result);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3308      	adds	r3, #8
 8003268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800326a:	61fa      	str	r2, [r7, #28]
 800326c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	617b      	str	r3, [r7, #20]
   return(result);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e012      	b.n	80032b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3758      	adds	r7, #88	@ 0x58
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d0:	e04f      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d04b      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fd ff63 	bl	80011a4 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e04e      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d037      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d034      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d031      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d110      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2208      	movs	r2, #8
 8003322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f838 	bl	800339a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2208      	movs	r2, #8
 800332e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e029      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800334c:	d111      	bne.n	8003372 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f81e 	bl	800339a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e00f      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	429a      	cmp	r2, r3
 800338e:	d0a0      	beq.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800339a:	b480      	push	{r7}
 800339c:	b095      	sub	sp, #84	@ 0x54
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e6      	bne.n	80033a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e3      	bne.n	80033d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d118      	bne.n	8003446 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	60bb      	str	r3, [r7, #8]
   return(result);
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f023 0310 	bic.w	r3, r3, #16
 8003428:	647b      	str	r3, [r7, #68]	@ 0x44
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6979      	ldr	r1, [r7, #20]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	613b      	str	r3, [r7, #16]
   return(result);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e6      	bne.n	8003414 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800345a:	bf00      	nop
 800345c:	3754      	adds	r7, #84	@ 0x54
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <std>:
 8003468:	2300      	movs	r3, #0
 800346a:	b510      	push	{r4, lr}
 800346c:	4604      	mov	r4, r0
 800346e:	6083      	str	r3, [r0, #8]
 8003470:	8181      	strh	r1, [r0, #12]
 8003472:	4619      	mov	r1, r3
 8003474:	6643      	str	r3, [r0, #100]	@ 0x64
 8003476:	81c2      	strh	r2, [r0, #14]
 8003478:	2208      	movs	r2, #8
 800347a:	6183      	str	r3, [r0, #24]
 800347c:	e9c0 3300 	strd	r3, r3, [r0]
 8003480:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003484:	305c      	adds	r0, #92	@ 0x5c
 8003486:	f000 f9e7 	bl	8003858 <memset>
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <std+0x58>)
 800348c:	6224      	str	r4, [r4, #32]
 800348e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <std+0x5c>)
 8003492:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <std+0x60>)
 8003496:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <std+0x64>)
 800349a:	6323      	str	r3, [r4, #48]	@ 0x30
 800349c:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <std+0x68>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d006      	beq.n	80034b0 <std+0x48>
 80034a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034a6:	4294      	cmp	r4, r2
 80034a8:	d002      	beq.n	80034b0 <std+0x48>
 80034aa:	33d0      	adds	r3, #208	@ 0xd0
 80034ac:	429c      	cmp	r4, r3
 80034ae:	d105      	bne.n	80034bc <std+0x54>
 80034b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034b8:	f000 ba46 	b.w	8003948 <__retarget_lock_init_recursive>
 80034bc:	bd10      	pop	{r4, pc}
 80034be:	bf00      	nop
 80034c0:	080036a9 	.word	0x080036a9
 80034c4:	080036cb 	.word	0x080036cb
 80034c8:	08003703 	.word	0x08003703
 80034cc:	08003727 	.word	0x08003727
 80034d0:	200001f8 	.word	0x200001f8

080034d4 <stdio_exit_handler>:
 80034d4:	4a02      	ldr	r2, [pc, #8]	@ (80034e0 <stdio_exit_handler+0xc>)
 80034d6:	4903      	ldr	r1, [pc, #12]	@ (80034e4 <stdio_exit_handler+0x10>)
 80034d8:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <stdio_exit_handler+0x14>)
 80034da:	f000 b869 	b.w	80035b0 <_fwalk_sglue>
 80034de:	bf00      	nop
 80034e0:	20000034 	.word	0x20000034
 80034e4:	08003c49 	.word	0x08003c49
 80034e8:	20000044 	.word	0x20000044

080034ec <cleanup_stdio>:
 80034ec:	6841      	ldr	r1, [r0, #4]
 80034ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <cleanup_stdio+0x34>)
 80034f0:	4299      	cmp	r1, r3
 80034f2:	b510      	push	{r4, lr}
 80034f4:	4604      	mov	r4, r0
 80034f6:	d001      	beq.n	80034fc <cleanup_stdio+0x10>
 80034f8:	f000 fba6 	bl	8003c48 <_fflush_r>
 80034fc:	68a1      	ldr	r1, [r4, #8]
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <cleanup_stdio+0x38>)
 8003500:	4299      	cmp	r1, r3
 8003502:	d002      	beq.n	800350a <cleanup_stdio+0x1e>
 8003504:	4620      	mov	r0, r4
 8003506:	f000 fb9f 	bl	8003c48 <_fflush_r>
 800350a:	68e1      	ldr	r1, [r4, #12]
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <cleanup_stdio+0x3c>)
 800350e:	4299      	cmp	r1, r3
 8003510:	d004      	beq.n	800351c <cleanup_stdio+0x30>
 8003512:	4620      	mov	r0, r4
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003518:	f000 bb96 	b.w	8003c48 <_fflush_r>
 800351c:	bd10      	pop	{r4, pc}
 800351e:	bf00      	nop
 8003520:	200001f8 	.word	0x200001f8
 8003524:	20000260 	.word	0x20000260
 8003528:	200002c8 	.word	0x200002c8

0800352c <global_stdio_init.part.0>:
 800352c:	b510      	push	{r4, lr}
 800352e:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <global_stdio_init.part.0+0x30>)
 8003530:	2104      	movs	r1, #4
 8003532:	4c0b      	ldr	r4, [pc, #44]	@ (8003560 <global_stdio_init.part.0+0x34>)
 8003534:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <global_stdio_init.part.0+0x38>)
 8003536:	4620      	mov	r0, r4
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	f7ff ff94 	bl	8003468 <std>
 8003540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003544:	2201      	movs	r2, #1
 8003546:	2109      	movs	r1, #9
 8003548:	f7ff ff8e 	bl	8003468 <std>
 800354c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003550:	2202      	movs	r2, #2
 8003552:	2112      	movs	r1, #18
 8003554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003558:	f7ff bf86 	b.w	8003468 <std>
 800355c:	20000330 	.word	0x20000330
 8003560:	200001f8 	.word	0x200001f8
 8003564:	080034d5 	.word	0x080034d5

08003568 <__sfp_lock_acquire>:
 8003568:	4801      	ldr	r0, [pc, #4]	@ (8003570 <__sfp_lock_acquire+0x8>)
 800356a:	f000 b9ee 	b.w	800394a <__retarget_lock_acquire_recursive>
 800356e:	bf00      	nop
 8003570:	20000339 	.word	0x20000339

08003574 <__sfp_lock_release>:
 8003574:	4801      	ldr	r0, [pc, #4]	@ (800357c <__sfp_lock_release+0x8>)
 8003576:	f000 b9e9 	b.w	800394c <__retarget_lock_release_recursive>
 800357a:	bf00      	nop
 800357c:	20000339 	.word	0x20000339

08003580 <__sinit>:
 8003580:	b510      	push	{r4, lr}
 8003582:	4604      	mov	r4, r0
 8003584:	f7ff fff0 	bl	8003568 <__sfp_lock_acquire>
 8003588:	6a23      	ldr	r3, [r4, #32]
 800358a:	b11b      	cbz	r3, 8003594 <__sinit+0x14>
 800358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003590:	f7ff bff0 	b.w	8003574 <__sfp_lock_release>
 8003594:	4b04      	ldr	r3, [pc, #16]	@ (80035a8 <__sinit+0x28>)
 8003596:	6223      	str	r3, [r4, #32]
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <__sinit+0x2c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f5      	bne.n	800358c <__sinit+0xc>
 80035a0:	f7ff ffc4 	bl	800352c <global_stdio_init.part.0>
 80035a4:	e7f2      	b.n	800358c <__sinit+0xc>
 80035a6:	bf00      	nop
 80035a8:	080034ed 	.word	0x080034ed
 80035ac:	20000330 	.word	0x20000330

080035b0 <_fwalk_sglue>:
 80035b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035b4:	4607      	mov	r7, r0
 80035b6:	4688      	mov	r8, r1
 80035b8:	4614      	mov	r4, r2
 80035ba:	2600      	movs	r6, #0
 80035bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035c0:	f1b9 0901 	subs.w	r9, r9, #1
 80035c4:	d505      	bpl.n	80035d2 <_fwalk_sglue+0x22>
 80035c6:	6824      	ldr	r4, [r4, #0]
 80035c8:	2c00      	cmp	r4, #0
 80035ca:	d1f7      	bne.n	80035bc <_fwalk_sglue+0xc>
 80035cc:	4630      	mov	r0, r6
 80035ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035d2:	89ab      	ldrh	r3, [r5, #12]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d907      	bls.n	80035e8 <_fwalk_sglue+0x38>
 80035d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035dc:	3301      	adds	r3, #1
 80035de:	d003      	beq.n	80035e8 <_fwalk_sglue+0x38>
 80035e0:	4629      	mov	r1, r5
 80035e2:	4638      	mov	r0, r7
 80035e4:	47c0      	blx	r8
 80035e6:	4306      	orrs	r6, r0
 80035e8:	3568      	adds	r5, #104	@ 0x68
 80035ea:	e7e9      	b.n	80035c0 <_fwalk_sglue+0x10>

080035ec <_puts_r>:
 80035ec:	6a03      	ldr	r3, [r0, #32]
 80035ee:	b570      	push	{r4, r5, r6, lr}
 80035f0:	4605      	mov	r5, r0
 80035f2:	460e      	mov	r6, r1
 80035f4:	6884      	ldr	r4, [r0, #8]
 80035f6:	b90b      	cbnz	r3, 80035fc <_puts_r+0x10>
 80035f8:	f7ff ffc2 	bl	8003580 <__sinit>
 80035fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035fe:	07db      	lsls	r3, r3, #31
 8003600:	d405      	bmi.n	800360e <_puts_r+0x22>
 8003602:	89a3      	ldrh	r3, [r4, #12]
 8003604:	0598      	lsls	r0, r3, #22
 8003606:	d402      	bmi.n	800360e <_puts_r+0x22>
 8003608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800360a:	f000 f99e 	bl	800394a <__retarget_lock_acquire_recursive>
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	0719      	lsls	r1, r3, #28
 8003612:	d502      	bpl.n	800361a <_puts_r+0x2e>
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d135      	bne.n	8003686 <_puts_r+0x9a>
 800361a:	4621      	mov	r1, r4
 800361c:	4628      	mov	r0, r5
 800361e:	f000 f8c5 	bl	80037ac <__swsetup_r>
 8003622:	b380      	cbz	r0, 8003686 <_puts_r+0x9a>
 8003624:	f04f 35ff 	mov.w	r5, #4294967295
 8003628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800362a:	07da      	lsls	r2, r3, #31
 800362c:	d405      	bmi.n	800363a <_puts_r+0x4e>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	059b      	lsls	r3, r3, #22
 8003632:	d402      	bmi.n	800363a <_puts_r+0x4e>
 8003634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003636:	f000 f989 	bl	800394c <__retarget_lock_release_recursive>
 800363a:	4628      	mov	r0, r5
 800363c:	bd70      	pop	{r4, r5, r6, pc}
 800363e:	2b00      	cmp	r3, #0
 8003640:	da04      	bge.n	800364c <_puts_r+0x60>
 8003642:	69a2      	ldr	r2, [r4, #24]
 8003644:	429a      	cmp	r2, r3
 8003646:	dc17      	bgt.n	8003678 <_puts_r+0x8c>
 8003648:	290a      	cmp	r1, #10
 800364a:	d015      	beq.n	8003678 <_puts_r+0x8c>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	6022      	str	r2, [r4, #0]
 8003652:	7019      	strb	r1, [r3, #0]
 8003654:	68a3      	ldr	r3, [r4, #8]
 8003656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800365a:	3b01      	subs	r3, #1
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	2900      	cmp	r1, #0
 8003660:	d1ed      	bne.n	800363e <_puts_r+0x52>
 8003662:	2b00      	cmp	r3, #0
 8003664:	da11      	bge.n	800368a <_puts_r+0x9e>
 8003666:	4622      	mov	r2, r4
 8003668:	210a      	movs	r1, #10
 800366a:	4628      	mov	r0, r5
 800366c:	f000 f85f 	bl	800372e <__swbuf_r>
 8003670:	3001      	adds	r0, #1
 8003672:	d0d7      	beq.n	8003624 <_puts_r+0x38>
 8003674:	250a      	movs	r5, #10
 8003676:	e7d7      	b.n	8003628 <_puts_r+0x3c>
 8003678:	4622      	mov	r2, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 f857 	bl	800372e <__swbuf_r>
 8003680:	3001      	adds	r0, #1
 8003682:	d1e7      	bne.n	8003654 <_puts_r+0x68>
 8003684:	e7ce      	b.n	8003624 <_puts_r+0x38>
 8003686:	3e01      	subs	r6, #1
 8003688:	e7e4      	b.n	8003654 <_puts_r+0x68>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	6022      	str	r2, [r4, #0]
 8003690:	220a      	movs	r2, #10
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e7ee      	b.n	8003674 <_puts_r+0x88>
	...

08003698 <puts>:
 8003698:	4b02      	ldr	r3, [pc, #8]	@ (80036a4 <puts+0xc>)
 800369a:	4601      	mov	r1, r0
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	f7ff bfa5 	b.w	80035ec <_puts_r>
 80036a2:	bf00      	nop
 80036a4:	20000040 	.word	0x20000040

080036a8 <__sread>:
 80036a8:	b510      	push	{r4, lr}
 80036aa:	460c      	mov	r4, r1
 80036ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b0:	f000 f8fc 	bl	80038ac <_read_r>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	bfab      	itete	ge
 80036b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036ba:	89a3      	ldrhlt	r3, [r4, #12]
 80036bc:	181b      	addge	r3, r3, r0
 80036be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036c2:	bfac      	ite	ge
 80036c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036c6:	81a3      	strhlt	r3, [r4, #12]
 80036c8:	bd10      	pop	{r4, pc}

080036ca <__swrite>:
 80036ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ce:	461f      	mov	r7, r3
 80036d0:	898b      	ldrh	r3, [r1, #12]
 80036d2:	4605      	mov	r5, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	05db      	lsls	r3, r3, #23
 80036d8:	4616      	mov	r6, r2
 80036da:	d505      	bpl.n	80036e8 <__swrite+0x1e>
 80036dc:	2302      	movs	r3, #2
 80036de:	2200      	movs	r2, #0
 80036e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e4:	f000 f8d0 	bl	8003888 <_lseek_r>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	4632      	mov	r2, r6
 80036ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036f0:	4628      	mov	r0, r5
 80036f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	463b      	mov	r3, r7
 80036fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fe:	f000 b8e7 	b.w	80038d0 <_write_r>

08003702 <__sseek>:
 8003702:	b510      	push	{r4, lr}
 8003704:	460c      	mov	r4, r1
 8003706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370a:	f000 f8bd 	bl	8003888 <_lseek_r>
 800370e:	1c43      	adds	r3, r0, #1
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	bf15      	itete	ne
 8003714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800371a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800371e:	81a3      	strheq	r3, [r4, #12]
 8003720:	bf18      	it	ne
 8003722:	81a3      	strhne	r3, [r4, #12]
 8003724:	bd10      	pop	{r4, pc}

08003726 <__sclose>:
 8003726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372a:	f000 b89d 	b.w	8003868 <_close_r>

0800372e <__swbuf_r>:
 800372e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003730:	460e      	mov	r6, r1
 8003732:	4614      	mov	r4, r2
 8003734:	4605      	mov	r5, r0
 8003736:	b118      	cbz	r0, 8003740 <__swbuf_r+0x12>
 8003738:	6a03      	ldr	r3, [r0, #32]
 800373a:	b90b      	cbnz	r3, 8003740 <__swbuf_r+0x12>
 800373c:	f7ff ff20 	bl	8003580 <__sinit>
 8003740:	69a3      	ldr	r3, [r4, #24]
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	071a      	lsls	r2, r3, #28
 8003748:	d501      	bpl.n	800374e <__swbuf_r+0x20>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	b943      	cbnz	r3, 8003760 <__swbuf_r+0x32>
 800374e:	4621      	mov	r1, r4
 8003750:	4628      	mov	r0, r5
 8003752:	f000 f82b 	bl	80037ac <__swsetup_r>
 8003756:	b118      	cbz	r0, 8003760 <__swbuf_r+0x32>
 8003758:	f04f 37ff 	mov.w	r7, #4294967295
 800375c:	4638      	mov	r0, r7
 800375e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	b2f6      	uxtb	r6, r6
 8003764:	6922      	ldr	r2, [r4, #16]
 8003766:	4637      	mov	r7, r6
 8003768:	1a98      	subs	r0, r3, r2
 800376a:	6963      	ldr	r3, [r4, #20]
 800376c:	4283      	cmp	r3, r0
 800376e:	dc05      	bgt.n	800377c <__swbuf_r+0x4e>
 8003770:	4621      	mov	r1, r4
 8003772:	4628      	mov	r0, r5
 8003774:	f000 fa68 	bl	8003c48 <_fflush_r>
 8003778:	2800      	cmp	r0, #0
 800377a:	d1ed      	bne.n	8003758 <__swbuf_r+0x2a>
 800377c:	68a3      	ldr	r3, [r4, #8]
 800377e:	3b01      	subs	r3, #1
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	6022      	str	r2, [r4, #0]
 8003788:	701e      	strb	r6, [r3, #0]
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	6962      	ldr	r2, [r4, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d004      	beq.n	800379c <__swbuf_r+0x6e>
 8003792:	89a3      	ldrh	r3, [r4, #12]
 8003794:	07db      	lsls	r3, r3, #31
 8003796:	d5e1      	bpl.n	800375c <__swbuf_r+0x2e>
 8003798:	2e0a      	cmp	r6, #10
 800379a:	d1df      	bne.n	800375c <__swbuf_r+0x2e>
 800379c:	4621      	mov	r1, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 fa52 	bl	8003c48 <_fflush_r>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d0d9      	beq.n	800375c <__swbuf_r+0x2e>
 80037a8:	e7d6      	b.n	8003758 <__swbuf_r+0x2a>
	...

080037ac <__swsetup_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4b29      	ldr	r3, [pc, #164]	@ (8003854 <__swsetup_r+0xa8>)
 80037b0:	4605      	mov	r5, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	b118      	cbz	r0, 80037c0 <__swsetup_r+0x14>
 80037b8:	6a03      	ldr	r3, [r0, #32]
 80037ba:	b90b      	cbnz	r3, 80037c0 <__swsetup_r+0x14>
 80037bc:	f7ff fee0 	bl	8003580 <__sinit>
 80037c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c4:	0719      	lsls	r1, r3, #28
 80037c6:	d422      	bmi.n	800380e <__swsetup_r+0x62>
 80037c8:	06da      	lsls	r2, r3, #27
 80037ca:	d407      	bmi.n	80037dc <__swsetup_r+0x30>
 80037cc:	2209      	movs	r2, #9
 80037ce:	602a      	str	r2, [r5, #0]
 80037d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	81a3      	strh	r3, [r4, #12]
 80037da:	e033      	b.n	8003844 <__swsetup_r+0x98>
 80037dc:	0758      	lsls	r0, r3, #29
 80037de:	d512      	bpl.n	8003806 <__swsetup_r+0x5a>
 80037e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037e2:	b141      	cbz	r1, 80037f6 <__swsetup_r+0x4a>
 80037e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037e8:	4299      	cmp	r1, r3
 80037ea:	d002      	beq.n	80037f2 <__swsetup_r+0x46>
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 f8af 	bl	8003950 <_free_r>
 80037f2:	2300      	movs	r3, #0
 80037f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	2300      	movs	r3, #0
 8003800:	6063      	str	r3, [r4, #4]
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	f043 0308 	orr.w	r3, r3, #8
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	b94b      	cbnz	r3, 8003826 <__swsetup_r+0x7a>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381c:	d003      	beq.n	8003826 <__swsetup_r+0x7a>
 800381e:	4621      	mov	r1, r4
 8003820:	4628      	mov	r0, r5
 8003822:	f000 fa5e 	bl	8003ce2 <__smakebuf_r>
 8003826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800382a:	f013 0201 	ands.w	r2, r3, #1
 800382e:	d00a      	beq.n	8003846 <__swsetup_r+0x9a>
 8003830:	2200      	movs	r2, #0
 8003832:	60a2      	str	r2, [r4, #8]
 8003834:	6962      	ldr	r2, [r4, #20]
 8003836:	4252      	negs	r2, r2
 8003838:	61a2      	str	r2, [r4, #24]
 800383a:	6922      	ldr	r2, [r4, #16]
 800383c:	b942      	cbnz	r2, 8003850 <__swsetup_r+0xa4>
 800383e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003842:	d1c5      	bne.n	80037d0 <__swsetup_r+0x24>
 8003844:	bd38      	pop	{r3, r4, r5, pc}
 8003846:	0799      	lsls	r1, r3, #30
 8003848:	bf58      	it	pl
 800384a:	6962      	ldrpl	r2, [r4, #20]
 800384c:	60a2      	str	r2, [r4, #8]
 800384e:	e7f4      	b.n	800383a <__swsetup_r+0x8e>
 8003850:	2000      	movs	r0, #0
 8003852:	e7f7      	b.n	8003844 <__swsetup_r+0x98>
 8003854:	20000040 	.word	0x20000040

08003858 <memset>:
 8003858:	4402      	add	r2, r0
 800385a:	4603      	mov	r3, r0
 800385c:	4293      	cmp	r3, r2
 800385e:	d100      	bne.n	8003862 <memset+0xa>
 8003860:	4770      	bx	lr
 8003862:	f803 1b01 	strb.w	r1, [r3], #1
 8003866:	e7f9      	b.n	800385c <memset+0x4>

08003868 <_close_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	2300      	movs	r3, #0
 800386c:	4d05      	ldr	r5, [pc, #20]	@ (8003884 <_close_r+0x1c>)
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	f7fd f82f 	bl	80008d6 <_close>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_close_r+0x1a>
 800387c:	682b      	ldr	r3, [r5, #0]
 800387e:	b103      	cbz	r3, 8003882 <_close_r+0x1a>
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	20000334 	.word	0x20000334

08003888 <_lseek_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	4604      	mov	r4, r0
 800388c:	4d06      	ldr	r5, [pc, #24]	@ (80038a8 <_lseek_r+0x20>)
 800388e:	4608      	mov	r0, r1
 8003890:	4611      	mov	r1, r2
 8003892:	2200      	movs	r2, #0
 8003894:	602a      	str	r2, [r5, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	f7fd f844 	bl	8000924 <_lseek>
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d102      	bne.n	80038a6 <_lseek_r+0x1e>
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	b103      	cbz	r3, 80038a6 <_lseek_r+0x1e>
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	20000334 	.word	0x20000334

080038ac <_read_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	4d06      	ldr	r5, [pc, #24]	@ (80038cc <_read_r+0x20>)
 80038b2:	4608      	mov	r0, r1
 80038b4:	4611      	mov	r1, r2
 80038b6:	2200      	movs	r2, #0
 80038b8:	602a      	str	r2, [r5, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7fc ffee 	bl	800089c <_read>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_read_r+0x1e>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_read_r+0x1e>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	20000334 	.word	0x20000334

080038d0 <_write_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4604      	mov	r4, r0
 80038d4:	4d06      	ldr	r5, [pc, #24]	@ (80038f0 <_write_r+0x20>)
 80038d6:	4608      	mov	r0, r1
 80038d8:	4611      	mov	r1, r2
 80038da:	2200      	movs	r2, #0
 80038dc:	602a      	str	r2, [r5, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	f7fc ff60 	bl	80007a4 <_write>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d102      	bne.n	80038ee <_write_r+0x1e>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	b103      	cbz	r3, 80038ee <_write_r+0x1e>
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	20000334 	.word	0x20000334

080038f4 <__errno>:
 80038f4:	4b01      	ldr	r3, [pc, #4]	@ (80038fc <__errno+0x8>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000040 	.word	0x20000040

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4d0d      	ldr	r5, [pc, #52]	@ (8003938 <__libc_init_array+0x38>)
 8003904:	2600      	movs	r6, #0
 8003906:	4c0d      	ldr	r4, [pc, #52]	@ (800393c <__libc_init_array+0x3c>)
 8003908:	1b64      	subs	r4, r4, r5
 800390a:	10a4      	asrs	r4, r4, #2
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4d0b      	ldr	r5, [pc, #44]	@ (8003940 <__libc_init_array+0x40>)
 8003912:	2600      	movs	r6, #0
 8003914:	4c0b      	ldr	r4, [pc, #44]	@ (8003944 <__libc_init_array+0x44>)
 8003916:	f000 fa53 	bl	8003dc0 <_init>
 800391a:	1b64      	subs	r4, r4, r5
 800391c:	10a4      	asrs	r4, r4, #2
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f855 3b04 	ldr.w	r3, [r5], #4
 8003928:	3601      	adds	r6, #1
 800392a:	4798      	blx	r3
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003932:	3601      	adds	r6, #1
 8003934:	4798      	blx	r3
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08003eac 	.word	0x08003eac
 800393c:	08003eac 	.word	0x08003eac
 8003940:	08003eac 	.word	0x08003eac
 8003944:	08003eb0 	.word	0x08003eb0

08003948 <__retarget_lock_init_recursive>:
 8003948:	4770      	bx	lr

0800394a <__retarget_lock_acquire_recursive>:
 800394a:	4770      	bx	lr

0800394c <__retarget_lock_release_recursive>:
 800394c:	4770      	bx	lr
	...

08003950 <_free_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4605      	mov	r5, r0
 8003954:	2900      	cmp	r1, #0
 8003956:	d041      	beq.n	80039dc <_free_r+0x8c>
 8003958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395c:	1f0c      	subs	r4, r1, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfb8      	it	lt
 8003962:	18e4      	addlt	r4, r4, r3
 8003964:	f000 f8e0 	bl	8003b28 <__malloc_lock>
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <_free_r+0x90>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	b933      	cbnz	r3, 800397c <_free_r+0x2c>
 800396e:	6063      	str	r3, [r4, #4]
 8003970:	6014      	str	r4, [r2, #0]
 8003972:	4628      	mov	r0, r5
 8003974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003978:	f000 b8dc 	b.w	8003b34 <__malloc_unlock>
 800397c:	42a3      	cmp	r3, r4
 800397e:	d908      	bls.n	8003992 <_free_r+0x42>
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	1821      	adds	r1, r4, r0
 8003984:	428b      	cmp	r3, r1
 8003986:	bf01      	itttt	eq
 8003988:	6819      	ldreq	r1, [r3, #0]
 800398a:	685b      	ldreq	r3, [r3, #4]
 800398c:	1809      	addeq	r1, r1, r0
 800398e:	6021      	streq	r1, [r4, #0]
 8003990:	e7ed      	b.n	800396e <_free_r+0x1e>
 8003992:	461a      	mov	r2, r3
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	b10b      	cbz	r3, 800399c <_free_r+0x4c>
 8003998:	42a3      	cmp	r3, r4
 800399a:	d9fa      	bls.n	8003992 <_free_r+0x42>
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	1850      	adds	r0, r2, r1
 80039a0:	42a0      	cmp	r0, r4
 80039a2:	d10b      	bne.n	80039bc <_free_r+0x6c>
 80039a4:	6820      	ldr	r0, [r4, #0]
 80039a6:	4401      	add	r1, r0
 80039a8:	1850      	adds	r0, r2, r1
 80039aa:	6011      	str	r1, [r2, #0]
 80039ac:	4283      	cmp	r3, r0
 80039ae:	d1e0      	bne.n	8003972 <_free_r+0x22>
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4408      	add	r0, r1
 80039b6:	6053      	str	r3, [r2, #4]
 80039b8:	6010      	str	r0, [r2, #0]
 80039ba:	e7da      	b.n	8003972 <_free_r+0x22>
 80039bc:	d902      	bls.n	80039c4 <_free_r+0x74>
 80039be:	230c      	movs	r3, #12
 80039c0:	602b      	str	r3, [r5, #0]
 80039c2:	e7d6      	b.n	8003972 <_free_r+0x22>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	1821      	adds	r1, r4, r0
 80039c8:	428b      	cmp	r3, r1
 80039ca:	bf02      	ittt	eq
 80039cc:	6819      	ldreq	r1, [r3, #0]
 80039ce:	685b      	ldreq	r3, [r3, #4]
 80039d0:	1809      	addeq	r1, r1, r0
 80039d2:	6063      	str	r3, [r4, #4]
 80039d4:	bf08      	it	eq
 80039d6:	6021      	streq	r1, [r4, #0]
 80039d8:	6054      	str	r4, [r2, #4]
 80039da:	e7ca      	b.n	8003972 <_free_r+0x22>
 80039dc:	bd38      	pop	{r3, r4, r5, pc}
 80039de:	bf00      	nop
 80039e0:	20000340 	.word	0x20000340

080039e4 <sbrk_aligned>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003a24 <sbrk_aligned+0x40>)
 80039e8:	460c      	mov	r4, r1
 80039ea:	4605      	mov	r5, r0
 80039ec:	6831      	ldr	r1, [r6, #0]
 80039ee:	b911      	cbnz	r1, 80039f6 <sbrk_aligned+0x12>
 80039f0:	f000 f9d6 	bl	8003da0 <_sbrk_r>
 80039f4:	6030      	str	r0, [r6, #0]
 80039f6:	4621      	mov	r1, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	f000 f9d1 	bl	8003da0 <_sbrk_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d103      	bne.n	8003a0a <sbrk_aligned+0x26>
 8003a02:	f04f 34ff 	mov.w	r4, #4294967295
 8003a06:	4620      	mov	r0, r4
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	1cc4      	adds	r4, r0, #3
 8003a0c:	f024 0403 	bic.w	r4, r4, #3
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d0f8      	beq.n	8003a06 <sbrk_aligned+0x22>
 8003a14:	1a21      	subs	r1, r4, r0
 8003a16:	4628      	mov	r0, r5
 8003a18:	f000 f9c2 	bl	8003da0 <_sbrk_r>
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d1f2      	bne.n	8003a06 <sbrk_aligned+0x22>
 8003a20:	e7ef      	b.n	8003a02 <sbrk_aligned+0x1e>
 8003a22:	bf00      	nop
 8003a24:	2000033c 	.word	0x2000033c

08003a28 <_malloc_r>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	1ccd      	adds	r5, r1, #3
 8003a2e:	4606      	mov	r6, r0
 8003a30:	f025 0503 	bic.w	r5, r5, #3
 8003a34:	3508      	adds	r5, #8
 8003a36:	2d0c      	cmp	r5, #12
 8003a38:	bf38      	it	cc
 8003a3a:	250c      	movcc	r5, #12
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	db01      	blt.n	8003a44 <_malloc_r+0x1c>
 8003a40:	42a9      	cmp	r1, r5
 8003a42:	d904      	bls.n	8003a4e <_malloc_r+0x26>
 8003a44:	230c      	movs	r3, #12
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	2000      	movs	r0, #0
 8003a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b24 <_malloc_r+0xfc>
 8003a52:	f000 f869 	bl	8003b28 <__malloc_lock>
 8003a56:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	bb44      	cbnz	r4, 8003ab0 <_malloc_r+0x88>
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff ffbf 	bl	80039e4 <sbrk_aligned>
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	4604      	mov	r4, r0
 8003a6a:	d158      	bne.n	8003b1e <_malloc_r+0xf6>
 8003a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a70:	4627      	mov	r7, r4
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	d143      	bne.n	8003afe <_malloc_r+0xd6>
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	d04b      	beq.n	8003b12 <_malloc_r+0xea>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	4630      	mov	r0, r6
 8003a80:	eb04 0903 	add.w	r9, r4, r3
 8003a84:	f000 f98c 	bl	8003da0 <_sbrk_r>
 8003a88:	4581      	cmp	r9, r0
 8003a8a:	d142      	bne.n	8003b12 <_malloc_r+0xea>
 8003a8c:	6821      	ldr	r1, [r4, #0]
 8003a8e:	4630      	mov	r0, r6
 8003a90:	1a6d      	subs	r5, r5, r1
 8003a92:	4629      	mov	r1, r5
 8003a94:	f7ff ffa6 	bl	80039e4 <sbrk_aligned>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d03a      	beq.n	8003b12 <_malloc_r+0xea>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	442b      	add	r3, r5
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	bb62      	cbnz	r2, 8003b04 <_malloc_r+0xdc>
 8003aaa:	f8c8 7000 	str.w	r7, [r8]
 8003aae:	e00f      	b.n	8003ad0 <_malloc_r+0xa8>
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	1b52      	subs	r2, r2, r5
 8003ab4:	d420      	bmi.n	8003af8 <_malloc_r+0xd0>
 8003ab6:	2a0b      	cmp	r2, #11
 8003ab8:	d917      	bls.n	8003aea <_malloc_r+0xc2>
 8003aba:	1961      	adds	r1, r4, r5
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	6025      	str	r5, [r4, #0]
 8003ac0:	bf18      	it	ne
 8003ac2:	6059      	strne	r1, [r3, #4]
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	bf08      	it	eq
 8003ac8:	f8c8 1000 	streq.w	r1, [r8]
 8003acc:	5162      	str	r2, [r4, r5]
 8003ace:	604b      	str	r3, [r1, #4]
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f000 f82f 	bl	8003b34 <__malloc_unlock>
 8003ad6:	f104 000b 	add.w	r0, r4, #11
 8003ada:	1d23      	adds	r3, r4, #4
 8003adc:	f020 0007 	bic.w	r0, r0, #7
 8003ae0:	1ac2      	subs	r2, r0, r3
 8003ae2:	bf1c      	itt	ne
 8003ae4:	1a1b      	subne	r3, r3, r0
 8003ae6:	50a3      	strne	r3, [r4, r2]
 8003ae8:	e7af      	b.n	8003a4a <_malloc_r+0x22>
 8003aea:	6862      	ldr	r2, [r4, #4]
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	bf0c      	ite	eq
 8003af0:	f8c8 2000 	streq.w	r2, [r8]
 8003af4:	605a      	strne	r2, [r3, #4]
 8003af6:	e7eb      	b.n	8003ad0 <_malloc_r+0xa8>
 8003af8:	4623      	mov	r3, r4
 8003afa:	6864      	ldr	r4, [r4, #4]
 8003afc:	e7ae      	b.n	8003a5c <_malloc_r+0x34>
 8003afe:	463c      	mov	r4, r7
 8003b00:	687f      	ldr	r7, [r7, #4]
 8003b02:	e7b6      	b.n	8003a72 <_malloc_r+0x4a>
 8003b04:	461a      	mov	r2, r3
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d1fb      	bne.n	8003b04 <_malloc_r+0xdc>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6053      	str	r3, [r2, #4]
 8003b10:	e7de      	b.n	8003ad0 <_malloc_r+0xa8>
 8003b12:	230c      	movs	r3, #12
 8003b14:	4630      	mov	r0, r6
 8003b16:	6033      	str	r3, [r6, #0]
 8003b18:	f000 f80c 	bl	8003b34 <__malloc_unlock>
 8003b1c:	e794      	b.n	8003a48 <_malloc_r+0x20>
 8003b1e:	6005      	str	r5, [r0, #0]
 8003b20:	e7d6      	b.n	8003ad0 <_malloc_r+0xa8>
 8003b22:	bf00      	nop
 8003b24:	20000340 	.word	0x20000340

08003b28 <__malloc_lock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	@ (8003b30 <__malloc_lock+0x8>)
 8003b2a:	f7ff bf0e 	b.w	800394a <__retarget_lock_acquire_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000338 	.word	0x20000338

08003b34 <__malloc_unlock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	@ (8003b3c <__malloc_unlock+0x8>)
 8003b36:	f7ff bf09 	b.w	800394c <__retarget_lock_release_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000338 	.word	0x20000338

08003b40 <__sflush_r>:
 8003b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b48:	0716      	lsls	r6, r2, #28
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	d454      	bmi.n	8003bfa <__sflush_r+0xba>
 8003b50:	684b      	ldr	r3, [r1, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dc02      	bgt.n	8003b5c <__sflush_r+0x1c>
 8003b56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	dd48      	ble.n	8003bee <__sflush_r+0xae>
 8003b5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b5e:	2e00      	cmp	r6, #0
 8003b60:	d045      	beq.n	8003bee <__sflush_r+0xae>
 8003b62:	2300      	movs	r3, #0
 8003b64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b68:	682f      	ldr	r7, [r5, #0]
 8003b6a:	6a21      	ldr	r1, [r4, #32]
 8003b6c:	602b      	str	r3, [r5, #0]
 8003b6e:	d030      	beq.n	8003bd2 <__sflush_r+0x92>
 8003b70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	0759      	lsls	r1, r3, #29
 8003b76:	d505      	bpl.n	8003b84 <__sflush_r+0x44>
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	1ad2      	subs	r2, r2, r3
 8003b7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b7e:	b10b      	cbz	r3, 8003b84 <__sflush_r+0x44>
 8003b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	2300      	movs	r3, #0
 8003b86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b88:	6a21      	ldr	r1, [r4, #32]
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	47b0      	blx	r6
 8003b8e:	1c43      	adds	r3, r0, #1
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	d106      	bne.n	8003ba2 <__sflush_r+0x62>
 8003b94:	6829      	ldr	r1, [r5, #0]
 8003b96:	291d      	cmp	r1, #29
 8003b98:	d82b      	bhi.n	8003bf2 <__sflush_r+0xb2>
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c44 <__sflush_r+0x104>)
 8003b9c:	40ca      	lsrs	r2, r1
 8003b9e:	07d6      	lsls	r6, r2, #31
 8003ba0:	d527      	bpl.n	8003bf2 <__sflush_r+0xb2>
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	04d9      	lsls	r1, r3, #19
 8003ba6:	6062      	str	r2, [r4, #4]
 8003ba8:	6922      	ldr	r2, [r4, #16]
 8003baa:	6022      	str	r2, [r4, #0]
 8003bac:	d504      	bpl.n	8003bb8 <__sflush_r+0x78>
 8003bae:	1c42      	adds	r2, r0, #1
 8003bb0:	d101      	bne.n	8003bb6 <__sflush_r+0x76>
 8003bb2:	682b      	ldr	r3, [r5, #0]
 8003bb4:	b903      	cbnz	r3, 8003bb8 <__sflush_r+0x78>
 8003bb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bba:	602f      	str	r7, [r5, #0]
 8003bbc:	b1b9      	cbz	r1, 8003bee <__sflush_r+0xae>
 8003bbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	d002      	beq.n	8003bcc <__sflush_r+0x8c>
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f7ff fec2 	bl	8003950 <_free_r>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bd0:	e00d      	b.n	8003bee <__sflush_r+0xae>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b0      	blx	r6
 8003bd8:	4602      	mov	r2, r0
 8003bda:	1c50      	adds	r0, r2, #1
 8003bdc:	d1c9      	bne.n	8003b72 <__sflush_r+0x32>
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0c6      	beq.n	8003b72 <__sflush_r+0x32>
 8003be4:	2b1d      	cmp	r3, #29
 8003be6:	d001      	beq.n	8003bec <__sflush_r+0xac>
 8003be8:	2b16      	cmp	r3, #22
 8003bea:	d11d      	bne.n	8003c28 <__sflush_r+0xe8>
 8003bec:	602f      	str	r7, [r5, #0]
 8003bee:	2000      	movs	r0, #0
 8003bf0:	e021      	b.n	8003c36 <__sflush_r+0xf6>
 8003bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bf6:	b21b      	sxth	r3, r3
 8003bf8:	e01a      	b.n	8003c30 <__sflush_r+0xf0>
 8003bfa:	690f      	ldr	r7, [r1, #16]
 8003bfc:	2f00      	cmp	r7, #0
 8003bfe:	d0f6      	beq.n	8003bee <__sflush_r+0xae>
 8003c00:	0793      	lsls	r3, r2, #30
 8003c02:	680e      	ldr	r6, [r1, #0]
 8003c04:	600f      	str	r7, [r1, #0]
 8003c06:	bf0c      	ite	eq
 8003c08:	694b      	ldreq	r3, [r1, #20]
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	eba6 0807 	sub.w	r8, r6, r7
 8003c10:	608b      	str	r3, [r1, #8]
 8003c12:	f1b8 0f00 	cmp.w	r8, #0
 8003c16:	ddea      	ble.n	8003bee <__sflush_r+0xae>
 8003c18:	4643      	mov	r3, r8
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	6a21      	ldr	r1, [r4, #32]
 8003c1e:	4628      	mov	r0, r5
 8003c20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c22:	47b0      	blx	r6
 8003c24:	2800      	cmp	r0, #0
 8003c26:	dc08      	bgt.n	8003c3a <__sflush_r+0xfa>
 8003c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c3a:	4407      	add	r7, r0
 8003c3c:	eba8 0800 	sub.w	r8, r8, r0
 8003c40:	e7e7      	b.n	8003c12 <__sflush_r+0xd2>
 8003c42:	bf00      	nop
 8003c44:	20400001 	.word	0x20400001

08003c48 <_fflush_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	690b      	ldr	r3, [r1, #16]
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	460c      	mov	r4, r1
 8003c50:	b913      	cbnz	r3, 8003c58 <_fflush_r+0x10>
 8003c52:	2500      	movs	r5, #0
 8003c54:	4628      	mov	r0, r5
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	b118      	cbz	r0, 8003c62 <_fflush_r+0x1a>
 8003c5a:	6a03      	ldr	r3, [r0, #32]
 8003c5c:	b90b      	cbnz	r3, 8003c62 <_fflush_r+0x1a>
 8003c5e:	f7ff fc8f 	bl	8003580 <__sinit>
 8003c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f3      	beq.n	8003c52 <_fflush_r+0xa>
 8003c6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c6c:	07d0      	lsls	r0, r2, #31
 8003c6e:	d404      	bmi.n	8003c7a <_fflush_r+0x32>
 8003c70:	0599      	lsls	r1, r3, #22
 8003c72:	d402      	bmi.n	8003c7a <_fflush_r+0x32>
 8003c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c76:	f7ff fe68 	bl	800394a <__retarget_lock_acquire_recursive>
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	f7ff ff5f 	bl	8003b40 <__sflush_r>
 8003c82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c84:	4605      	mov	r5, r0
 8003c86:	07da      	lsls	r2, r3, #31
 8003c88:	d4e4      	bmi.n	8003c54 <_fflush_r+0xc>
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	059b      	lsls	r3, r3, #22
 8003c8e:	d4e1      	bmi.n	8003c54 <_fflush_r+0xc>
 8003c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c92:	f7ff fe5b 	bl	800394c <__retarget_lock_release_recursive>
 8003c96:	e7dd      	b.n	8003c54 <_fflush_r+0xc>

08003c98 <__swhatbuf_r>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca0:	b096      	sub	sp, #88	@ 0x58
 8003ca2:	4615      	mov	r5, r2
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	461e      	mov	r6, r3
 8003ca8:	da0c      	bge.n	8003cc4 <__swhatbuf_r+0x2c>
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	2100      	movs	r1, #0
 8003cae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003cb2:	bf14      	ite	ne
 8003cb4:	2340      	movne	r3, #64	@ 0x40
 8003cb6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003cba:	2000      	movs	r0, #0
 8003cbc:	6031      	str	r1, [r6, #0]
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	b016      	add	sp, #88	@ 0x58
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	466a      	mov	r2, sp
 8003cc6:	f000 f849 	bl	8003d5c <_fstat_r>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	dbed      	blt.n	8003caa <__swhatbuf_r+0x12>
 8003cce:	9901      	ldr	r1, [sp, #4]
 8003cd0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003cd4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cd8:	4259      	negs	r1, r3
 8003cda:	4159      	adcs	r1, r3
 8003cdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ce0:	e7eb      	b.n	8003cba <__swhatbuf_r+0x22>

08003ce2 <__smakebuf_r>:
 8003ce2:	898b      	ldrh	r3, [r1, #12]
 8003ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ce6:	079d      	lsls	r5, r3, #30
 8003ce8:	4606      	mov	r6, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	d507      	bpl.n	8003cfe <__smakebuf_r+0x1c>
 8003cee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	6123      	str	r3, [r4, #16]
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	6163      	str	r3, [r4, #20]
 8003cfa:	b003      	add	sp, #12
 8003cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cfe:	ab01      	add	r3, sp, #4
 8003d00:	466a      	mov	r2, sp
 8003d02:	f7ff ffc9 	bl	8003c98 <__swhatbuf_r>
 8003d06:	9f00      	ldr	r7, [sp, #0]
 8003d08:	4605      	mov	r5, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	4639      	mov	r1, r7
 8003d0e:	f7ff fe8b 	bl	8003a28 <_malloc_r>
 8003d12:	b948      	cbnz	r0, 8003d28 <__smakebuf_r+0x46>
 8003d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d18:	059a      	lsls	r2, r3, #22
 8003d1a:	d4ee      	bmi.n	8003cfa <__smakebuf_r+0x18>
 8003d1c:	f023 0303 	bic.w	r3, r3, #3
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	e7e2      	b.n	8003cee <__smakebuf_r+0xc>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	6020      	str	r0, [r4, #0]
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d30:	81a3      	strh	r3, [r4, #12]
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d38:	b15b      	cbz	r3, 8003d52 <__smakebuf_r+0x70>
 8003d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f000 f81e 	bl	8003d80 <_isatty_r>
 8003d44:	b128      	cbz	r0, 8003d52 <__smakebuf_r+0x70>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	f023 0303 	bic.w	r3, r3, #3
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	81a3      	strh	r3, [r4, #12]
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	431d      	orrs	r5, r3
 8003d56:	81a5      	strh	r5, [r4, #12]
 8003d58:	e7cf      	b.n	8003cfa <__smakebuf_r+0x18>
	...

08003d5c <_fstat_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	2300      	movs	r3, #0
 8003d60:	4d06      	ldr	r5, [pc, #24]	@ (8003d7c <_fstat_r+0x20>)
 8003d62:	4604      	mov	r4, r0
 8003d64:	4608      	mov	r0, r1
 8003d66:	4611      	mov	r1, r2
 8003d68:	602b      	str	r3, [r5, #0]
 8003d6a:	f7fc fdc0 	bl	80008ee <_fstat>
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	d102      	bne.n	8003d78 <_fstat_r+0x1c>
 8003d72:	682b      	ldr	r3, [r5, #0]
 8003d74:	b103      	cbz	r3, 8003d78 <_fstat_r+0x1c>
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	bd38      	pop	{r3, r4, r5, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000334 	.word	0x20000334

08003d80 <_isatty_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	2300      	movs	r3, #0
 8003d84:	4d05      	ldr	r5, [pc, #20]	@ (8003d9c <_isatty_r+0x1c>)
 8003d86:	4604      	mov	r4, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	f7fc fdbf 	bl	800090e <_isatty>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <_isatty_r+0x1a>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <_isatty_r+0x1a>
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	20000334 	.word	0x20000334

08003da0 <_sbrk_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	2300      	movs	r3, #0
 8003da4:	4d05      	ldr	r5, [pc, #20]	@ (8003dbc <_sbrk_r+0x1c>)
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	602b      	str	r3, [r5, #0]
 8003dac:	f7fc fdc8 	bl	8000940 <_sbrk>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_sbrk_r+0x1a>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_sbrk_r+0x1a>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	20000334 	.word	0x20000334

08003dc0 <_init>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr

08003dcc <_fini>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	bf00      	nop
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr
