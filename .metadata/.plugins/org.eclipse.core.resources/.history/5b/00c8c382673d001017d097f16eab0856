/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32l552.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define BUTTON_RELEASED 0
#define BUTTON_PRESSED 1

int delay(int count)
{
	for (volatile int i = 0; i < count * 1000; i++);
	return 1;
}

uint8_t read_button_with_delay() {
    static uint8_t button_state = BUTTON_RELEASED;

    // Read the raw button state
    uint8_t raw_state = GPIOC->IDR.IDR13 ? BUTTON_PRESSED : BUTTON_RELEASED;

    // If state changed
    if (raw_state != button_state) {
        // Simple delay-based debounce
        delay(20);  // Wait ~20ms

        // Read again after delay
        raw_state = GPIOC->IDR.IDR13 ? BUTTON_PRESSED : BUTTON_RELEASED;

        // Update button state
        button_state = raw_state;
    }

    return button_state;
}

int main(void)
{
	RCC->AHB2ENR.GPIOBEN = ENABLED;
	RCC->AHB2ENR.GPIOCEN = ENABLED;
	GPIOB->MODER.MODER7 = OUTPUT_MODE;
	GPIOC->MODER.MODER13 = INPUT_MODE;
	GPIOB->ODR.ODR7 = ON;

	do {
		if (read_button_with_delay() == BUTTON_PRESSED)
		{
			GPIOB->ODR.ODR7 = ON;
		}
		else
		{
			GPIOB->ODR.ODR7 = OFF;
		}
	} while (delay(200));

	for (;;);
}
