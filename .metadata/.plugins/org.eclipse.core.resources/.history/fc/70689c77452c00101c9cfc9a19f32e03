/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//Address offset: 0x4C RCC_AHB2ENR
//RRC base address 0x4002 1000
const uint32_t RCC_AHB2ENR      = 0x40021000UL + 0x4C;

// GPIOB base addr 0x4202 0400
const uint32_t GPIOB_base_addr  = 0x42020400UL;
// GPIOB mode register 0x00
const uint32_t GPIOB_MODER      = GPIOB_base_addr + 0x0;

//GPIO B data output register offset GPIO port output data register (GPIOx_ODR) 0x14
const uint32_t GPIOB_ODR        = GPIOB_base_addr + 0x14;
const uint32_t GPIO_OUTPUT_MODE = 0x1;

int main(void)
{
	volatile uint32_t *p_clk_ctrl_reg = (uint32_t*)(RCC_AHB2ENR);
	volatile uint32_t *p_gpioB_mode_reg = (uint32_t*)(GPIOB_MODER);
	volatile uint32_t *p_gpioB_out_reg = (uint32_t*)(GPIOB_ODR);

	// get the RRC value
	*p_clk_ctrl_reg |= (0x1 << 1);
	// clear p_gpioB_mode_reg
	*p_gpioB_mode_reg &= ~(0x3 << 2 * 7);
	// set the p_gpioB_mode_reg
	*p_gpioB_mode_reg |= (0x1 << 2 * 7);
	// set the pin output
	*p_gpioB_out_reg |= (0x1 << 7);

    while(1)
    {
    	*p_gpioB_out_reg ^= (0x1 << 7);

    	// Delay (volatile counter prevents optimization):
    	for (volatile int i = 0; i < 5000; i++);
    }
}
