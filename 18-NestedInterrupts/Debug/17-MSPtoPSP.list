
17-MSPtoPSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019a8  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08001b98  08001b98  00002b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d8  080023d8  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080023d8  080023d8  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080023d8  080023d8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d8  080023d8  000033d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023dc  080023dc  000033dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080023e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000005c  0800243c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800243c  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d58  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000653  00000000  00000000  00005de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00006438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000116  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003015  00000000  00000000  000066d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c2b  00000000  00000000  000096eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b17b  00000000  00000000  0000b316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00016491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  000164d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000005c 	.word	0x2000005c
 800020c:	00000000 	.word	0x00000000
 8000210:	08001b80 	.word	0x08001b80

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000060 	.word	0x20000060
 800022c:	08001b80 	.word	0x08001b80

08000230 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
/* ITM Trace Enable Register */
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
    // Enable TRCENA (Trace Enable)
    DEMCR |= (1 << 24);
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <ITM_SendChar+0x44>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0d      	ldr	r2, [pc, #52]	@ (8000274 <ITM_SendChar+0x44>)
 8000240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000244:	6013      	str	r3, [r2, #0]

    // Enable stimulus port 0
    ITM_TRACE_EN |= (1 << 0);
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <ITM_SendChar+0x48>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a0b      	ldr	r2, [pc, #44]	@ (8000278 <ITM_SendChar+0x48>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6013      	str	r3, [r2, #0]

    // Wait until FIFO is ready in bit [0]
    while (!(ITM_STIMULUS_PORT0 & 1));
 8000252:	bf00      	nop
 8000254:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <ITM_SendChar+0x24>

    // Write to ITM stimulus port 0
    ITM_STIMULUS_PORT0 = ch;
 8000262:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000edfc 	.word	0xe000edfc
 8000278:	e0000e00 	.word	0xe0000e00

0800027c <_write>:

int _write(int file, char *ptr, int len)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e009      	b.n	80002a2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	60ba      	str	r2, [r7, #8]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ffca 	bl	8000230 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	3301      	adds	r3, #1
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	697a      	ldr	r2, [r7, #20]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbf1      	blt.n	800028e <_write+0x12>
  }
  return len;
 80002aa:	687b      	ldr	r3, [r7, #4]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <NVIC_EnableIRQ>:
    CUSTOM_IRQ1             = 77,  /* Example custom interrupt */
    CUSTOM_IRQ2             = 79   /* Example custom interrupt */
} IRQn_Type;

/* Function prototypes */
static inline void NVIC_EnableIRQ(IRQn_Type IRQn) {
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	int ind  = IRQn / 32;
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da00      	bge.n	80002c8 <NVIC_EnableIRQ+0x14>
 80002c6:	331f      	adds	r3, #31
 80002c8:	115b      	asrs	r3, r3, #5
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	60fb      	str	r3, [r7, #12]
	switch (ind) {
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d83b      	bhi.n	800034c <NVIC_EnableIRQ+0x98>
 80002d4:	a201      	add	r2, pc, #4	@ (adr r2, 80002dc <NVIC_EnableIRQ+0x28>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002ed 	.word	0x080002ed
 80002e0:	08000305 	.word	0x08000305
 80002e4:	0800031d 	.word	0x0800031d
 80002e8:	08000335 	.word	0x08000335
		case 0:
	        NVIC_ISER0 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80002ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <NVIC_EnableIRQ+0xa4>)
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 031f 	and.w	r3, r3, #31
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	4916      	ldr	r1, [pc, #88]	@ (8000358 <NVIC_EnableIRQ+0xa4>)
 80002fe:	4313      	orrs	r3, r2
 8000300:	600b      	str	r3, [r1, #0]
			break;
 8000302:	e024      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		case 1:
	        NVIC_ISER1 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <NVIC_EnableIRQ+0xa8>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	f003 031f 	and.w	r3, r3, #31
 800030e:	2101      	movs	r1, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	4911      	ldr	r1, [pc, #68]	@ (800035c <NVIC_EnableIRQ+0xa8>)
 8000316:	4313      	orrs	r3, r2
 8000318:	600b      	str	r3, [r1, #0]
	        break;
 800031a:	e018      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		case 2:
	        NVIC_ISER2 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 800031c:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <NVIC_EnableIRQ+0xac>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 031f 	and.w	r3, r3, #31
 8000326:	2101      	movs	r1, #1
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	490c      	ldr	r1, [pc, #48]	@ (8000360 <NVIC_EnableIRQ+0xac>)
 800032e:	4313      	orrs	r3, r2
 8000330:	600b      	str	r3, [r1, #0]
			break;
 8000332:	e00c      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		case 3:
	        NVIC_ISER3 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <NVIC_EnableIRQ+0xb0>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	f003 031f 	and.w	r3, r3, #31
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	4907      	ldr	r1, [pc, #28]	@ (8000364 <NVIC_EnableIRQ+0xb0>)
 8000346:	4313      	orrs	r3, r2
 8000348:	600b      	str	r3, [r1, #0]
	        break;
 800034a:	e000      	b.n	800034e <NVIC_EnableIRQ+0x9a>
		default:
			break;
 800034c:	bf00      	nop
	}
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	e000e100 	.word	0xe000e100
 800035c:	e000e104 	.word	0xe000e104
 8000360:	e000e108 	.word	0xe000e108
 8000364:	e000e10c 	.word	0xe000e10c

08000368 <NVIC_SetPendingIRQ>:
		default:
			break;
    }
}

static inline void NVIC_SetPendingIRQ(IRQn_Type IRQn) {
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	int ind  = IRQn / 32;
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	2b00      	cmp	r3, #0
 8000378:	da00      	bge.n	800037c <NVIC_SetPendingIRQ+0x14>
 800037a:	331f      	adds	r3, #31
 800037c:	115b      	asrs	r3, r3, #5
 800037e:	b25b      	sxtb	r3, r3
 8000380:	60fb      	str	r3, [r7, #12]
	switch (ind) {
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b03      	cmp	r3, #3
 8000386:	d83b      	bhi.n	8000400 <NVIC_SetPendingIRQ+0x98>
 8000388:	a201      	add	r2, pc, #4	@ (adr r2, 8000390 <NVIC_SetPendingIRQ+0x28>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080003b9 	.word	0x080003b9
 8000398:	080003d1 	.word	0x080003d1
 800039c:	080003e9 	.word	0x080003e9
		case 0:
			NVIC_ISPR0 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003a0:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <NVIC_SetPendingIRQ+0xa4>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	f003 031f 	and.w	r3, r3, #31
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	4916      	ldr	r1, [pc, #88]	@ (800040c <NVIC_SetPendingIRQ+0xa4>)
 80003b2:	4313      	orrs	r3, r2
 80003b4:	600b      	str	r3, [r1, #0]
			break;
 80003b6:	e024      	b.n	8000402 <NVIC_SetPendingIRQ+0x9a>
		case 1:
			NVIC_ISPR1 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <NVIC_SetPendingIRQ+0xa8>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	f003 031f 	and.w	r3, r3, #31
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	4911      	ldr	r1, [pc, #68]	@ (8000410 <NVIC_SetPendingIRQ+0xa8>)
 80003ca:	4313      	orrs	r3, r2
 80003cc:	600b      	str	r3, [r1, #0]
			break;
 80003ce:	e018      	b.n	8000402 <NVIC_SetPendingIRQ+0x9a>
		case 2:
			NVIC_ISPR2 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003d0:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <NVIC_SetPendingIRQ+0xac>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f003 031f 	and.w	r3, r3, #31
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	490c      	ldr	r1, [pc, #48]	@ (8000414 <NVIC_SetPendingIRQ+0xac>)
 80003e2:	4313      	orrs	r3, r2
 80003e4:	600b      	str	r3, [r1, #0]
			break;
 80003e6:	e00c      	b.n	8000402 <NVIC_SetPendingIRQ+0x9a>
		case 3:
			NVIC_ISPR3 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <NVIC_SetPendingIRQ+0xb0>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	f003 031f 	and.w	r3, r3, #31
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	4907      	ldr	r1, [pc, #28]	@ (8000418 <NVIC_SetPendingIRQ+0xb0>)
 80003fa:	4313      	orrs	r3, r2
 80003fc:	600b      	str	r3, [r1, #0]
			break;
 80003fe:	e000      	b.n	8000402 <NVIC_SetPendingIRQ+0x9a>
		default:
			break;
 8000400:	bf00      	nop
	}
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	e000e200 	.word	0xe000e200
 8000410:	e000e204 	.word	0xe000e204
 8000414:	e000e208 	.word	0xe000e208
 8000418:	e000e20c 	.word	0xe000e20c

0800041c <NVIC_ClearPendingIRQ>:

static inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	int ind  = IRQn / 32;
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da00      	bge.n	8000430 <NVIC_ClearPendingIRQ+0x14>
 800042e:	331f      	adds	r3, #31
 8000430:	115b      	asrs	r3, r3, #5
 8000432:	b25b      	sxtb	r3, r3
 8000434:	60fb      	str	r3, [r7, #12]
	switch (ind) {
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d83b      	bhi.n	80004b4 <NVIC_ClearPendingIRQ+0x98>
 800043c:	a201      	add	r2, pc, #4	@ (adr r2, 8000444 <NVIC_ClearPendingIRQ+0x28>)
 800043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000442:	bf00      	nop
 8000444:	08000455 	.word	0x08000455
 8000448:	0800046d 	.word	0x0800046d
 800044c:	08000485 	.word	0x08000485
 8000450:	0800049d 	.word	0x0800049d
		case 0:
			NVIC_ICPR0 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <NVIC_ClearPendingIRQ+0xa4>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 031f 	and.w	r3, r3, #31
 800045e:	2101      	movs	r1, #1
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	4916      	ldr	r1, [pc, #88]	@ (80004c0 <NVIC_ClearPendingIRQ+0xa4>)
 8000466:	4313      	orrs	r3, r2
 8000468:	600b      	str	r3, [r1, #0]
			break;
 800046a:	e024      	b.n	80004b6 <NVIC_ClearPendingIRQ+0x9a>
		case 1:
			NVIC_ICPR1 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 800046c:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <NVIC_ClearPendingIRQ+0xa8>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	f003 031f 	and.w	r3, r3, #31
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	4911      	ldr	r1, [pc, #68]	@ (80004c4 <NVIC_ClearPendingIRQ+0xa8>)
 800047e:	4313      	orrs	r3, r2
 8000480:	600b      	str	r3, [r1, #0]
			break;
 8000482:	e018      	b.n	80004b6 <NVIC_ClearPendingIRQ+0x9a>
		case 2:
			NVIC_ICPR2 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 8000484:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <NVIC_ClearPendingIRQ+0xac>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	f003 031f 	and.w	r3, r3, #31
 800048e:	2101      	movs	r1, #1
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	490c      	ldr	r1, [pc, #48]	@ (80004c8 <NVIC_ClearPendingIRQ+0xac>)
 8000496:	4313      	orrs	r3, r2
 8000498:	600b      	str	r3, [r1, #0]
			break;
 800049a:	e00c      	b.n	80004b6 <NVIC_ClearPendingIRQ+0x9a>
		case 3:
			NVIC_ICPR3 |= (1UL << ((uint32_t)IRQn & 0x1FUL));
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <NVIC_ClearPendingIRQ+0xb0>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f003 031f 	and.w	r3, r3, #31
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4907      	ldr	r1, [pc, #28]	@ (80004cc <NVIC_ClearPendingIRQ+0xb0>)
 80004ae:	4313      	orrs	r3, r2
 80004b0:	600b      	str	r3, [r1, #0]
			break;
 80004b2:	e000      	b.n	80004b6 <NVIC_ClearPendingIRQ+0x9a>
		default:
			break;
 80004b4:	bf00      	nop
	}
}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	e000e280 	.word	0xe000e280
 80004c4:	e000e284 	.word	0xe000e284
 80004c8:	e000e288 	.word	0xe000e288
 80004cc:	e000e28c 	.word	0xe000e28c

080004d0 <NVIC_SetPriority>:

static inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	6039      	str	r1, [r7, #0]
 80004da:	71fb      	strb	r3, [r7, #7]
    /* Set priority for device specific interrupts */
    if (IRQn >= 0) {
 80004dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	db21      	blt.n	8000528 <NVIC_SetPriority+0x58>
        /* Cortex-M33 uses 4 priority bits by default */
        priority = priority << 4; /* Shift to most significant bits */
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	603b      	str	r3, [r7, #0]

        /* Calculate the right register and bit position */
        uint32_t reg_offset = ((uint32_t)IRQn >> 2) * 4;
 80004ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ee:	089b      	lsrs	r3, r3, #2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	617b      	str	r3, [r7, #20]
        uint32_t byte_offset = ((uint32_t)IRQn & 0x3) * 8;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f003 0303 	and.w	r3, r3, #3
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	613b      	str	r3, [r7, #16]

        /* Clear and set the priority */
        volatile uint32_t *prio_reg = (volatile uint32_t *)(NVIC_BASE + 0x300UL + reg_offset);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000504:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000508:	60fb      	str	r3, [r7, #12]
        *prio_reg = (*prio_reg & ~(0xFFUL << byte_offset)) | (priority << byte_offset);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	21ff      	movs	r1, #255	@ 0xff
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	401a      	ands	r2, r3
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	431a      	orrs	r2, r3
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	601a      	str	r2, [r3, #0]
    }
}
 8000528:	bf00      	nop
 800052a:	371c      	adds	r7, #28
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <__get_CONTROL>:

static inline void __set_MSP(uint32_t topOfMainStack) {
    __asm volatile ("MSR MSP, %0" : : "r" (topOfMainStack) : );
}

static inline uint32_t __get_CONTROL(void) {
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
    uint32_t result;
    __asm volatile ("MRS %0, CONTROL" : "=r" (result));
 8000538:	f3ef 8314 	mrs	r3, CONTROL
 800053c:	607b      	str	r3, [r7, #4]
    return result;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
	...

0800054c <decode_exc_return>:
}

/**
 * Function to decode EXC_RETURN value
 */
const char* decode_exc_return(uint32_t exc_return) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    switch(exc_return & 0x1C) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 031c 	and.w	r3, r3, #28
 800055a:	2b1c      	cmp	r3, #28
 800055c:	d848      	bhi.n	80005f0 <decode_exc_return+0xa4>
 800055e:	a201      	add	r2, pc, #4	@ (adr r2, 8000564 <decode_exc_return+0x18>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	080005e5 	.word	0x080005e5
 8000568:	080005f1 	.word	0x080005f1
 800056c:	080005f1 	.word	0x080005f1
 8000570:	080005f1 	.word	0x080005f1
 8000574:	080005f1 	.word	0x080005f1
 8000578:	080005f1 	.word	0x080005f1
 800057c:	080005f1 	.word	0x080005f1
 8000580:	080005f1 	.word	0x080005f1
 8000584:	080005e9 	.word	0x080005e9
 8000588:	080005f1 	.word	0x080005f1
 800058c:	080005f1 	.word	0x080005f1
 8000590:	080005f1 	.word	0x080005f1
 8000594:	080005ed 	.word	0x080005ed
 8000598:	080005f1 	.word	0x080005f1
 800059c:	080005f1 	.word	0x080005f1
 80005a0:	080005f1 	.word	0x080005f1
 80005a4:	080005d9 	.word	0x080005d9
 80005a8:	080005f1 	.word	0x080005f1
 80005ac:	080005f1 	.word	0x080005f1
 80005b0:	080005f1 	.word	0x080005f1
 80005b4:	080005f1 	.word	0x080005f1
 80005b8:	080005f1 	.word	0x080005f1
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	080005f1 	.word	0x080005f1
 80005c4:	080005dd 	.word	0x080005dd
 80005c8:	080005f1 	.word	0x080005f1
 80005cc:	080005f1 	.word	0x080005f1
 80005d0:	080005f1 	.word	0x080005f1
 80005d4:	080005e1 	.word	0x080005e1
        case 0x10:
            return "Return to Handler mode, use MSP, no FP state";
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <decode_exc_return+0xb0>)
 80005da:	e00a      	b.n	80005f2 <decode_exc_return+0xa6>
        case 0x18:
            return "Return to Thread mode, use MSP, no FP state";
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <decode_exc_return+0xb4>)
 80005de:	e008      	b.n	80005f2 <decode_exc_return+0xa6>
        case 0x1C:
            return "Return to Thread mode, use PSP, no FP state";
 80005e0:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <decode_exc_return+0xb8>)
 80005e2:	e006      	b.n	80005f2 <decode_exc_return+0xa6>
        case 0x00:
            return "Return to Handler mode, use MSP, FP state";
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <decode_exc_return+0xbc>)
 80005e6:	e004      	b.n	80005f2 <decode_exc_return+0xa6>
        case 0x08:
            return "Return to Thread mode, use MSP, FP state";
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <decode_exc_return+0xc0>)
 80005ea:	e002      	b.n	80005f2 <decode_exc_return+0xa6>
        case 0x0C:
            return "Return to Thread mode, use PSP, FP state";
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <decode_exc_return+0xc4>)
 80005ee:	e000      	b.n	80005f2 <decode_exc_return+0xa6>
        default:
            return "Unknown EXC_RETURN value";
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <decode_exc_return+0xc8>)
//        case 0xFFFFFFED:
//            return "Return to Thread mode, use PSP, FP state";
//        default:
//            return "Unknown EXC_RETURN value";
//    }
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	08001b98 	.word	0x08001b98
 8000600:	08001bc8 	.word	0x08001bc8
 8000604:	08001bf4 	.word	0x08001bf4
 8000608:	08001c20 	.word	0x08001c20
 800060c:	08001c4c 	.word	0x08001c4c
 8000610:	08001c78 	.word	0x08001c78
 8000614:	08001ca4 	.word	0x08001ca4

08000618 <print_stack_frame>:
/* EXC_RETURN values at different points */
volatile uint32_t g_primary_exc_return = 0;
volatile uint32_t g_nested_exc_return = 0;
volatile uint32_t g_primary_exc_return_after_nested = 0;

void print_stack_frame(const char* label, volatile uint32_t *stack_frame) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    printf("===== %s =====\n", label);
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	4820      	ldr	r0, [pc, #128]	@ (80006a8 <print_stack_frame+0x90>)
 8000626:	f000 fbd5 	bl	8000dd4 <iprintf>
    printf("R0   = 0x%08lX\n", stack_frame[0]);  /* R0 is at offset 0 */
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	481e      	ldr	r0, [pc, #120]	@ (80006ac <print_stack_frame+0x94>)
 8000632:	f000 fbcf 	bl	8000dd4 <iprintf>
    printf("R1   = 0x%08lX\n", stack_frame[1]);  /* R1 is at offset 1 */
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	3304      	adds	r3, #4
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <print_stack_frame+0x98>)
 8000640:	f000 fbc8 	bl	8000dd4 <iprintf>
    printf("R2   = 0x%08lX\n", stack_frame[2]);  /* R2 is at offset 2 */
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	3308      	adds	r3, #8
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <print_stack_frame+0x9c>)
 800064e:	f000 fbc1 	bl	8000dd4 <iprintf>
    printf("R3   = 0x%08lX\n", stack_frame[3]);  /* R3 is at offset 3 */
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	330c      	adds	r3, #12
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <print_stack_frame+0xa0>)
 800065c:	f000 fbba 	bl	8000dd4 <iprintf>
    printf("R12  = 0x%08lX\n", stack_frame[4]);  /* R12 is at offset 4 */
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3310      	adds	r3, #16
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	4814      	ldr	r0, [pc, #80]	@ (80006bc <print_stack_frame+0xa4>)
 800066a:	f000 fbb3 	bl	8000dd4 <iprintf>
    printf("LR   = 0x%08lX\n", stack_frame[5]);  /* LR is at offset 5 */
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	3314      	adds	r3, #20
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <print_stack_frame+0xa8>)
 8000678:	f000 fbac 	bl	8000dd4 <iprintf>
    printf("PC   = 0x%08lX\n", stack_frame[6]);  /* PC is at offset 6 */
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3318      	adds	r3, #24
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <print_stack_frame+0xac>)
 8000686:	f000 fba5 	bl	8000dd4 <iprintf>
    printf("xPSR = 0x%08lX\n", stack_frame[7]);  /* xPSR is at offset 7 */
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	331c      	adds	r3, #28
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <print_stack_frame+0xb0>)
 8000694:	f000 fb9e 	bl	8000dd4 <iprintf>
    printf("===============================\n");
 8000698:	480c      	ldr	r0, [pc, #48]	@ (80006cc <print_stack_frame+0xb4>)
 800069a:	f000 fc03 	bl	8000ea4 <puts>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	08001cc0 	.word	0x08001cc0
 80006ac:	08001cd0 	.word	0x08001cd0
 80006b0:	08001ce0 	.word	0x08001ce0
 80006b4:	08001cf0 	.word	0x08001cf0
 80006b8:	08001d00 	.word	0x08001d00
 80006bc:	08001d10 	.word	0x08001d10
 80006c0:	08001d20 	.word	0x08001d20
 80006c4:	08001d30 	.word	0x08001d30
 80006c8:	08001d40 	.word	0x08001d40
 80006cc:	08001d50 	.word	0x08001d50

080006d0 <USART1_IRQHandler>:


/**
 * Nested Interrupt Handler
 */
void USART1_IRQHandler(void) {
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
    /* Track entry */
    g_nested_entry_count++;
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <USART1_IRQHandler+0xa8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a26      	ldr	r2, [pc, #152]	@ (8000778 <USART1_IRQHandler+0xa8>)
 80006de:	6013      	str	r3, [r2, #0]
    __asm volatile ("mov %0, lr" : "=r" (result));
 80006e0:	4673      	mov	r3, lr
 80006e2:	607b      	str	r3, [r7, #4]
    return result;
 80006e4:	687b      	ldr	r3, [r7, #4]

    /* Capture EXC_RETURN value at entry */
    g_nested_exc_return = read_exc_return();
 80006e6:	4a25      	ldr	r2, [pc, #148]	@ (800077c <USART1_IRQHandler+0xac>)
 80006e8:	6013      	str	r3, [r2, #0]
    __asm volatile ("MRS %0, MSP" : "=r" (result));
 80006ea:	f3ef 8308 	mrs	r3, MSP
 80006ee:	60bb      	str	r3, [r7, #8]
    return result;
 80006f0:	68bb      	ldr	r3, [r7, #8]

    /* Get pointer to stacked registers */
    uint32_t *stack_frame = (uint32_t *)__get_MSP();  /* Always MSP in handler mode */
 80006f2:	60fb      	str	r3, [r7, #12]

    printf("\n** ENTERED NESTED INTERRUPT HANDLER **\n");
 80006f4:	4822      	ldr	r0, [pc, #136]	@ (8000780 <USART1_IRQHandler+0xb0>)
 80006f6:	f000 fbd5 	bl	8000ea4 <puts>
    printf("NESTED EXC_RETURN: 0x%08lX (%s)\n",
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <USART1_IRQHandler+0xac>)
 80006fc:	681c      	ldr	r4, [r3, #0]
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <USART1_IRQHandler+0xac>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff22 	bl	800054c <decode_exc_return>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4621      	mov	r1, r4
 800070e:	481d      	ldr	r0, [pc, #116]	@ (8000784 <USART1_IRQHandler+0xb4>)
 8000710:	f000 fb60 	bl	8000dd4 <iprintf>
           g_nested_exc_return, decode_exc_return(g_nested_exc_return));

    /* Print stack frame */
    print_stack_frame("NESTED INTERRUPT STACK FRAME", stack_frame);
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	481c      	ldr	r0, [pc, #112]	@ (8000788 <USART1_IRQHandler+0xb8>)
 8000718:	f7ff ff7e 	bl	8000618 <print_stack_frame>

    /* Show interrupt nesting state */
    printf("Interrupt Nesting State:\n");
 800071c:	481b      	ldr	r0, [pc, #108]	@ (800078c <USART1_IRQHandler+0xbc>)
 800071e:	f000 fbc1 	bl	8000ea4 <puts>
    printf("  Primary Handler: Entry(%lu) Exit(%lu)\n",
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <USART1_IRQHandler+0xc0>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <USART1_IRQHandler+0xc4>)
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <USART1_IRQHandler+0xc8>)
 800072e:	f000 fb51 	bl	8000dd4 <iprintf>
           g_primary_entry_count, g_primary_exit_count);
    printf("  Nested Handler:  Entry(%lu) Exit(%lu)\n",
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <USART1_IRQHandler+0xa8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a19      	ldr	r2, [pc, #100]	@ (800079c <USART1_IRQHandler+0xcc>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <USART1_IRQHandler+0xd0>)
 800073e:	f000 fb49 	bl	8000dd4 <iprintf>
           g_nested_entry_count, g_nested_exit_count);

    /* Show current stack pointer */
    printf("MSP during nested handler: 0x%08lX\n", (uint32_t)stack_frame);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4619      	mov	r1, r3
 8000746:	4817      	ldr	r0, [pc, #92]	@ (80007a4 <USART1_IRQHandler+0xd4>)
 8000748:	f000 fb44 	bl	8000dd4 <iprintf>

    /* Clear pending flag */
    NVIC_ClearPendingIRQ(NESTED_IRQ);
 800074c:	203d      	movs	r0, #61	@ 0x3d
 800074e:	f7ff fe65 	bl	800041c <NVIC_ClearPendingIRQ>

    /* Track exit */
    g_nested_exit_count++;
 8000752:	4b12      	ldr	r3, [pc, #72]	@ (800079c <USART1_IRQHandler+0xcc>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a10      	ldr	r2, [pc, #64]	@ (800079c <USART1_IRQHandler+0xcc>)
 800075a:	6013      	str	r3, [r2, #0]
    printf("** EXITING NESTED INTERRUPT HANDLER **\n");
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <USART1_IRQHandler+0xd8>)
 800075e:	f000 fba1 	bl	8000ea4 <puts>
    printf("Will return to Primary Handler using EXC_RETURN: 0x%08lX\n\n", g_nested_exc_return);
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <USART1_IRQHandler+0xac>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4810      	ldr	r0, [pc, #64]	@ (80007ac <USART1_IRQHandler+0xdc>)
 800076a:	f000 fb33 	bl	8000dd4 <iprintf>
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	20000080 	.word	0x20000080
 800077c:	2000008c 	.word	0x2000008c
 8000780:	08001d70 	.word	0x08001d70
 8000784:	08001d98 	.word	0x08001d98
 8000788:	08001dbc 	.word	0x08001dbc
 800078c:	08001ddc 	.word	0x08001ddc
 8000790:	20000078 	.word	0x20000078
 8000794:	2000007c 	.word	0x2000007c
 8000798:	08001df8 	.word	0x08001df8
 800079c:	20000084 	.word	0x20000084
 80007a0:	08001e24 	.word	0x08001e24
 80007a4:	08001e50 	.word	0x08001e50
 80007a8:	08001e74 	.word	0x08001e74
 80007ac:	08001e9c 	.word	0x08001e9c

080007b0 <USART2_IRQHandler>:


/**
 * Primary Interrupt Handler
 */
void USART2_IRQHandler(void) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
    /* Track entry */
    g_primary_entry_count++;
 80007b6:	4b4d      	ldr	r3, [pc, #308]	@ (80008ec <USART2_IRQHandler+0x13c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a4b      	ldr	r2, [pc, #300]	@ (80008ec <USART2_IRQHandler+0x13c>)
 80007be:	6013      	str	r3, [r2, #0]
    __asm volatile ("mov %0, lr" : "=r" (result));
 80007c0:	4673      	mov	r3, lr
 80007c2:	603b      	str	r3, [r7, #0]
    return result;
 80007c4:	683b      	ldr	r3, [r7, #0]

    /* Capture EXC_RETURN value at entry */
    g_primary_exc_return = read_exc_return();
 80007c6:	4a4a      	ldr	r2, [pc, #296]	@ (80008f0 <USART2_IRQHandler+0x140>)
 80007c8:	6013      	str	r3, [r2, #0]
    __asm volatile ("MRS %0, MSP" : "=r" (result));
 80007ca:	f3ef 8308 	mrs	r3, MSP
 80007ce:	607b      	str	r3, [r7, #4]
    return result;
 80007d0:	687b      	ldr	r3, [r7, #4]

    /* Get pointer to stacked registers */
    uint32_t *stack_frame = (uint32_t *)__get_MSP();  /* Always MSP in handler mode */
 80007d2:	60fb      	str	r3, [r7, #12]

    printf("\n** ENTERED PRIMARY INTERRUPT HANDLER **\n");
 80007d4:	4847      	ldr	r0, [pc, #284]	@ (80008f4 <USART2_IRQHandler+0x144>)
 80007d6:	f000 fb65 	bl	8000ea4 <puts>
    printf("PRIMARY EXC_RETURN: 0x%08lX (%s)\n",
 80007da:	4b45      	ldr	r3, [pc, #276]	@ (80008f0 <USART2_IRQHandler+0x140>)
 80007dc:	681c      	ldr	r4, [r3, #0]
 80007de:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <USART2_IRQHandler+0x140>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff feb2 	bl	800054c <decode_exc_return>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4621      	mov	r1, r4
 80007ee:	4842      	ldr	r0, [pc, #264]	@ (80008f8 <USART2_IRQHandler+0x148>)
 80007f0:	f000 faf0 	bl	8000dd4 <iprintf>
           g_primary_exc_return, decode_exc_return(g_primary_exc_return));

    /* Print stack frame */
    print_stack_frame("PRIMARY INTERRUPT STACK FRAME", stack_frame);
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	4841      	ldr	r0, [pc, #260]	@ (80008fc <USART2_IRQHandler+0x14c>)
 80007f8:	f7ff ff0e 	bl	8000618 <print_stack_frame>

    /* Show current stack pointer */
    printf("MSP during primary handler: 0x%08lX\n", (uint32_t)stack_frame);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4619      	mov	r1, r3
 8000800:	483f      	ldr	r0, [pc, #252]	@ (8000900 <USART2_IRQHandler+0x150>)
 8000802:	f000 fae7 	bl	8000dd4 <iprintf>

    /* Show interrupt state before nested interrupt */
    printf("Interrupt State Before Nesting:\n");
 8000806:	483f      	ldr	r0, [pc, #252]	@ (8000904 <USART2_IRQHandler+0x154>)
 8000808:	f000 fb4c 	bl	8000ea4 <puts>
    printf("  Primary Handler: Entry(%lu) Exit(%lu)\n",
 800080c:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <USART2_IRQHandler+0x13c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a3d      	ldr	r2, [pc, #244]	@ (8000908 <USART2_IRQHandler+0x158>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	483d      	ldr	r0, [pc, #244]	@ (800090c <USART2_IRQHandler+0x15c>)
 8000818:	f000 fadc 	bl	8000dd4 <iprintf>
           g_primary_entry_count, g_primary_exit_count);
    printf("  Nested Handler:  Entry(%lu) Exit(%lu)\n",
 800081c:	4b3c      	ldr	r3, [pc, #240]	@ (8000910 <USART2_IRQHandler+0x160>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a3c      	ldr	r2, [pc, #240]	@ (8000914 <USART2_IRQHandler+0x164>)
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	483c      	ldr	r0, [pc, #240]	@ (8000918 <USART2_IRQHandler+0x168>)
 8000828:	f000 fad4 	bl	8000dd4 <iprintf>
           g_nested_entry_count, g_nested_exit_count);

    printf("\nTriggering nested interrupt within primary handler...\n");
 800082c:	483b      	ldr	r0, [pc, #236]	@ (800091c <USART2_IRQHandler+0x16c>)
 800082e:	f000 fb39 	bl	8000ea4 <puts>

    /* Trigger the nested interrupt */
    NVIC_SetPendingIRQ(NESTED_IRQ);
 8000832:	203d      	movs	r0, #61	@ 0x3d
 8000834:	f7ff fd98 	bl	8000368 <NVIC_SetPendingIRQ>
    __asm volatile ("mov %0, lr" : "=r" (result));
 8000838:	4673      	mov	r3, lr
 800083a:	60bb      	str	r3, [r7, #8]
    return result;
 800083c:	68bb      	ldr	r3, [r7, #8]
    /* The processor will instantly jump to the nested handler if its priority is higher */

    /* When we return here, the nested handler has completed */

    /* Capture EXC_RETURN value after nested interrupt returns */
    g_primary_exc_return_after_nested = read_exc_return();
 800083e:	4a38      	ldr	r2, [pc, #224]	@ (8000920 <USART2_IRQHandler+0x170>)
 8000840:	6013      	str	r3, [r2, #0]

    printf("\nReturned to primary handler after nested interrupt\n");
 8000842:	4838      	ldr	r0, [pc, #224]	@ (8000924 <USART2_IRQHandler+0x174>)
 8000844:	f000 fb2e 	bl	8000ea4 <puts>
    printf("PRIMARY EXC_RETURN (after nested): 0x%08lX (%s)\n",
 8000848:	4b35      	ldr	r3, [pc, #212]	@ (8000920 <USART2_IRQHandler+0x170>)
 800084a:	681c      	ldr	r4, [r3, #0]
 800084c:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <USART2_IRQHandler+0x170>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe7b 	bl	800054c <decode_exc_return>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4621      	mov	r1, r4
 800085c:	4832      	ldr	r0, [pc, #200]	@ (8000928 <USART2_IRQHandler+0x178>)
 800085e:	f000 fab9 	bl	8000dd4 <iprintf>
           g_primary_exc_return_after_nested,
           decode_exc_return(g_primary_exc_return_after_nested));

    /* Show interrupt state after nested interrupt */
    printf("Interrupt State After Nesting:\n");
 8000862:	4832      	ldr	r0, [pc, #200]	@ (800092c <USART2_IRQHandler+0x17c>)
 8000864:	f000 fb1e 	bl	8000ea4 <puts>
    printf("  Primary Handler: Entry(%lu) Exit(%lu)\n",
 8000868:	4b20      	ldr	r3, [pc, #128]	@ (80008ec <USART2_IRQHandler+0x13c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a26      	ldr	r2, [pc, #152]	@ (8000908 <USART2_IRQHandler+0x158>)
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	4826      	ldr	r0, [pc, #152]	@ (800090c <USART2_IRQHandler+0x15c>)
 8000874:	f000 faae 	bl	8000dd4 <iprintf>
           g_primary_entry_count, g_primary_exit_count);
    printf("  Nested Handler:  Entry(%lu) Exit(%lu)\n",
 8000878:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <USART2_IRQHandler+0x160>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <USART2_IRQHandler+0x164>)
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	4825      	ldr	r0, [pc, #148]	@ (8000918 <USART2_IRQHandler+0x168>)
 8000884:	f000 faa6 	bl	8000dd4 <iprintf>
           g_nested_entry_count, g_nested_exit_count);

    /* Compare EXC_RETURN values before and after nested interrupt */
    printf("\nEXC_RETURN comparison:\n");
 8000888:	4829      	ldr	r0, [pc, #164]	@ (8000930 <USART2_IRQHandler+0x180>)
 800088a:	f000 fb0b 	bl	8000ea4 <puts>
    printf("  Before nested: 0x%08lX\n", g_primary_exc_return);
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <USART2_IRQHandler+0x140>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4827      	ldr	r0, [pc, #156]	@ (8000934 <USART2_IRQHandler+0x184>)
 8000896:	f000 fa9d 	bl	8000dd4 <iprintf>
    printf("  After nested:  0x%08lX\n", g_primary_exc_return_after_nested);
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <USART2_IRQHandler+0x170>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <USART2_IRQHandler+0x188>)
 80008a2:	f000 fa97 	bl	8000dd4 <iprintf>
    printf("  %s\n", (g_primary_exc_return == g_primary_exc_return_after_nested) ?
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <USART2_IRQHandler+0x140>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <USART2_IRQHandler+0x170>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d101      	bne.n	80008b6 <USART2_IRQHandler+0x106>
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <USART2_IRQHandler+0x18c>)
 80008b4:	e000      	b.n	80008b8 <USART2_IRQHandler+0x108>
 80008b6:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <USART2_IRQHandler+0x190>)
 80008b8:	4619      	mov	r1, r3
 80008ba:	4822      	ldr	r0, [pc, #136]	@ (8000944 <USART2_IRQHandler+0x194>)
 80008bc:	f000 fa8a 	bl	8000dd4 <iprintf>
                     "EXC_RETURN preserved" : "EXC_RETURN changed");

    /* Clear the pending interrupt */
    NVIC_ClearPendingIRQ(PRIMARY_IRQ);
 80008c0:	203e      	movs	r0, #62	@ 0x3e
 80008c2:	f7ff fdab 	bl	800041c <NVIC_ClearPendingIRQ>

    /* Track exit */
    g_primary_exit_count++;
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <USART2_IRQHandler+0x158>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <USART2_IRQHandler+0x158>)
 80008ce:	6013      	str	r3, [r2, #0]
    printf("** EXITING PRIMARY INTERRUPT HANDLER **\n");
 80008d0:	481d      	ldr	r0, [pc, #116]	@ (8000948 <USART2_IRQHandler+0x198>)
 80008d2:	f000 fae7 	bl	8000ea4 <puts>
    printf("Will return to Thread Mode using EXC_RETURN: 0x%08lX\n\n", g_primary_exc_return);
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <USART2_IRQHandler+0x140>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	481b      	ldr	r0, [pc, #108]	@ (800094c <USART2_IRQHandler+0x19c>)
 80008de:	f000 fa79 	bl	8000dd4 <iprintf>
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000078 	.word	0x20000078
 80008f0:	20000088 	.word	0x20000088
 80008f4:	08001ed8 	.word	0x08001ed8
 80008f8:	08001f04 	.word	0x08001f04
 80008fc:	08001f28 	.word	0x08001f28
 8000900:	08001f48 	.word	0x08001f48
 8000904:	08001f70 	.word	0x08001f70
 8000908:	2000007c 	.word	0x2000007c
 800090c:	08001df8 	.word	0x08001df8
 8000910:	20000080 	.word	0x20000080
 8000914:	20000084 	.word	0x20000084
 8000918:	08001e24 	.word	0x08001e24
 800091c:	08001f90 	.word	0x08001f90
 8000920:	20000090 	.word	0x20000090
 8000924:	08001fc8 	.word	0x08001fc8
 8000928:	08001ffc 	.word	0x08001ffc
 800092c:	08002030 	.word	0x08002030
 8000930:	08002050 	.word	0x08002050
 8000934:	08002068 	.word	0x08002068
 8000938:	08002084 	.word	0x08002084
 800093c:	080020a0 	.word	0x080020a0
 8000940:	080020b8 	.word	0x080020b8
 8000944:	080020cc 	.word	0x080020cc
 8000948:	080020d4 	.word	0x080020d4
 800094c:	080020fc 	.word	0x080020fc

08000950 <trigger_nested_interrupt_demo>:

/* Setup and trigger the nested interrupt demo */
void trigger_nested_interrupt_demo(void) {
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
    printf("\n=== STARTING NESTED INTERRUPT DEMO ===\n");
 8000956:	482e      	ldr	r0, [pc, #184]	@ (8000a10 <trigger_nested_interrupt_demo+0xc0>)
 8000958:	f000 faa4 	bl	8000ea4 <puts>
    __asm volatile ("MRS %0, MSP" : "=r" (result));
 800095c:	f3ef 8308 	mrs	r3, MSP
 8000960:	603b      	str	r3, [r7, #0]
    return result;
 8000962:	683b      	ldr	r3, [r7, #0]
    printf("Initial stack pointer (MSP): 0x%08lX\n", __get_MSP());
 8000964:	4619      	mov	r1, r3
 8000966:	482b      	ldr	r0, [pc, #172]	@ (8000a14 <trigger_nested_interrupt_demo+0xc4>)
 8000968:	f000 fa34 	bl	8000dd4 <iprintf>

    /* Trigger the primary interrupt */
    printf("\nTriggering primary interrupt...\n");
 800096c:	482a      	ldr	r0, [pc, #168]	@ (8000a18 <trigger_nested_interrupt_demo+0xc8>)
 800096e:	f000 fa99 	bl	8000ea4 <puts>
    NVIC_SetPendingIRQ(PRIMARY_IRQ);
 8000972:	203e      	movs	r0, #62	@ 0x3e
 8000974:	f7ff fcf8 	bl	8000368 <NVIC_SetPendingIRQ>

    /* After returning from all interrupts */
    printf("\n=== RETURNED TO MAIN FUNCTION ===\n");
 8000978:	4828      	ldr	r0, [pc, #160]	@ (8000a1c <trigger_nested_interrupt_demo+0xcc>)
 800097a:	f000 fa93 	bl	8000ea4 <puts>
    printf("Final interrupt counts:\n");
 800097e:	4828      	ldr	r0, [pc, #160]	@ (8000a20 <trigger_nested_interrupt_demo+0xd0>)
 8000980:	f000 fa90 	bl	8000ea4 <puts>
    printf("  Primary Handler: Entry(%lu) Exit(%lu)\n",
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <trigger_nested_interrupt_demo+0xd4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a27      	ldr	r2, [pc, #156]	@ (8000a28 <trigger_nested_interrupt_demo+0xd8>)
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	4827      	ldr	r0, [pc, #156]	@ (8000a2c <trigger_nested_interrupt_demo+0xdc>)
 8000990:	f000 fa20 	bl	8000dd4 <iprintf>
           g_primary_entry_count, g_primary_exit_count);
    printf("  Nested Handler:  Entry(%lu) Exit(%lu)\n",
 8000994:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <trigger_nested_interrupt_demo+0xe0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <trigger_nested_interrupt_demo+0xe4>)
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	4826      	ldr	r0, [pc, #152]	@ (8000a38 <trigger_nested_interrupt_demo+0xe8>)
 80009a0:	f000 fa18 	bl	8000dd4 <iprintf>
    __asm volatile ("MRS %0, MSP" : "=r" (result));
 80009a4:	f3ef 8308 	mrs	r3, MSP
 80009a8:	607b      	str	r3, [r7, #4]
    return result;
 80009aa:	687b      	ldr	r3, [r7, #4]
           g_nested_entry_count, g_nested_exit_count);
    printf("MSP after interrupts: 0x%08lX\n", __get_MSP());
 80009ac:	4619      	mov	r1, r3
 80009ae:	4823      	ldr	r0, [pc, #140]	@ (8000a3c <trigger_nested_interrupt_demo+0xec>)
 80009b0:	f000 fa10 	bl	8000dd4 <iprintf>

    printf("\nEXC_RETURN values captured:\n");
 80009b4:	4822      	ldr	r0, [pc, #136]	@ (8000a40 <trigger_nested_interrupt_demo+0xf0>)
 80009b6:	f000 fa75 	bl	8000ea4 <puts>
    printf("  Primary Handler: 0x%08lX (%s)\n",
 80009ba:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <trigger_nested_interrupt_demo+0xf4>)
 80009bc:	681c      	ldr	r4, [r3, #0]
 80009be:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <trigger_nested_interrupt_demo+0xf4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdc2 	bl	800054c <decode_exc_return>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4621      	mov	r1, r4
 80009ce:	481e      	ldr	r0, [pc, #120]	@ (8000a48 <trigger_nested_interrupt_demo+0xf8>)
 80009d0:	f000 fa00 	bl	8000dd4 <iprintf>
           g_primary_exc_return, decode_exc_return(g_primary_exc_return));
    printf("  Nested Handler:  0x%08lX (%s)\n",
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <trigger_nested_interrupt_demo+0xfc>)
 80009d6:	681c      	ldr	r4, [r3, #0]
 80009d8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <trigger_nested_interrupt_demo+0xfc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fdb5 	bl	800054c <decode_exc_return>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4621      	mov	r1, r4
 80009e8:	4819      	ldr	r0, [pc, #100]	@ (8000a50 <trigger_nested_interrupt_demo+0x100>)
 80009ea:	f000 f9f3 	bl	8000dd4 <iprintf>
           g_nested_exc_return, decode_exc_return(g_nested_exc_return));
    printf("  Primary after nested: 0x%08lX (%s)\n",
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <trigger_nested_interrupt_demo+0x104>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <trigger_nested_interrupt_demo+0x104>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fda8 	bl	800054c <decode_exc_return>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4621      	mov	r1, r4
 8000a02:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <trigger_nested_interrupt_demo+0x108>)
 8000a04:	f000 f9e6 	bl	8000dd4 <iprintf>
           g_primary_exc_return_after_nested,
           decode_exc_return(g_primary_exc_return_after_nested));
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	08002134 	.word	0x08002134
 8000a14:	0800215c 	.word	0x0800215c
 8000a18:	08002184 	.word	0x08002184
 8000a1c:	080021a8 	.word	0x080021a8
 8000a20:	080021cc 	.word	0x080021cc
 8000a24:	20000078 	.word	0x20000078
 8000a28:	2000007c 	.word	0x2000007c
 8000a2c:	08001df8 	.word	0x08001df8
 8000a30:	20000080 	.word	0x20000080
 8000a34:	20000084 	.word	0x20000084
 8000a38:	08001e24 	.word	0x08001e24
 8000a3c:	080021e4 	.word	0x080021e4
 8000a40:	08002204 	.word	0x08002204
 8000a44:	20000088 	.word	0x20000088
 8000a48:	08002224 	.word	0x08002224
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	08002248 	.word	0x08002248
 8000a54:	20000090 	.word	0x20000090
 8000a58:	0800226c 	.word	0x0800226c

08000a5c <main>:

int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	printf("\n--- Nested Interrupt with EXC_RETURN Demo ---\n");
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <main+0x70>)
 8000a62:	f000 fa1f 	bl	8000ea4 <puts>

	/* Configure NVIC for our interrupts */

	/* Configure priorities - LOWER number means HIGHER priority */
	NVIC_SetPriority(PRIMARY_IRQ, 3); /* Lower priority (higher number) */
 8000a66:	2103      	movs	r1, #3
 8000a68:	203e      	movs	r0, #62	@ 0x3e
 8000a6a:	f7ff fd31 	bl	80004d0 <NVIC_SetPriority>
	NVIC_SetPriority(NESTED_IRQ, 1);  /* Higher priority (lower number) */
 8000a6e:	2101      	movs	r1, #1
 8000a70:	203d      	movs	r0, #61	@ 0x3d
 8000a72:	f7ff fd2d 	bl	80004d0 <NVIC_SetPriority>

	/* Enable both interrupts */
	NVIC_EnableIRQ(PRIMARY_IRQ);
 8000a76:	203e      	movs	r0, #62	@ 0x3e
 8000a78:	f7ff fc1c 	bl	80002b4 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(NESTED_IRQ);
 8000a7c:	203d      	movs	r0, #61	@ 0x3d
 8000a7e:	f7ff fc19 	bl	80002b4 <NVIC_EnableIRQ>

	/* Print initial processor state */
	printf("Initial processor state:\n");
 8000a82:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <main+0x74>)
 8000a84:	f000 fa0e 	bl	8000ea4 <puts>
	printf("  CPU Mode: Thread Mode\n");
 8000a88:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <main+0x78>)
 8000a8a:	f000 fa0b 	bl	8000ea4 <puts>
	printf("  Active stack: %s\n", (__get_CONTROL() & 2) ? "PSP" : "MSP");
 8000a8e:	f7ff fd50 	bl	8000532 <__get_CONTROL>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <main+0x44>
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <main+0x7c>)
 8000a9e:	e000      	b.n	8000aa2 <main+0x46>
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <main+0x80>)
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <main+0x84>)
 8000aa6:	f000 f995 	bl	8000dd4 <iprintf>
	printf("  Priority grouping: 3 bits preemption\n");
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <main+0x88>)
 8000aac:	f000 f9fa 	bl	8000ea4 <puts>
	printf("  PRIMARY_IRQ priority: 3\n");
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <main+0x8c>)
 8000ab2:	f000 f9f7 	bl	8000ea4 <puts>
    printf("  NESTED_IRQ priority: 1 (higher)\n\n");
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <main+0x90>)
 8000ab8:	f000 f9f4 	bl	8000ea4 <puts>

    /* Trigger the demo */
    trigger_nested_interrupt_demo();
 8000abc:	f7ff ff48 	bl	8000950 <trigger_nested_interrupt_demo>

    /* Loop forever */
    printf("\nDemo complete. Entering infinite loop.\n");
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <main+0x94>)
 8000ac2:	f000 f9ef 	bl	8000ea4 <puts>
    for(;;);
 8000ac6:	bf00      	nop
 8000ac8:	e7fd      	b.n	8000ac6 <main+0x6a>
 8000aca:	bf00      	nop
 8000acc:	08002294 	.word	0x08002294
 8000ad0:	080022c4 	.word	0x080022c4
 8000ad4:	080022e0 	.word	0x080022e0
 8000ad8:	080022f8 	.word	0x080022f8
 8000adc:	080022fc 	.word	0x080022fc
 8000ae0:	08002300 	.word	0x08002300
 8000ae4:	08002314 	.word	0x08002314
 8000ae8:	0800233c 	.word	0x0800233c
 8000aec:	08002358 	.word	0x08002358
 8000af0:	0800237c 	.word	0x0800237c

08000af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
  }

  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b54:	605a      	str	r2, [r3, #4]
  return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f000 fa9e 	bl	8001100 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20030000 	.word	0x20030000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	200001e8 	.word	0x200001e8

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 fa6f 	bl	800110c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ff15 	bl	8000a5c <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c40:	080023e0 	.word	0x080023e0
  ldr r2, =_sbss
 8000c44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c48:	200001e4 	.word	0x200001e4

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <std>:
 8000c50:	2300      	movs	r3, #0
 8000c52:	b510      	push	{r4, lr}
 8000c54:	4604      	mov	r4, r0
 8000c56:	6083      	str	r3, [r0, #8]
 8000c58:	8181      	strh	r1, [r0, #12]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6643      	str	r3, [r0, #100]	@ 0x64
 8000c5e:	81c2      	strh	r2, [r0, #14]
 8000c60:	2208      	movs	r2, #8
 8000c62:	6183      	str	r3, [r0, #24]
 8000c64:	e9c0 3300 	strd	r3, r3, [r0]
 8000c68:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c6c:	305c      	adds	r0, #92	@ 0x5c
 8000c6e:	f000 f9f9 	bl	8001064 <memset>
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <std+0x58>)
 8000c74:	6224      	str	r4, [r4, #32]
 8000c76:	6263      	str	r3, [r4, #36]	@ 0x24
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <std+0x5c>)
 8000c7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <std+0x60>)
 8000c7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <std+0x64>)
 8000c82:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <std+0x68>)
 8000c86:	429c      	cmp	r4, r3
 8000c88:	d006      	beq.n	8000c98 <std+0x48>
 8000c8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c8e:	4294      	cmp	r4, r2
 8000c90:	d002      	beq.n	8000c98 <std+0x48>
 8000c92:	33d0      	adds	r3, #208	@ 0xd0
 8000c94:	429c      	cmp	r4, r3
 8000c96:	d105      	bne.n	8000ca4 <std+0x54>
 8000c98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ca0:	f000 ba58 	b.w	8001154 <__retarget_lock_init_recursive>
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08000eb5 	.word	0x08000eb5
 8000cac:	08000ed7 	.word	0x08000ed7
 8000cb0:	08000f0f 	.word	0x08000f0f
 8000cb4:	08000f33 	.word	0x08000f33
 8000cb8:	20000098 	.word	0x20000098

08000cbc <stdio_exit_handler>:
 8000cbc:	4a02      	ldr	r2, [pc, #8]	@ (8000cc8 <stdio_exit_handler+0xc>)
 8000cbe:	4903      	ldr	r1, [pc, #12]	@ (8000ccc <stdio_exit_handler+0x10>)
 8000cc0:	4803      	ldr	r0, [pc, #12]	@ (8000cd0 <stdio_exit_handler+0x14>)
 8000cc2:	f000 b869 	b.w	8000d98 <_fwalk_sglue>
 8000cc6:	bf00      	nop
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	080019ed 	.word	0x080019ed
 8000cd0:	20000010 	.word	0x20000010

08000cd4 <cleanup_stdio>:
 8000cd4:	6841      	ldr	r1, [r0, #4]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <cleanup_stdio+0x34>)
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	b510      	push	{r4, lr}
 8000cdc:	4604      	mov	r4, r0
 8000cde:	d001      	beq.n	8000ce4 <cleanup_stdio+0x10>
 8000ce0:	f000 fe84 	bl	80019ec <_fflush_r>
 8000ce4:	68a1      	ldr	r1, [r4, #8]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <cleanup_stdio+0x38>)
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d002      	beq.n	8000cf2 <cleanup_stdio+0x1e>
 8000cec:	4620      	mov	r0, r4
 8000cee:	f000 fe7d 	bl	80019ec <_fflush_r>
 8000cf2:	68e1      	ldr	r1, [r4, #12]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <cleanup_stdio+0x3c>)
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d004      	beq.n	8000d04 <cleanup_stdio+0x30>
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d00:	f000 be74 	b.w	80019ec <_fflush_r>
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	bf00      	nop
 8000d08:	20000098 	.word	0x20000098
 8000d0c:	20000100 	.word	0x20000100
 8000d10:	20000168 	.word	0x20000168

08000d14 <global_stdio_init.part.0>:
 8000d14:	b510      	push	{r4, lr}
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <global_stdio_init.part.0+0x30>)
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4c0b      	ldr	r4, [pc, #44]	@ (8000d48 <global_stdio_init.part.0+0x34>)
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <global_stdio_init.part.0+0x38>)
 8000d1e:	4620      	mov	r0, r4
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff ff94 	bl	8000c50 <std>
 8000d28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2109      	movs	r1, #9
 8000d30:	f7ff ff8e 	bl	8000c50 <std>
 8000d34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000d38:	2202      	movs	r2, #2
 8000d3a:	2112      	movs	r1, #18
 8000d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d40:	f7ff bf86 	b.w	8000c50 <std>
 8000d44:	200001d0 	.word	0x200001d0
 8000d48:	20000098 	.word	0x20000098
 8000d4c:	08000cbd 	.word	0x08000cbd

08000d50 <__sfp_lock_acquire>:
 8000d50:	4801      	ldr	r0, [pc, #4]	@ (8000d58 <__sfp_lock_acquire+0x8>)
 8000d52:	f000 ba00 	b.w	8001156 <__retarget_lock_acquire_recursive>
 8000d56:	bf00      	nop
 8000d58:	200001d9 	.word	0x200001d9

08000d5c <__sfp_lock_release>:
 8000d5c:	4801      	ldr	r0, [pc, #4]	@ (8000d64 <__sfp_lock_release+0x8>)
 8000d5e:	f000 b9fb 	b.w	8001158 <__retarget_lock_release_recursive>
 8000d62:	bf00      	nop
 8000d64:	200001d9 	.word	0x200001d9

08000d68 <__sinit>:
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fff0 	bl	8000d50 <__sfp_lock_acquire>
 8000d70:	6a23      	ldr	r3, [r4, #32]
 8000d72:	b11b      	cbz	r3, 8000d7c <__sinit+0x14>
 8000d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d78:	f7ff bff0 	b.w	8000d5c <__sfp_lock_release>
 8000d7c:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <__sinit+0x28>)
 8000d7e:	6223      	str	r3, [r4, #32]
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <__sinit+0x2c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f5      	bne.n	8000d74 <__sinit+0xc>
 8000d88:	f7ff ffc4 	bl	8000d14 <global_stdio_init.part.0>
 8000d8c:	e7f2      	b.n	8000d74 <__sinit+0xc>
 8000d8e:	bf00      	nop
 8000d90:	08000cd5 	.word	0x08000cd5
 8000d94:	200001d0 	.word	0x200001d0

08000d98 <_fwalk_sglue>:
 8000d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d9c:	4607      	mov	r7, r0
 8000d9e:	4688      	mov	r8, r1
 8000da0:	4614      	mov	r4, r2
 8000da2:	2600      	movs	r6, #0
 8000da4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000da8:	f1b9 0901 	subs.w	r9, r9, #1
 8000dac:	d505      	bpl.n	8000dba <_fwalk_sglue+0x22>
 8000dae:	6824      	ldr	r4, [r4, #0]
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d1f7      	bne.n	8000da4 <_fwalk_sglue+0xc>
 8000db4:	4630      	mov	r0, r6
 8000db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dba:	89ab      	ldrh	r3, [r5, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d907      	bls.n	8000dd0 <_fwalk_sglue+0x38>
 8000dc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	d003      	beq.n	8000dd0 <_fwalk_sglue+0x38>
 8000dc8:	4629      	mov	r1, r5
 8000dca:	4638      	mov	r0, r7
 8000dcc:	47c0      	blx	r8
 8000dce:	4306      	orrs	r6, r0
 8000dd0:	3568      	adds	r5, #104	@ 0x68
 8000dd2:	e7e9      	b.n	8000da8 <_fwalk_sglue+0x10>

08000dd4 <iprintf>:
 8000dd4:	b40f      	push	{r0, r1, r2, r3}
 8000dd6:	b507      	push	{r0, r1, r2, lr}
 8000dd8:	4906      	ldr	r1, [pc, #24]	@ (8000df4 <iprintf+0x20>)
 8000dda:	ab04      	add	r3, sp, #16
 8000ddc:	6808      	ldr	r0, [r1, #0]
 8000dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8000de2:	6881      	ldr	r1, [r0, #8]
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f000 fad9 	bl	800139c <_vfiprintf_r>
 8000dea:	b003      	add	sp, #12
 8000dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8000df0:	b004      	add	sp, #16
 8000df2:	4770      	bx	lr
 8000df4:	2000000c 	.word	0x2000000c

08000df8 <_puts_r>:
 8000df8:	6a03      	ldr	r3, [r0, #32]
 8000dfa:	b570      	push	{r4, r5, r6, lr}
 8000dfc:	4605      	mov	r5, r0
 8000dfe:	460e      	mov	r6, r1
 8000e00:	6884      	ldr	r4, [r0, #8]
 8000e02:	b90b      	cbnz	r3, 8000e08 <_puts_r+0x10>
 8000e04:	f7ff ffb0 	bl	8000d68 <__sinit>
 8000e08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e0a:	07db      	lsls	r3, r3, #31
 8000e0c:	d405      	bmi.n	8000e1a <_puts_r+0x22>
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	0598      	lsls	r0, r3, #22
 8000e12:	d402      	bmi.n	8000e1a <_puts_r+0x22>
 8000e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e16:	f000 f99e 	bl	8001156 <__retarget_lock_acquire_recursive>
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	0719      	lsls	r1, r3, #28
 8000e1e:	d502      	bpl.n	8000e26 <_puts_r+0x2e>
 8000e20:	6923      	ldr	r3, [r4, #16]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d135      	bne.n	8000e92 <_puts_r+0x9a>
 8000e26:	4621      	mov	r1, r4
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f000 f8c5 	bl	8000fb8 <__swsetup_r>
 8000e2e:	b380      	cbz	r0, 8000e92 <_puts_r+0x9a>
 8000e30:	f04f 35ff 	mov.w	r5, #4294967295
 8000e34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e36:	07da      	lsls	r2, r3, #31
 8000e38:	d405      	bmi.n	8000e46 <_puts_r+0x4e>
 8000e3a:	89a3      	ldrh	r3, [r4, #12]
 8000e3c:	059b      	lsls	r3, r3, #22
 8000e3e:	d402      	bmi.n	8000e46 <_puts_r+0x4e>
 8000e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e42:	f000 f989 	bl	8001158 <__retarget_lock_release_recursive>
 8000e46:	4628      	mov	r0, r5
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da04      	bge.n	8000e58 <_puts_r+0x60>
 8000e4e:	69a2      	ldr	r2, [r4, #24]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dc17      	bgt.n	8000e84 <_puts_r+0x8c>
 8000e54:	290a      	cmp	r1, #10
 8000e56:	d015      	beq.n	8000e84 <_puts_r+0x8c>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	6022      	str	r2, [r4, #0]
 8000e5e:	7019      	strb	r1, [r3, #0]
 8000e60:	68a3      	ldr	r3, [r4, #8]
 8000e62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000e66:	3b01      	subs	r3, #1
 8000e68:	60a3      	str	r3, [r4, #8]
 8000e6a:	2900      	cmp	r1, #0
 8000e6c:	d1ed      	bne.n	8000e4a <_puts_r+0x52>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da11      	bge.n	8000e96 <_puts_r+0x9e>
 8000e72:	4622      	mov	r2, r4
 8000e74:	210a      	movs	r1, #10
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 f85f 	bl	8000f3a <__swbuf_r>
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d0d7      	beq.n	8000e30 <_puts_r+0x38>
 8000e80:	250a      	movs	r5, #10
 8000e82:	e7d7      	b.n	8000e34 <_puts_r+0x3c>
 8000e84:	4622      	mov	r2, r4
 8000e86:	4628      	mov	r0, r5
 8000e88:	f000 f857 	bl	8000f3a <__swbuf_r>
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	d1e7      	bne.n	8000e60 <_puts_r+0x68>
 8000e90:	e7ce      	b.n	8000e30 <_puts_r+0x38>
 8000e92:	3e01      	subs	r6, #1
 8000e94:	e7e4      	b.n	8000e60 <_puts_r+0x68>
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	6022      	str	r2, [r4, #0]
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e7ee      	b.n	8000e80 <_puts_r+0x88>
	...

08000ea4 <puts>:
 8000ea4:	4b02      	ldr	r3, [pc, #8]	@ (8000eb0 <puts+0xc>)
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	f7ff bfa5 	b.w	8000df8 <_puts_r>
 8000eae:	bf00      	nop
 8000eb0:	2000000c 	.word	0x2000000c

08000eb4 <__sread>:
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ebc:	f000 f8fc 	bl	80010b8 <_read_r>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	bfab      	itete	ge
 8000ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8000ec8:	181b      	addge	r3, r3, r0
 8000eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ece:	bfac      	ite	ge
 8000ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ed2:	81a3      	strhlt	r3, [r4, #12]
 8000ed4:	bd10      	pop	{r4, pc}

08000ed6 <__swrite>:
 8000ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eda:	461f      	mov	r7, r3
 8000edc:	898b      	ldrh	r3, [r1, #12]
 8000ede:	4605      	mov	r5, r0
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	05db      	lsls	r3, r3, #23
 8000ee4:	4616      	mov	r6, r2
 8000ee6:	d505      	bpl.n	8000ef4 <__swrite+0x1e>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	2200      	movs	r2, #0
 8000eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef0:	f000 f8d0 	bl	8001094 <_lseek_r>
 8000ef4:	89a3      	ldrh	r3, [r4, #12]
 8000ef6:	4632      	mov	r2, r6
 8000ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000efc:	4628      	mov	r0, r5
 8000efe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f02:	81a3      	strh	r3, [r4, #12]
 8000f04:	463b      	mov	r3, r7
 8000f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0a:	f000 b8e7 	b.w	80010dc <_write_r>

08000f0e <__sseek>:
 8000f0e:	b510      	push	{r4, lr}
 8000f10:	460c      	mov	r4, r1
 8000f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f16:	f000 f8bd 	bl	8001094 <_lseek_r>
 8000f1a:	1c43      	adds	r3, r0, #1
 8000f1c:	89a3      	ldrh	r3, [r4, #12]
 8000f1e:	bf15      	itete	ne
 8000f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000f2a:	81a3      	strheq	r3, [r4, #12]
 8000f2c:	bf18      	it	ne
 8000f2e:	81a3      	strhne	r3, [r4, #12]
 8000f30:	bd10      	pop	{r4, pc}

08000f32 <__sclose>:
 8000f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f36:	f000 b89d 	b.w	8001074 <_close_r>

08000f3a <__swbuf_r>:
 8000f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3c:	460e      	mov	r6, r1
 8000f3e:	4614      	mov	r4, r2
 8000f40:	4605      	mov	r5, r0
 8000f42:	b118      	cbz	r0, 8000f4c <__swbuf_r+0x12>
 8000f44:	6a03      	ldr	r3, [r0, #32]
 8000f46:	b90b      	cbnz	r3, 8000f4c <__swbuf_r+0x12>
 8000f48:	f7ff ff0e 	bl	8000d68 <__sinit>
 8000f4c:	69a3      	ldr	r3, [r4, #24]
 8000f4e:	60a3      	str	r3, [r4, #8]
 8000f50:	89a3      	ldrh	r3, [r4, #12]
 8000f52:	071a      	lsls	r2, r3, #28
 8000f54:	d501      	bpl.n	8000f5a <__swbuf_r+0x20>
 8000f56:	6923      	ldr	r3, [r4, #16]
 8000f58:	b943      	cbnz	r3, 8000f6c <__swbuf_r+0x32>
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f000 f82b 	bl	8000fb8 <__swsetup_r>
 8000f62:	b118      	cbz	r0, 8000f6c <__swbuf_r+0x32>
 8000f64:	f04f 37ff 	mov.w	r7, #4294967295
 8000f68:	4638      	mov	r0, r7
 8000f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	b2f6      	uxtb	r6, r6
 8000f70:	6922      	ldr	r2, [r4, #16]
 8000f72:	4637      	mov	r7, r6
 8000f74:	1a98      	subs	r0, r3, r2
 8000f76:	6963      	ldr	r3, [r4, #20]
 8000f78:	4283      	cmp	r3, r0
 8000f7a:	dc05      	bgt.n	8000f88 <__swbuf_r+0x4e>
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 fd34 	bl	80019ec <_fflush_r>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d1ed      	bne.n	8000f64 <__swbuf_r+0x2a>
 8000f88:	68a3      	ldr	r3, [r4, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60a3      	str	r3, [r4, #8]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	6022      	str	r2, [r4, #0]
 8000f94:	701e      	strb	r6, [r3, #0]
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	6962      	ldr	r2, [r4, #20]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d004      	beq.n	8000fa8 <__swbuf_r+0x6e>
 8000f9e:	89a3      	ldrh	r3, [r4, #12]
 8000fa0:	07db      	lsls	r3, r3, #31
 8000fa2:	d5e1      	bpl.n	8000f68 <__swbuf_r+0x2e>
 8000fa4:	2e0a      	cmp	r6, #10
 8000fa6:	d1df      	bne.n	8000f68 <__swbuf_r+0x2e>
 8000fa8:	4621      	mov	r1, r4
 8000faa:	4628      	mov	r0, r5
 8000fac:	f000 fd1e 	bl	80019ec <_fflush_r>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	d0d9      	beq.n	8000f68 <__swbuf_r+0x2e>
 8000fb4:	e7d6      	b.n	8000f64 <__swbuf_r+0x2a>
	...

08000fb8 <__swsetup_r>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <__swsetup_r+0xa8>)
 8000fbc:	4605      	mov	r5, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	b118      	cbz	r0, 8000fcc <__swsetup_r+0x14>
 8000fc4:	6a03      	ldr	r3, [r0, #32]
 8000fc6:	b90b      	cbnz	r3, 8000fcc <__swsetup_r+0x14>
 8000fc8:	f7ff fece 	bl	8000d68 <__sinit>
 8000fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fd0:	0719      	lsls	r1, r3, #28
 8000fd2:	d422      	bmi.n	800101a <__swsetup_r+0x62>
 8000fd4:	06da      	lsls	r2, r3, #27
 8000fd6:	d407      	bmi.n	8000fe8 <__swsetup_r+0x30>
 8000fd8:	2209      	movs	r2, #9
 8000fda:	602a      	str	r2, [r5, #0]
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	81a3      	strh	r3, [r4, #12]
 8000fe6:	e033      	b.n	8001050 <__swsetup_r+0x98>
 8000fe8:	0758      	lsls	r0, r3, #29
 8000fea:	d512      	bpl.n	8001012 <__swsetup_r+0x5a>
 8000fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fee:	b141      	cbz	r1, 8001002 <__swsetup_r+0x4a>
 8000ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ff4:	4299      	cmp	r1, r3
 8000ff6:	d002      	beq.n	8000ffe <__swsetup_r+0x46>
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f000 f8af 	bl	800115c <_free_r>
 8000ffe:	2300      	movs	r3, #0
 8001000:	6363      	str	r3, [r4, #52]	@ 0x34
 8001002:	89a3      	ldrh	r3, [r4, #12]
 8001004:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001008:	81a3      	strh	r3, [r4, #12]
 800100a:	2300      	movs	r3, #0
 800100c:	6063      	str	r3, [r4, #4]
 800100e:	6923      	ldr	r3, [r4, #16]
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	89a3      	ldrh	r3, [r4, #12]
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	81a3      	strh	r3, [r4, #12]
 800101a:	6923      	ldr	r3, [r4, #16]
 800101c:	b94b      	cbnz	r3, 8001032 <__swsetup_r+0x7a>
 800101e:	89a3      	ldrh	r3, [r4, #12]
 8001020:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001028:	d003      	beq.n	8001032 <__swsetup_r+0x7a>
 800102a:	4621      	mov	r1, r4
 800102c:	4628      	mov	r0, r5
 800102e:	f000 fd2a 	bl	8001a86 <__smakebuf_r>
 8001032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001036:	f013 0201 	ands.w	r2, r3, #1
 800103a:	d00a      	beq.n	8001052 <__swsetup_r+0x9a>
 800103c:	2200      	movs	r2, #0
 800103e:	60a2      	str	r2, [r4, #8]
 8001040:	6962      	ldr	r2, [r4, #20]
 8001042:	4252      	negs	r2, r2
 8001044:	61a2      	str	r2, [r4, #24]
 8001046:	6922      	ldr	r2, [r4, #16]
 8001048:	b942      	cbnz	r2, 800105c <__swsetup_r+0xa4>
 800104a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800104e:	d1c5      	bne.n	8000fdc <__swsetup_r+0x24>
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	0799      	lsls	r1, r3, #30
 8001054:	bf58      	it	pl
 8001056:	6962      	ldrpl	r2, [r4, #20]
 8001058:	60a2      	str	r2, [r4, #8]
 800105a:	e7f4      	b.n	8001046 <__swsetup_r+0x8e>
 800105c:	2000      	movs	r0, #0
 800105e:	e7f7      	b.n	8001050 <__swsetup_r+0x98>
 8001060:	2000000c 	.word	0x2000000c

08001064 <memset>:
 8001064:	4402      	add	r2, r0
 8001066:	4603      	mov	r3, r0
 8001068:	4293      	cmp	r3, r2
 800106a:	d100      	bne.n	800106e <memset+0xa>
 800106c:	4770      	bx	lr
 800106e:	f803 1b01 	strb.w	r1, [r3], #1
 8001072:	e7f9      	b.n	8001068 <memset+0x4>

08001074 <_close_r>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	2300      	movs	r3, #0
 8001078:	4d05      	ldr	r5, [pc, #20]	@ (8001090 <_close_r+0x1c>)
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	602b      	str	r3, [r5, #0]
 8001080:	f7ff fd55 	bl	8000b2e <_close>
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	d102      	bne.n	800108e <_close_r+0x1a>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	b103      	cbz	r3, 800108e <_close_r+0x1a>
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	200001d4 	.word	0x200001d4

08001094 <_lseek_r>:
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4604      	mov	r4, r0
 8001098:	4d06      	ldr	r5, [pc, #24]	@ (80010b4 <_lseek_r+0x20>)
 800109a:	4608      	mov	r0, r1
 800109c:	4611      	mov	r1, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	602a      	str	r2, [r5, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f7ff fd67 	bl	8000b76 <_lseek>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_lseek_r+0x1e>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_lseek_r+0x1e>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	200001d4 	.word	0x200001d4

080010b8 <_read_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	4d06      	ldr	r5, [pc, #24]	@ (80010d8 <_read_r+0x20>)
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	602a      	str	r2, [r5, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f7ff fd14 	bl	8000af4 <_read>
 80010cc:	1c43      	adds	r3, r0, #1
 80010ce:	d102      	bne.n	80010d6 <_read_r+0x1e>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	b103      	cbz	r3, 80010d6 <_read_r+0x1e>
 80010d4:	6023      	str	r3, [r4, #0]
 80010d6:	bd38      	pop	{r3, r4, r5, pc}
 80010d8:	200001d4 	.word	0x200001d4

080010dc <_write_r>:
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	4604      	mov	r4, r0
 80010e0:	4d06      	ldr	r5, [pc, #24]	@ (80010fc <_write_r+0x20>)
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	602a      	str	r2, [r5, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f7ff f8c6 	bl	800027c <_write>
 80010f0:	1c43      	adds	r3, r0, #1
 80010f2:	d102      	bne.n	80010fa <_write_r+0x1e>
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	b103      	cbz	r3, 80010fa <_write_r+0x1e>
 80010f8:	6023      	str	r3, [r4, #0]
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	200001d4 	.word	0x200001d4

08001100 <__errno>:
 8001100:	4b01      	ldr	r3, [pc, #4]	@ (8001108 <__errno+0x8>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c

0800110c <__libc_init_array>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	4d0d      	ldr	r5, [pc, #52]	@ (8001144 <__libc_init_array+0x38>)
 8001110:	2600      	movs	r6, #0
 8001112:	4c0d      	ldr	r4, [pc, #52]	@ (8001148 <__libc_init_array+0x3c>)
 8001114:	1b64      	subs	r4, r4, r5
 8001116:	10a4      	asrs	r4, r4, #2
 8001118:	42a6      	cmp	r6, r4
 800111a:	d109      	bne.n	8001130 <__libc_init_array+0x24>
 800111c:	4d0b      	ldr	r5, [pc, #44]	@ (800114c <__libc_init_array+0x40>)
 800111e:	2600      	movs	r6, #0
 8001120:	4c0b      	ldr	r4, [pc, #44]	@ (8001150 <__libc_init_array+0x44>)
 8001122:	f000 fd2d 	bl	8001b80 <_init>
 8001126:	1b64      	subs	r4, r4, r5
 8001128:	10a4      	asrs	r4, r4, #2
 800112a:	42a6      	cmp	r6, r4
 800112c:	d105      	bne.n	800113a <__libc_init_array+0x2e>
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	f855 3b04 	ldr.w	r3, [r5], #4
 8001134:	3601      	adds	r6, #1
 8001136:	4798      	blx	r3
 8001138:	e7ee      	b.n	8001118 <__libc_init_array+0xc>
 800113a:	f855 3b04 	ldr.w	r3, [r5], #4
 800113e:	3601      	adds	r6, #1
 8001140:	4798      	blx	r3
 8001142:	e7f2      	b.n	800112a <__libc_init_array+0x1e>
 8001144:	080023d8 	.word	0x080023d8
 8001148:	080023d8 	.word	0x080023d8
 800114c:	080023d8 	.word	0x080023d8
 8001150:	080023dc 	.word	0x080023dc

08001154 <__retarget_lock_init_recursive>:
 8001154:	4770      	bx	lr

08001156 <__retarget_lock_acquire_recursive>:
 8001156:	4770      	bx	lr

08001158 <__retarget_lock_release_recursive>:
 8001158:	4770      	bx	lr
	...

0800115c <_free_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4605      	mov	r5, r0
 8001160:	2900      	cmp	r1, #0
 8001162:	d041      	beq.n	80011e8 <_free_r+0x8c>
 8001164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001168:	1f0c      	subs	r4, r1, #4
 800116a:	2b00      	cmp	r3, #0
 800116c:	bfb8      	it	lt
 800116e:	18e4      	addlt	r4, r4, r3
 8001170:	f000 f8e0 	bl	8001334 <__malloc_lock>
 8001174:	4a1d      	ldr	r2, [pc, #116]	@ (80011ec <_free_r+0x90>)
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	b933      	cbnz	r3, 8001188 <_free_r+0x2c>
 800117a:	6063      	str	r3, [r4, #4]
 800117c:	6014      	str	r4, [r2, #0]
 800117e:	4628      	mov	r0, r5
 8001180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001184:	f000 b8dc 	b.w	8001340 <__malloc_unlock>
 8001188:	42a3      	cmp	r3, r4
 800118a:	d908      	bls.n	800119e <_free_r+0x42>
 800118c:	6820      	ldr	r0, [r4, #0]
 800118e:	1821      	adds	r1, r4, r0
 8001190:	428b      	cmp	r3, r1
 8001192:	bf01      	itttt	eq
 8001194:	6819      	ldreq	r1, [r3, #0]
 8001196:	685b      	ldreq	r3, [r3, #4]
 8001198:	1809      	addeq	r1, r1, r0
 800119a:	6021      	streq	r1, [r4, #0]
 800119c:	e7ed      	b.n	800117a <_free_r+0x1e>
 800119e:	461a      	mov	r2, r3
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	b10b      	cbz	r3, 80011a8 <_free_r+0x4c>
 80011a4:	42a3      	cmp	r3, r4
 80011a6:	d9fa      	bls.n	800119e <_free_r+0x42>
 80011a8:	6811      	ldr	r1, [r2, #0]
 80011aa:	1850      	adds	r0, r2, r1
 80011ac:	42a0      	cmp	r0, r4
 80011ae:	d10b      	bne.n	80011c8 <_free_r+0x6c>
 80011b0:	6820      	ldr	r0, [r4, #0]
 80011b2:	4401      	add	r1, r0
 80011b4:	1850      	adds	r0, r2, r1
 80011b6:	6011      	str	r1, [r2, #0]
 80011b8:	4283      	cmp	r3, r0
 80011ba:	d1e0      	bne.n	800117e <_free_r+0x22>
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4408      	add	r0, r1
 80011c2:	6053      	str	r3, [r2, #4]
 80011c4:	6010      	str	r0, [r2, #0]
 80011c6:	e7da      	b.n	800117e <_free_r+0x22>
 80011c8:	d902      	bls.n	80011d0 <_free_r+0x74>
 80011ca:	230c      	movs	r3, #12
 80011cc:	602b      	str	r3, [r5, #0]
 80011ce:	e7d6      	b.n	800117e <_free_r+0x22>
 80011d0:	6820      	ldr	r0, [r4, #0]
 80011d2:	1821      	adds	r1, r4, r0
 80011d4:	428b      	cmp	r3, r1
 80011d6:	bf02      	ittt	eq
 80011d8:	6819      	ldreq	r1, [r3, #0]
 80011da:	685b      	ldreq	r3, [r3, #4]
 80011dc:	1809      	addeq	r1, r1, r0
 80011de:	6063      	str	r3, [r4, #4]
 80011e0:	bf08      	it	eq
 80011e2:	6021      	streq	r1, [r4, #0]
 80011e4:	6054      	str	r4, [r2, #4]
 80011e6:	e7ca      	b.n	800117e <_free_r+0x22>
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop
 80011ec:	200001e0 	.word	0x200001e0

080011f0 <sbrk_aligned>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	4e0f      	ldr	r6, [pc, #60]	@ (8001230 <sbrk_aligned+0x40>)
 80011f4:	460c      	mov	r4, r1
 80011f6:	4605      	mov	r5, r0
 80011f8:	6831      	ldr	r1, [r6, #0]
 80011fa:	b911      	cbnz	r1, 8001202 <sbrk_aligned+0x12>
 80011fc:	f000 fca2 	bl	8001b44 <_sbrk_r>
 8001200:	6030      	str	r0, [r6, #0]
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	f000 fc9d 	bl	8001b44 <_sbrk_r>
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	d103      	bne.n	8001216 <sbrk_aligned+0x26>
 800120e:	f04f 34ff 	mov.w	r4, #4294967295
 8001212:	4620      	mov	r0, r4
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	1cc4      	adds	r4, r0, #3
 8001218:	f024 0403 	bic.w	r4, r4, #3
 800121c:	42a0      	cmp	r0, r4
 800121e:	d0f8      	beq.n	8001212 <sbrk_aligned+0x22>
 8001220:	1a21      	subs	r1, r4, r0
 8001222:	4628      	mov	r0, r5
 8001224:	f000 fc8e 	bl	8001b44 <_sbrk_r>
 8001228:	3001      	adds	r0, #1
 800122a:	d1f2      	bne.n	8001212 <sbrk_aligned+0x22>
 800122c:	e7ef      	b.n	800120e <sbrk_aligned+0x1e>
 800122e:	bf00      	nop
 8001230:	200001dc 	.word	0x200001dc

08001234 <_malloc_r>:
 8001234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001238:	1ccd      	adds	r5, r1, #3
 800123a:	4606      	mov	r6, r0
 800123c:	f025 0503 	bic.w	r5, r5, #3
 8001240:	3508      	adds	r5, #8
 8001242:	2d0c      	cmp	r5, #12
 8001244:	bf38      	it	cc
 8001246:	250c      	movcc	r5, #12
 8001248:	2d00      	cmp	r5, #0
 800124a:	db01      	blt.n	8001250 <_malloc_r+0x1c>
 800124c:	42a9      	cmp	r1, r5
 800124e:	d904      	bls.n	800125a <_malloc_r+0x26>
 8001250:	230c      	movs	r3, #12
 8001252:	6033      	str	r3, [r6, #0]
 8001254:	2000      	movs	r0, #0
 8001256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800125a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001330 <_malloc_r+0xfc>
 800125e:	f000 f869 	bl	8001334 <__malloc_lock>
 8001262:	f8d8 3000 	ldr.w	r3, [r8]
 8001266:	461c      	mov	r4, r3
 8001268:	bb44      	cbnz	r4, 80012bc <_malloc_r+0x88>
 800126a:	4629      	mov	r1, r5
 800126c:	4630      	mov	r0, r6
 800126e:	f7ff ffbf 	bl	80011f0 <sbrk_aligned>
 8001272:	1c43      	adds	r3, r0, #1
 8001274:	4604      	mov	r4, r0
 8001276:	d158      	bne.n	800132a <_malloc_r+0xf6>
 8001278:	f8d8 4000 	ldr.w	r4, [r8]
 800127c:	4627      	mov	r7, r4
 800127e:	2f00      	cmp	r7, #0
 8001280:	d143      	bne.n	800130a <_malloc_r+0xd6>
 8001282:	2c00      	cmp	r4, #0
 8001284:	d04b      	beq.n	800131e <_malloc_r+0xea>
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	4639      	mov	r1, r7
 800128a:	4630      	mov	r0, r6
 800128c:	eb04 0903 	add.w	r9, r4, r3
 8001290:	f000 fc58 	bl	8001b44 <_sbrk_r>
 8001294:	4581      	cmp	r9, r0
 8001296:	d142      	bne.n	800131e <_malloc_r+0xea>
 8001298:	6821      	ldr	r1, [r4, #0]
 800129a:	4630      	mov	r0, r6
 800129c:	1a6d      	subs	r5, r5, r1
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff ffa6 	bl	80011f0 <sbrk_aligned>
 80012a4:	3001      	adds	r0, #1
 80012a6:	d03a      	beq.n	800131e <_malloc_r+0xea>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	442b      	add	r3, r5
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	f8d8 3000 	ldr.w	r3, [r8]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	bb62      	cbnz	r2, 8001310 <_malloc_r+0xdc>
 80012b6:	f8c8 7000 	str.w	r7, [r8]
 80012ba:	e00f      	b.n	80012dc <_malloc_r+0xa8>
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	1b52      	subs	r2, r2, r5
 80012c0:	d420      	bmi.n	8001304 <_malloc_r+0xd0>
 80012c2:	2a0b      	cmp	r2, #11
 80012c4:	d917      	bls.n	80012f6 <_malloc_r+0xc2>
 80012c6:	1961      	adds	r1, r4, r5
 80012c8:	42a3      	cmp	r3, r4
 80012ca:	6025      	str	r5, [r4, #0]
 80012cc:	bf18      	it	ne
 80012ce:	6059      	strne	r1, [r3, #4]
 80012d0:	6863      	ldr	r3, [r4, #4]
 80012d2:	bf08      	it	eq
 80012d4:	f8c8 1000 	streq.w	r1, [r8]
 80012d8:	5162      	str	r2, [r4, r5]
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	4630      	mov	r0, r6
 80012de:	f000 f82f 	bl	8001340 <__malloc_unlock>
 80012e2:	f104 000b 	add.w	r0, r4, #11
 80012e6:	1d23      	adds	r3, r4, #4
 80012e8:	f020 0007 	bic.w	r0, r0, #7
 80012ec:	1ac2      	subs	r2, r0, r3
 80012ee:	bf1c      	itt	ne
 80012f0:	1a1b      	subne	r3, r3, r0
 80012f2:	50a3      	strne	r3, [r4, r2]
 80012f4:	e7af      	b.n	8001256 <_malloc_r+0x22>
 80012f6:	6862      	ldr	r2, [r4, #4]
 80012f8:	42a3      	cmp	r3, r4
 80012fa:	bf0c      	ite	eq
 80012fc:	f8c8 2000 	streq.w	r2, [r8]
 8001300:	605a      	strne	r2, [r3, #4]
 8001302:	e7eb      	b.n	80012dc <_malloc_r+0xa8>
 8001304:	4623      	mov	r3, r4
 8001306:	6864      	ldr	r4, [r4, #4]
 8001308:	e7ae      	b.n	8001268 <_malloc_r+0x34>
 800130a:	463c      	mov	r4, r7
 800130c:	687f      	ldr	r7, [r7, #4]
 800130e:	e7b6      	b.n	800127e <_malloc_r+0x4a>
 8001310:	461a      	mov	r2, r3
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	42a3      	cmp	r3, r4
 8001316:	d1fb      	bne.n	8001310 <_malloc_r+0xdc>
 8001318:	2300      	movs	r3, #0
 800131a:	6053      	str	r3, [r2, #4]
 800131c:	e7de      	b.n	80012dc <_malloc_r+0xa8>
 800131e:	230c      	movs	r3, #12
 8001320:	4630      	mov	r0, r6
 8001322:	6033      	str	r3, [r6, #0]
 8001324:	f000 f80c 	bl	8001340 <__malloc_unlock>
 8001328:	e794      	b.n	8001254 <_malloc_r+0x20>
 800132a:	6005      	str	r5, [r0, #0]
 800132c:	e7d6      	b.n	80012dc <_malloc_r+0xa8>
 800132e:	bf00      	nop
 8001330:	200001e0 	.word	0x200001e0

08001334 <__malloc_lock>:
 8001334:	4801      	ldr	r0, [pc, #4]	@ (800133c <__malloc_lock+0x8>)
 8001336:	f7ff bf0e 	b.w	8001156 <__retarget_lock_acquire_recursive>
 800133a:	bf00      	nop
 800133c:	200001d8 	.word	0x200001d8

08001340 <__malloc_unlock>:
 8001340:	4801      	ldr	r0, [pc, #4]	@ (8001348 <__malloc_unlock+0x8>)
 8001342:	f7ff bf09 	b.w	8001158 <__retarget_lock_release_recursive>
 8001346:	bf00      	nop
 8001348:	200001d8 	.word	0x200001d8

0800134c <__sfputc_r>:
 800134c:	6893      	ldr	r3, [r2, #8]
 800134e:	3b01      	subs	r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	b410      	push	{r4}
 8001354:	6093      	str	r3, [r2, #8]
 8001356:	da07      	bge.n	8001368 <__sfputc_r+0x1c>
 8001358:	6994      	ldr	r4, [r2, #24]
 800135a:	42a3      	cmp	r3, r4
 800135c:	db01      	blt.n	8001362 <__sfputc_r+0x16>
 800135e:	290a      	cmp	r1, #10
 8001360:	d102      	bne.n	8001368 <__sfputc_r+0x1c>
 8001362:	bc10      	pop	{r4}
 8001364:	f7ff bde9 	b.w	8000f3a <__swbuf_r>
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	1c58      	adds	r0, r3, #1
 800136c:	6010      	str	r0, [r2, #0]
 800136e:	4608      	mov	r0, r1
 8001370:	7019      	strb	r1, [r3, #0]
 8001372:	bc10      	pop	{r4}
 8001374:	4770      	bx	lr

08001376 <__sfputs_r>:
 8001376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001378:	4606      	mov	r6, r0
 800137a:	460f      	mov	r7, r1
 800137c:	4614      	mov	r4, r2
 800137e:	18d5      	adds	r5, r2, r3
 8001380:	42ac      	cmp	r4, r5
 8001382:	d101      	bne.n	8001388 <__sfputs_r+0x12>
 8001384:	2000      	movs	r0, #0
 8001386:	e007      	b.n	8001398 <__sfputs_r+0x22>
 8001388:	463a      	mov	r2, r7
 800138a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800138e:	4630      	mov	r0, r6
 8001390:	f7ff ffdc 	bl	800134c <__sfputc_r>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d1f3      	bne.n	8001380 <__sfputs_r+0xa>
 8001398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800139c <_vfiprintf_r>:
 800139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a0:	460d      	mov	r5, r1
 80013a2:	b09d      	sub	sp, #116	@ 0x74
 80013a4:	4614      	mov	r4, r2
 80013a6:	4698      	mov	r8, r3
 80013a8:	4606      	mov	r6, r0
 80013aa:	b118      	cbz	r0, 80013b4 <_vfiprintf_r+0x18>
 80013ac:	6a03      	ldr	r3, [r0, #32]
 80013ae:	b90b      	cbnz	r3, 80013b4 <_vfiprintf_r+0x18>
 80013b0:	f7ff fcda 	bl	8000d68 <__sinit>
 80013b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013b6:	07d9      	lsls	r1, r3, #31
 80013b8:	d405      	bmi.n	80013c6 <_vfiprintf_r+0x2a>
 80013ba:	89ab      	ldrh	r3, [r5, #12]
 80013bc:	059a      	lsls	r2, r3, #22
 80013be:	d402      	bmi.n	80013c6 <_vfiprintf_r+0x2a>
 80013c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013c2:	f7ff fec8 	bl	8001156 <__retarget_lock_acquire_recursive>
 80013c6:	89ab      	ldrh	r3, [r5, #12]
 80013c8:	071b      	lsls	r3, r3, #28
 80013ca:	d501      	bpl.n	80013d0 <_vfiprintf_r+0x34>
 80013cc:	692b      	ldr	r3, [r5, #16]
 80013ce:	b99b      	cbnz	r3, 80013f8 <_vfiprintf_r+0x5c>
 80013d0:	4629      	mov	r1, r5
 80013d2:	4630      	mov	r0, r6
 80013d4:	f7ff fdf0 	bl	8000fb8 <__swsetup_r>
 80013d8:	b170      	cbz	r0, 80013f8 <_vfiprintf_r+0x5c>
 80013da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013dc:	07dc      	lsls	r4, r3, #31
 80013de:	d504      	bpl.n	80013ea <_vfiprintf_r+0x4e>
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	b01d      	add	sp, #116	@ 0x74
 80013e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ea:	89ab      	ldrh	r3, [r5, #12]
 80013ec:	0598      	lsls	r0, r3, #22
 80013ee:	d4f7      	bmi.n	80013e0 <_vfiprintf_r+0x44>
 80013f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013f2:	f7ff feb1 	bl	8001158 <__retarget_lock_release_recursive>
 80013f6:	e7f3      	b.n	80013e0 <_vfiprintf_r+0x44>
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80013fe:	f04f 0901 	mov.w	r9, #1
 8001402:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80015b8 <_vfiprintf_r+0x21c>
 8001406:	9309      	str	r3, [sp, #36]	@ 0x24
 8001408:	2320      	movs	r3, #32
 800140a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800140e:	2330      	movs	r3, #48	@ 0x30
 8001410:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001414:	4623      	mov	r3, r4
 8001416:	469a      	mov	sl, r3
 8001418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800141c:	b10a      	cbz	r2, 8001422 <_vfiprintf_r+0x86>
 800141e:	2a25      	cmp	r2, #37	@ 0x25
 8001420:	d1f9      	bne.n	8001416 <_vfiprintf_r+0x7a>
 8001422:	ebba 0b04 	subs.w	fp, sl, r4
 8001426:	d00b      	beq.n	8001440 <_vfiprintf_r+0xa4>
 8001428:	465b      	mov	r3, fp
 800142a:	4622      	mov	r2, r4
 800142c:	4629      	mov	r1, r5
 800142e:	4630      	mov	r0, r6
 8001430:	f7ff ffa1 	bl	8001376 <__sfputs_r>
 8001434:	3001      	adds	r0, #1
 8001436:	f000 80a7 	beq.w	8001588 <_vfiprintf_r+0x1ec>
 800143a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800143c:	445a      	add	r2, fp
 800143e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001440:	f89a 3000 	ldrb.w	r3, [sl]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 809f 	beq.w	8001588 <_vfiprintf_r+0x1ec>
 800144a:	2300      	movs	r3, #0
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	f10a 0a01 	add.w	sl, sl, #1
 8001454:	9304      	str	r3, [sp, #16]
 8001456:	9307      	str	r3, [sp, #28]
 8001458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800145c:	931a      	str	r3, [sp, #104]	@ 0x68
 800145e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001462:	4654      	mov	r4, sl
 8001464:	2205      	movs	r2, #5
 8001466:	4854      	ldr	r0, [pc, #336]	@ (80015b8 <_vfiprintf_r+0x21c>)
 8001468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800146c:	f000 fb7a 	bl	8001b64 <memchr>
 8001470:	9a04      	ldr	r2, [sp, #16]
 8001472:	b9d8      	cbnz	r0, 80014ac <_vfiprintf_r+0x110>
 8001474:	06d1      	lsls	r1, r2, #27
 8001476:	bf44      	itt	mi
 8001478:	2320      	movmi	r3, #32
 800147a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800147e:	0713      	lsls	r3, r2, #28
 8001480:	bf44      	itt	mi
 8001482:	232b      	movmi	r3, #43	@ 0x2b
 8001484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001488:	f89a 3000 	ldrb.w	r3, [sl]
 800148c:	2b2a      	cmp	r3, #42	@ 0x2a
 800148e:	d015      	beq.n	80014bc <_vfiprintf_r+0x120>
 8001490:	9a07      	ldr	r2, [sp, #28]
 8001492:	4654      	mov	r4, sl
 8001494:	2000      	movs	r0, #0
 8001496:	f04f 0c0a 	mov.w	ip, #10
 800149a:	4621      	mov	r1, r4
 800149c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014a0:	3b30      	subs	r3, #48	@ 0x30
 80014a2:	2b09      	cmp	r3, #9
 80014a4:	d94b      	bls.n	800153e <_vfiprintf_r+0x1a2>
 80014a6:	b1b0      	cbz	r0, 80014d6 <_vfiprintf_r+0x13a>
 80014a8:	9207      	str	r2, [sp, #28]
 80014aa:	e014      	b.n	80014d6 <_vfiprintf_r+0x13a>
 80014ac:	eba0 0308 	sub.w	r3, r0, r8
 80014b0:	46a2      	mov	sl, r4
 80014b2:	fa09 f303 	lsl.w	r3, r9, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	e7d2      	b.n	8001462 <_vfiprintf_r+0xc6>
 80014bc:	9b03      	ldr	r3, [sp, #12]
 80014be:	1d19      	adds	r1, r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	bfbb      	ittet	lt
 80014c8:	425b      	neglt	r3, r3
 80014ca:	f042 0202 	orrlt.w	r2, r2, #2
 80014ce:	9307      	strge	r3, [sp, #28]
 80014d0:	9307      	strlt	r3, [sp, #28]
 80014d2:	bfb8      	it	lt
 80014d4:	9204      	strlt	r2, [sp, #16]
 80014d6:	7823      	ldrb	r3, [r4, #0]
 80014d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80014da:	d10a      	bne.n	80014f2 <_vfiprintf_r+0x156>
 80014dc:	7863      	ldrb	r3, [r4, #1]
 80014de:	2b2a      	cmp	r3, #42	@ 0x2a
 80014e0:	d132      	bne.n	8001548 <_vfiprintf_r+0x1ac>
 80014e2:	9b03      	ldr	r3, [sp, #12]
 80014e4:	3402      	adds	r4, #2
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80014ee:	9203      	str	r2, [sp, #12]
 80014f0:	9305      	str	r3, [sp, #20]
 80014f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80015bc <_vfiprintf_r+0x220>
 80014f6:	2203      	movs	r2, #3
 80014f8:	7821      	ldrb	r1, [r4, #0]
 80014fa:	4650      	mov	r0, sl
 80014fc:	f000 fb32 	bl	8001b64 <memchr>
 8001500:	b138      	cbz	r0, 8001512 <_vfiprintf_r+0x176>
 8001502:	eba0 000a 	sub.w	r0, r0, sl
 8001506:	2240      	movs	r2, #64	@ 0x40
 8001508:	9b04      	ldr	r3, [sp, #16]
 800150a:	3401      	adds	r4, #1
 800150c:	4082      	lsls	r2, r0
 800150e:	4313      	orrs	r3, r2
 8001510:	9304      	str	r3, [sp, #16]
 8001512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001516:	2206      	movs	r2, #6
 8001518:	4829      	ldr	r0, [pc, #164]	@ (80015c0 <_vfiprintf_r+0x224>)
 800151a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800151e:	f000 fb21 	bl	8001b64 <memchr>
 8001522:	2800      	cmp	r0, #0
 8001524:	d03f      	beq.n	80015a6 <_vfiprintf_r+0x20a>
 8001526:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <_vfiprintf_r+0x228>)
 8001528:	bb1b      	cbnz	r3, 8001572 <_vfiprintf_r+0x1d6>
 800152a:	9b03      	ldr	r3, [sp, #12]
 800152c:	3307      	adds	r3, #7
 800152e:	f023 0307 	bic.w	r3, r3, #7
 8001532:	3308      	adds	r3, #8
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001538:	443b      	add	r3, r7
 800153a:	9309      	str	r3, [sp, #36]	@ 0x24
 800153c:	e76a      	b.n	8001414 <_vfiprintf_r+0x78>
 800153e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001542:	460c      	mov	r4, r1
 8001544:	2001      	movs	r0, #1
 8001546:	e7a8      	b.n	800149a <_vfiprintf_r+0xfe>
 8001548:	2300      	movs	r3, #0
 800154a:	3401      	adds	r4, #1
 800154c:	f04f 0c0a 	mov.w	ip, #10
 8001550:	4619      	mov	r1, r3
 8001552:	9305      	str	r3, [sp, #20]
 8001554:	4620      	mov	r0, r4
 8001556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800155a:	3a30      	subs	r2, #48	@ 0x30
 800155c:	2a09      	cmp	r2, #9
 800155e:	d903      	bls.n	8001568 <_vfiprintf_r+0x1cc>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0c6      	beq.n	80014f2 <_vfiprintf_r+0x156>
 8001564:	9105      	str	r1, [sp, #20]
 8001566:	e7c4      	b.n	80014f2 <_vfiprintf_r+0x156>
 8001568:	fb0c 2101 	mla	r1, ip, r1, r2
 800156c:	4604      	mov	r4, r0
 800156e:	2301      	movs	r3, #1
 8001570:	e7f0      	b.n	8001554 <_vfiprintf_r+0x1b8>
 8001572:	ab03      	add	r3, sp, #12
 8001574:	462a      	mov	r2, r5
 8001576:	a904      	add	r1, sp, #16
 8001578:	4630      	mov	r0, r6
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <_vfiprintf_r+0x22c>)
 800157e:	f3af 8000 	nop.w
 8001582:	4607      	mov	r7, r0
 8001584:	1c78      	adds	r0, r7, #1
 8001586:	d1d6      	bne.n	8001536 <_vfiprintf_r+0x19a>
 8001588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800158a:	07d9      	lsls	r1, r3, #31
 800158c:	d405      	bmi.n	800159a <_vfiprintf_r+0x1fe>
 800158e:	89ab      	ldrh	r3, [r5, #12]
 8001590:	059a      	lsls	r2, r3, #22
 8001592:	d402      	bmi.n	800159a <_vfiprintf_r+0x1fe>
 8001594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001596:	f7ff fddf 	bl	8001158 <__retarget_lock_release_recursive>
 800159a:	89ab      	ldrh	r3, [r5, #12]
 800159c:	065b      	lsls	r3, r3, #25
 800159e:	f53f af1f 	bmi.w	80013e0 <_vfiprintf_r+0x44>
 80015a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80015a4:	e71e      	b.n	80013e4 <_vfiprintf_r+0x48>
 80015a6:	ab03      	add	r3, sp, #12
 80015a8:	462a      	mov	r2, r5
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4630      	mov	r0, r6
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <_vfiprintf_r+0x22c>)
 80015b2:	f000 f87d 	bl	80016b0 <_printf_i>
 80015b6:	e7e4      	b.n	8001582 <_vfiprintf_r+0x1e6>
 80015b8:	080023a4 	.word	0x080023a4
 80015bc:	080023aa 	.word	0x080023aa
 80015c0:	080023ae 	.word	0x080023ae
 80015c4:	00000000 	.word	0x00000000
 80015c8:	08001377 	.word	0x08001377

080015cc <_printf_common>:
 80015cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015d0:	4616      	mov	r6, r2
 80015d2:	4698      	mov	r8, r3
 80015d4:	688a      	ldr	r2, [r1, #8]
 80015d6:	4607      	mov	r7, r0
 80015d8:	690b      	ldr	r3, [r1, #16]
 80015da:	460c      	mov	r4, r1
 80015dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	bfb8      	it	lt
 80015e4:	4613      	movlt	r3, r2
 80015e6:	6033      	str	r3, [r6, #0]
 80015e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80015ec:	b10a      	cbz	r2, 80015f2 <_printf_common+0x26>
 80015ee:	3301      	adds	r3, #1
 80015f0:	6033      	str	r3, [r6, #0]
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	0699      	lsls	r1, r3, #26
 80015f6:	bf42      	ittt	mi
 80015f8:	6833      	ldrmi	r3, [r6, #0]
 80015fa:	3302      	addmi	r3, #2
 80015fc:	6033      	strmi	r3, [r6, #0]
 80015fe:	6825      	ldr	r5, [r4, #0]
 8001600:	f015 0506 	ands.w	r5, r5, #6
 8001604:	d106      	bne.n	8001614 <_printf_common+0x48>
 8001606:	f104 0a19 	add.w	sl, r4, #25
 800160a:	68e3      	ldr	r3, [r4, #12]
 800160c:	6832      	ldr	r2, [r6, #0]
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	42ab      	cmp	r3, r5
 8001612:	dc2b      	bgt.n	800166c <_printf_common+0xa0>
 8001614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	3b00      	subs	r3, #0
 800161c:	bf18      	it	ne
 800161e:	2301      	movne	r3, #1
 8001620:	0692      	lsls	r2, r2, #26
 8001622:	d430      	bmi.n	8001686 <_printf_common+0xba>
 8001624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001628:	4641      	mov	r1, r8
 800162a:	4638      	mov	r0, r7
 800162c:	47c8      	blx	r9
 800162e:	3001      	adds	r0, #1
 8001630:	d023      	beq.n	800167a <_printf_common+0xae>
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	341a      	adds	r4, #26
 8001636:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800163a:	f003 0306 	and.w	r3, r3, #6
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf0a      	itet	eq
 8001642:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8001646:	2500      	movne	r5, #0
 8001648:	6833      	ldreq	r3, [r6, #0]
 800164a:	f04f 0600 	mov.w	r6, #0
 800164e:	bf08      	it	eq
 8001650:	1aed      	subeq	r5, r5, r3
 8001652:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001656:	bf08      	it	eq
 8001658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800165c:	4293      	cmp	r3, r2
 800165e:	bfc4      	itt	gt
 8001660:	1a9b      	subgt	r3, r3, r2
 8001662:	18ed      	addgt	r5, r5, r3
 8001664:	42b5      	cmp	r5, r6
 8001666:	d11a      	bne.n	800169e <_printf_common+0xd2>
 8001668:	2000      	movs	r0, #0
 800166a:	e008      	b.n	800167e <_printf_common+0xb2>
 800166c:	2301      	movs	r3, #1
 800166e:	4652      	mov	r2, sl
 8001670:	4641      	mov	r1, r8
 8001672:	4638      	mov	r0, r7
 8001674:	47c8      	blx	r9
 8001676:	3001      	adds	r0, #1
 8001678:	d103      	bne.n	8001682 <_printf_common+0xb6>
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001682:	3501      	adds	r5, #1
 8001684:	e7c1      	b.n	800160a <_printf_common+0x3e>
 8001686:	18e1      	adds	r1, r4, r3
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	2030      	movs	r0, #48	@ 0x30
 800168c:	3302      	adds	r3, #2
 800168e:	4422      	add	r2, r4
 8001690:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800169c:	e7c2      	b.n	8001624 <_printf_common+0x58>
 800169e:	2301      	movs	r3, #1
 80016a0:	4622      	mov	r2, r4
 80016a2:	4641      	mov	r1, r8
 80016a4:	4638      	mov	r0, r7
 80016a6:	47c8      	blx	r9
 80016a8:	3001      	adds	r0, #1
 80016aa:	d0e6      	beq.n	800167a <_printf_common+0xae>
 80016ac:	3601      	adds	r6, #1
 80016ae:	e7d9      	b.n	8001664 <_printf_common+0x98>

080016b0 <_printf_i>:
 80016b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016b4:	7e0f      	ldrb	r7, [r1, #24]
 80016b6:	4691      	mov	r9, r2
 80016b8:	4680      	mov	r8, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	2f78      	cmp	r7, #120	@ 0x78
 80016be:	469a      	mov	sl, r3
 80016c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80016c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80016c6:	d807      	bhi.n	80016d8 <_printf_i+0x28>
 80016c8:	2f62      	cmp	r7, #98	@ 0x62
 80016ca:	d80a      	bhi.n	80016e2 <_printf_i+0x32>
 80016cc:	2f00      	cmp	r7, #0
 80016ce:	f000 80d1 	beq.w	8001874 <_printf_i+0x1c4>
 80016d2:	2f58      	cmp	r7, #88	@ 0x58
 80016d4:	f000 80b8 	beq.w	8001848 <_printf_i+0x198>
 80016d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80016e0:	e03a      	b.n	8001758 <_printf_i+0xa8>
 80016e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80016e6:	2b15      	cmp	r3, #21
 80016e8:	d8f6      	bhi.n	80016d8 <_printf_i+0x28>
 80016ea:	a101      	add	r1, pc, #4	@ (adr r1, 80016f0 <_printf_i+0x40>)
 80016ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016f0:	08001749 	.word	0x08001749
 80016f4:	0800175d 	.word	0x0800175d
 80016f8:	080016d9 	.word	0x080016d9
 80016fc:	080016d9 	.word	0x080016d9
 8001700:	080016d9 	.word	0x080016d9
 8001704:	080016d9 	.word	0x080016d9
 8001708:	0800175d 	.word	0x0800175d
 800170c:	080016d9 	.word	0x080016d9
 8001710:	080016d9 	.word	0x080016d9
 8001714:	080016d9 	.word	0x080016d9
 8001718:	080016d9 	.word	0x080016d9
 800171c:	0800185b 	.word	0x0800185b
 8001720:	08001787 	.word	0x08001787
 8001724:	08001815 	.word	0x08001815
 8001728:	080016d9 	.word	0x080016d9
 800172c:	080016d9 	.word	0x080016d9
 8001730:	0800187d 	.word	0x0800187d
 8001734:	080016d9 	.word	0x080016d9
 8001738:	08001787 	.word	0x08001787
 800173c:	080016d9 	.word	0x080016d9
 8001740:	080016d9 	.word	0x080016d9
 8001744:	0800181d 	.word	0x0800181d
 8001748:	6833      	ldr	r3, [r6, #0]
 800174a:	1d1a      	adds	r2, r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6032      	str	r2, [r6, #0]
 8001750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001758:	2301      	movs	r3, #1
 800175a:	e09c      	b.n	8001896 <_printf_i+0x1e6>
 800175c:	6833      	ldr	r3, [r6, #0]
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	1d19      	adds	r1, r3, #4
 8001762:	6031      	str	r1, [r6, #0]
 8001764:	0606      	lsls	r6, r0, #24
 8001766:	d501      	bpl.n	800176c <_printf_i+0xbc>
 8001768:	681d      	ldr	r5, [r3, #0]
 800176a:	e003      	b.n	8001774 <_printf_i+0xc4>
 800176c:	0645      	lsls	r5, r0, #25
 800176e:	d5fb      	bpl.n	8001768 <_printf_i+0xb8>
 8001770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001774:	2d00      	cmp	r5, #0
 8001776:	da03      	bge.n	8001780 <_printf_i+0xd0>
 8001778:	232d      	movs	r3, #45	@ 0x2d
 800177a:	426d      	negs	r5, r5
 800177c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001780:	4858      	ldr	r0, [pc, #352]	@ (80018e4 <_printf_i+0x234>)
 8001782:	230a      	movs	r3, #10
 8001784:	e011      	b.n	80017aa <_printf_i+0xfa>
 8001786:	6821      	ldr	r1, [r4, #0]
 8001788:	6833      	ldr	r3, [r6, #0]
 800178a:	0608      	lsls	r0, r1, #24
 800178c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001790:	d402      	bmi.n	8001798 <_printf_i+0xe8>
 8001792:	0649      	lsls	r1, r1, #25
 8001794:	bf48      	it	mi
 8001796:	b2ad      	uxthmi	r5, r5
 8001798:	2f6f      	cmp	r7, #111	@ 0x6f
 800179a:	6033      	str	r3, [r6, #0]
 800179c:	4851      	ldr	r0, [pc, #324]	@ (80018e4 <_printf_i+0x234>)
 800179e:	bf14      	ite	ne
 80017a0:	230a      	movne	r3, #10
 80017a2:	2308      	moveq	r3, #8
 80017a4:	2100      	movs	r1, #0
 80017a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80017aa:	6866      	ldr	r6, [r4, #4]
 80017ac:	2e00      	cmp	r6, #0
 80017ae:	60a6      	str	r6, [r4, #8]
 80017b0:	db05      	blt.n	80017be <_printf_i+0x10e>
 80017b2:	6821      	ldr	r1, [r4, #0]
 80017b4:	432e      	orrs	r6, r5
 80017b6:	f021 0104 	bic.w	r1, r1, #4
 80017ba:	6021      	str	r1, [r4, #0]
 80017bc:	d04b      	beq.n	8001856 <_printf_i+0x1a6>
 80017be:	4616      	mov	r6, r2
 80017c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80017c4:	fb03 5711 	mls	r7, r3, r1, r5
 80017c8:	5dc7      	ldrb	r7, [r0, r7]
 80017ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017ce:	462f      	mov	r7, r5
 80017d0:	460d      	mov	r5, r1
 80017d2:	42bb      	cmp	r3, r7
 80017d4:	d9f4      	bls.n	80017c0 <_printf_i+0x110>
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d10b      	bne.n	80017f2 <_printf_i+0x142>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	07df      	lsls	r7, r3, #31
 80017de:	d508      	bpl.n	80017f2 <_printf_i+0x142>
 80017e0:	6923      	ldr	r3, [r4, #16]
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	4299      	cmp	r1, r3
 80017e6:	bfde      	ittt	le
 80017e8:	2330      	movle	r3, #48	@ 0x30
 80017ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017f2:	1b92      	subs	r2, r2, r6
 80017f4:	6122      	str	r2, [r4, #16]
 80017f6:	464b      	mov	r3, r9
 80017f8:	aa03      	add	r2, sp, #12
 80017fa:	4621      	mov	r1, r4
 80017fc:	4640      	mov	r0, r8
 80017fe:	f8cd a000 	str.w	sl, [sp]
 8001802:	f7ff fee3 	bl	80015cc <_printf_common>
 8001806:	3001      	adds	r0, #1
 8001808:	d14a      	bne.n	80018a0 <_printf_i+0x1f0>
 800180a:	f04f 30ff 	mov.w	r0, #4294967295
 800180e:	b004      	add	sp, #16
 8001810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	f043 0320 	orr.w	r3, r3, #32
 800181a:	6023      	str	r3, [r4, #0]
 800181c:	2778      	movs	r7, #120	@ 0x78
 800181e:	4832      	ldr	r0, [pc, #200]	@ (80018e8 <_printf_i+0x238>)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001826:	061f      	lsls	r7, r3, #24
 8001828:	6831      	ldr	r1, [r6, #0]
 800182a:	f851 5b04 	ldr.w	r5, [r1], #4
 800182e:	d402      	bmi.n	8001836 <_printf_i+0x186>
 8001830:	065f      	lsls	r7, r3, #25
 8001832:	bf48      	it	mi
 8001834:	b2ad      	uxthmi	r5, r5
 8001836:	6031      	str	r1, [r6, #0]
 8001838:	07d9      	lsls	r1, r3, #31
 800183a:	bf44      	itt	mi
 800183c:	f043 0320 	orrmi.w	r3, r3, #32
 8001840:	6023      	strmi	r3, [r4, #0]
 8001842:	b11d      	cbz	r5, 800184c <_printf_i+0x19c>
 8001844:	2310      	movs	r3, #16
 8001846:	e7ad      	b.n	80017a4 <_printf_i+0xf4>
 8001848:	4826      	ldr	r0, [pc, #152]	@ (80018e4 <_printf_i+0x234>)
 800184a:	e7e9      	b.n	8001820 <_printf_i+0x170>
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	f023 0320 	bic.w	r3, r3, #32
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	e7f6      	b.n	8001844 <_printf_i+0x194>
 8001856:	4616      	mov	r6, r2
 8001858:	e7bd      	b.n	80017d6 <_printf_i+0x126>
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	6825      	ldr	r5, [r4, #0]
 800185e:	1d18      	adds	r0, r3, #4
 8001860:	6961      	ldr	r1, [r4, #20]
 8001862:	6030      	str	r0, [r6, #0]
 8001864:	062e      	lsls	r6, r5, #24
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	d501      	bpl.n	800186e <_printf_i+0x1be>
 800186a:	6019      	str	r1, [r3, #0]
 800186c:	e002      	b.n	8001874 <_printf_i+0x1c4>
 800186e:	0668      	lsls	r0, r5, #25
 8001870:	d5fb      	bpl.n	800186a <_printf_i+0x1ba>
 8001872:	8019      	strh	r1, [r3, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	4616      	mov	r6, r2
 8001878:	6123      	str	r3, [r4, #16]
 800187a:	e7bc      	b.n	80017f6 <_printf_i+0x146>
 800187c:	6833      	ldr	r3, [r6, #0]
 800187e:	2100      	movs	r1, #0
 8001880:	1d1a      	adds	r2, r3, #4
 8001882:	6032      	str	r2, [r6, #0]
 8001884:	681e      	ldr	r6, [r3, #0]
 8001886:	6862      	ldr	r2, [r4, #4]
 8001888:	4630      	mov	r0, r6
 800188a:	f000 f96b 	bl	8001b64 <memchr>
 800188e:	b108      	cbz	r0, 8001894 <_printf_i+0x1e4>
 8001890:	1b80      	subs	r0, r0, r6
 8001892:	6060      	str	r0, [r4, #4]
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	6123      	str	r3, [r4, #16]
 8001898:	2300      	movs	r3, #0
 800189a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800189e:	e7aa      	b.n	80017f6 <_printf_i+0x146>
 80018a0:	6923      	ldr	r3, [r4, #16]
 80018a2:	4632      	mov	r2, r6
 80018a4:	4649      	mov	r1, r9
 80018a6:	4640      	mov	r0, r8
 80018a8:	47d0      	blx	sl
 80018aa:	3001      	adds	r0, #1
 80018ac:	d0ad      	beq.n	800180a <_printf_i+0x15a>
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	079b      	lsls	r3, r3, #30
 80018b2:	d413      	bmi.n	80018dc <_printf_i+0x22c>
 80018b4:	68e0      	ldr	r0, [r4, #12]
 80018b6:	9b03      	ldr	r3, [sp, #12]
 80018b8:	4298      	cmp	r0, r3
 80018ba:	bfb8      	it	lt
 80018bc:	4618      	movlt	r0, r3
 80018be:	e7a6      	b.n	800180e <_printf_i+0x15e>
 80018c0:	2301      	movs	r3, #1
 80018c2:	4632      	mov	r2, r6
 80018c4:	4649      	mov	r1, r9
 80018c6:	4640      	mov	r0, r8
 80018c8:	47d0      	blx	sl
 80018ca:	3001      	adds	r0, #1
 80018cc:	d09d      	beq.n	800180a <_printf_i+0x15a>
 80018ce:	3501      	adds	r5, #1
 80018d0:	68e3      	ldr	r3, [r4, #12]
 80018d2:	9903      	ldr	r1, [sp, #12]
 80018d4:	1a5b      	subs	r3, r3, r1
 80018d6:	42ab      	cmp	r3, r5
 80018d8:	dcf2      	bgt.n	80018c0 <_printf_i+0x210>
 80018da:	e7eb      	b.n	80018b4 <_printf_i+0x204>
 80018dc:	2500      	movs	r5, #0
 80018de:	f104 0619 	add.w	r6, r4, #25
 80018e2:	e7f5      	b.n	80018d0 <_printf_i+0x220>
 80018e4:	080023b5 	.word	0x080023b5
 80018e8:	080023c6 	.word	0x080023c6

080018ec <__sflush_r>:
 80018ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	0716      	lsls	r6, r2, #28
 80018f4:	4605      	mov	r5, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	d454      	bmi.n	80019a4 <__sflush_r+0xb8>
 80018fa:	684b      	ldr	r3, [r1, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dc02      	bgt.n	8001906 <__sflush_r+0x1a>
 8001900:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	dd48      	ble.n	8001998 <__sflush_r+0xac>
 8001906:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001908:	2e00      	cmp	r6, #0
 800190a:	d045      	beq.n	8001998 <__sflush_r+0xac>
 800190c:	2300      	movs	r3, #0
 800190e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001912:	682f      	ldr	r7, [r5, #0]
 8001914:	6a21      	ldr	r1, [r4, #32]
 8001916:	602b      	str	r3, [r5, #0]
 8001918:	d030      	beq.n	800197c <__sflush_r+0x90>
 800191a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	0759      	lsls	r1, r3, #29
 8001920:	d505      	bpl.n	800192e <__sflush_r+0x42>
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	1ad2      	subs	r2, r2, r3
 8001926:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001928:	b10b      	cbz	r3, 800192e <__sflush_r+0x42>
 800192a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800192c:	1ad2      	subs	r2, r2, r3
 800192e:	2300      	movs	r3, #0
 8001930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001932:	6a21      	ldr	r1, [r4, #32]
 8001934:	4628      	mov	r0, r5
 8001936:	47b0      	blx	r6
 8001938:	1c43      	adds	r3, r0, #1
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	d106      	bne.n	800194c <__sflush_r+0x60>
 800193e:	6829      	ldr	r1, [r5, #0]
 8001940:	291d      	cmp	r1, #29
 8001942:	d82b      	bhi.n	800199c <__sflush_r+0xb0>
 8001944:	4a28      	ldr	r2, [pc, #160]	@ (80019e8 <__sflush_r+0xfc>)
 8001946:	40ca      	lsrs	r2, r1
 8001948:	07d6      	lsls	r6, r2, #31
 800194a:	d527      	bpl.n	800199c <__sflush_r+0xb0>
 800194c:	2200      	movs	r2, #0
 800194e:	04d9      	lsls	r1, r3, #19
 8001950:	6062      	str	r2, [r4, #4]
 8001952:	6922      	ldr	r2, [r4, #16]
 8001954:	6022      	str	r2, [r4, #0]
 8001956:	d504      	bpl.n	8001962 <__sflush_r+0x76>
 8001958:	1c42      	adds	r2, r0, #1
 800195a:	d101      	bne.n	8001960 <__sflush_r+0x74>
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	b903      	cbnz	r3, 8001962 <__sflush_r+0x76>
 8001960:	6560      	str	r0, [r4, #84]	@ 0x54
 8001962:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001964:	602f      	str	r7, [r5, #0]
 8001966:	b1b9      	cbz	r1, 8001998 <__sflush_r+0xac>
 8001968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800196c:	4299      	cmp	r1, r3
 800196e:	d002      	beq.n	8001976 <__sflush_r+0x8a>
 8001970:	4628      	mov	r0, r5
 8001972:	f7ff fbf3 	bl	800115c <_free_r>
 8001976:	2300      	movs	r3, #0
 8001978:	6363      	str	r3, [r4, #52]	@ 0x34
 800197a:	e00d      	b.n	8001998 <__sflush_r+0xac>
 800197c:	2301      	movs	r3, #1
 800197e:	4628      	mov	r0, r5
 8001980:	47b0      	blx	r6
 8001982:	4602      	mov	r2, r0
 8001984:	1c50      	adds	r0, r2, #1
 8001986:	d1c9      	bne.n	800191c <__sflush_r+0x30>
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0c6      	beq.n	800191c <__sflush_r+0x30>
 800198e:	2b1d      	cmp	r3, #29
 8001990:	d001      	beq.n	8001996 <__sflush_r+0xaa>
 8001992:	2b16      	cmp	r3, #22
 8001994:	d11c      	bne.n	80019d0 <__sflush_r+0xe4>
 8001996:	602f      	str	r7, [r5, #0]
 8001998:	2000      	movs	r0, #0
 800199a:	e020      	b.n	80019de <__sflush_r+0xf2>
 800199c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	e019      	b.n	80019d8 <__sflush_r+0xec>
 80019a4:	690f      	ldr	r7, [r1, #16]
 80019a6:	2f00      	cmp	r7, #0
 80019a8:	d0f6      	beq.n	8001998 <__sflush_r+0xac>
 80019aa:	0793      	lsls	r3, r2, #30
 80019ac:	680e      	ldr	r6, [r1, #0]
 80019ae:	600f      	str	r7, [r1, #0]
 80019b0:	bf0c      	ite	eq
 80019b2:	694b      	ldreq	r3, [r1, #20]
 80019b4:	2300      	movne	r3, #0
 80019b6:	1bf6      	subs	r6, r6, r7
 80019b8:	608b      	str	r3, [r1, #8]
 80019ba:	2e00      	cmp	r6, #0
 80019bc:	ddec      	ble.n	8001998 <__sflush_r+0xac>
 80019be:	4633      	mov	r3, r6
 80019c0:	463a      	mov	r2, r7
 80019c2:	6a21      	ldr	r1, [r4, #32]
 80019c4:	4628      	mov	r0, r5
 80019c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80019ca:	47e0      	blx	ip
 80019cc:	2800      	cmp	r0, #0
 80019ce:	dc07      	bgt.n	80019e0 <__sflush_r+0xf4>
 80019d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	81a3      	strh	r3, [r4, #12]
 80019de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019e0:	4407      	add	r7, r0
 80019e2:	1a36      	subs	r6, r6, r0
 80019e4:	e7e9      	b.n	80019ba <__sflush_r+0xce>
 80019e6:	bf00      	nop
 80019e8:	20400001 	.word	0x20400001

080019ec <_fflush_r>:
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	690b      	ldr	r3, [r1, #16]
 80019f0:	4605      	mov	r5, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	b913      	cbnz	r3, 80019fc <_fflush_r+0x10>
 80019f6:	2500      	movs	r5, #0
 80019f8:	4628      	mov	r0, r5
 80019fa:	bd38      	pop	{r3, r4, r5, pc}
 80019fc:	b118      	cbz	r0, 8001a06 <_fflush_r+0x1a>
 80019fe:	6a03      	ldr	r3, [r0, #32]
 8001a00:	b90b      	cbnz	r3, 8001a06 <_fflush_r+0x1a>
 8001a02:	f7ff f9b1 	bl	8000d68 <__sinit>
 8001a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f3      	beq.n	80019f6 <_fflush_r+0xa>
 8001a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a10:	07d0      	lsls	r0, r2, #31
 8001a12:	d404      	bmi.n	8001a1e <_fflush_r+0x32>
 8001a14:	0599      	lsls	r1, r3, #22
 8001a16:	d402      	bmi.n	8001a1e <_fflush_r+0x32>
 8001a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a1a:	f7ff fb9c 	bl	8001156 <__retarget_lock_acquire_recursive>
 8001a1e:	4628      	mov	r0, r5
 8001a20:	4621      	mov	r1, r4
 8001a22:	f7ff ff63 	bl	80018ec <__sflush_r>
 8001a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a28:	4605      	mov	r5, r0
 8001a2a:	07da      	lsls	r2, r3, #31
 8001a2c:	d4e4      	bmi.n	80019f8 <_fflush_r+0xc>
 8001a2e:	89a3      	ldrh	r3, [r4, #12]
 8001a30:	059b      	lsls	r3, r3, #22
 8001a32:	d4e1      	bmi.n	80019f8 <_fflush_r+0xc>
 8001a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a36:	f7ff fb8f 	bl	8001158 <__retarget_lock_release_recursive>
 8001a3a:	e7dd      	b.n	80019f8 <_fflush_r+0xc>

08001a3c <__swhatbuf_r>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	460c      	mov	r4, r1
 8001a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a44:	b096      	sub	sp, #88	@ 0x58
 8001a46:	4615      	mov	r5, r2
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	461e      	mov	r6, r3
 8001a4c:	da0c      	bge.n	8001a68 <__swhatbuf_r+0x2c>
 8001a4e:	89a3      	ldrh	r3, [r4, #12]
 8001a50:	2100      	movs	r1, #0
 8001a52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a56:	bf14      	ite	ne
 8001a58:	2340      	movne	r3, #64	@ 0x40
 8001a5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001a5e:	2000      	movs	r0, #0
 8001a60:	6031      	str	r1, [r6, #0]
 8001a62:	602b      	str	r3, [r5, #0]
 8001a64:	b016      	add	sp, #88	@ 0x58
 8001a66:	bd70      	pop	{r4, r5, r6, pc}
 8001a68:	466a      	mov	r2, sp
 8001a6a:	f000 f849 	bl	8001b00 <_fstat_r>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	dbed      	blt.n	8001a4e <__swhatbuf_r+0x12>
 8001a72:	9901      	ldr	r1, [sp, #4]
 8001a74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001a78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001a7c:	4259      	negs	r1, r3
 8001a7e:	4159      	adcs	r1, r3
 8001a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a84:	e7eb      	b.n	8001a5e <__swhatbuf_r+0x22>

08001a86 <__smakebuf_r>:
 8001a86:	898b      	ldrh	r3, [r1, #12]
 8001a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a8a:	079d      	lsls	r5, r3, #30
 8001a8c:	4606      	mov	r6, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	d507      	bpl.n	8001aa2 <__smakebuf_r+0x1c>
 8001a92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001a96:	6023      	str	r3, [r4, #0]
 8001a98:	6123      	str	r3, [r4, #16]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	6163      	str	r3, [r4, #20]
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa2:	ab01      	add	r3, sp, #4
 8001aa4:	466a      	mov	r2, sp
 8001aa6:	f7ff ffc9 	bl	8001a3c <__swhatbuf_r>
 8001aaa:	9f00      	ldr	r7, [sp, #0]
 8001aac:	4605      	mov	r5, r0
 8001aae:	4630      	mov	r0, r6
 8001ab0:	4639      	mov	r1, r7
 8001ab2:	f7ff fbbf 	bl	8001234 <_malloc_r>
 8001ab6:	b948      	cbnz	r0, 8001acc <__smakebuf_r+0x46>
 8001ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001abc:	059a      	lsls	r2, r3, #22
 8001abe:	d4ee      	bmi.n	8001a9e <__smakebuf_r+0x18>
 8001ac0:	f023 0303 	bic.w	r3, r3, #3
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	81a3      	strh	r3, [r4, #12]
 8001aca:	e7e2      	b.n	8001a92 <__smakebuf_r+0xc>
 8001acc:	89a3      	ldrh	r3, [r4, #12]
 8001ace:	6020      	str	r0, [r4, #0]
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad4:	81a3      	strh	r3, [r4, #12]
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001adc:	b15b      	cbz	r3, 8001af6 <__smakebuf_r+0x70>
 8001ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	f000 f81e 	bl	8001b24 <_isatty_r>
 8001ae8:	b128      	cbz	r0, 8001af6 <__smakebuf_r+0x70>
 8001aea:	89a3      	ldrh	r3, [r4, #12]
 8001aec:	f023 0303 	bic.w	r3, r3, #3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	81a3      	strh	r3, [r4, #12]
 8001af6:	89a3      	ldrh	r3, [r4, #12]
 8001af8:	431d      	orrs	r5, r3
 8001afa:	81a5      	strh	r5, [r4, #12]
 8001afc:	e7cf      	b.n	8001a9e <__smakebuf_r+0x18>
	...

08001b00 <_fstat_r>:
 8001b00:	b538      	push	{r3, r4, r5, lr}
 8001b02:	2300      	movs	r3, #0
 8001b04:	4d06      	ldr	r5, [pc, #24]	@ (8001b20 <_fstat_r+0x20>)
 8001b06:	4604      	mov	r4, r0
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	f7ff f819 	bl	8000b44 <_fstat>
 8001b12:	1c43      	adds	r3, r0, #1
 8001b14:	d102      	bne.n	8001b1c <_fstat_r+0x1c>
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	b103      	cbz	r3, 8001b1c <_fstat_r+0x1c>
 8001b1a:	6023      	str	r3, [r4, #0]
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001d4 	.word	0x200001d4

08001b24 <_isatty_r>:
 8001b24:	b538      	push	{r3, r4, r5, lr}
 8001b26:	2300      	movs	r3, #0
 8001b28:	4d05      	ldr	r5, [pc, #20]	@ (8001b40 <_isatty_r+0x1c>)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	602b      	str	r3, [r5, #0]
 8001b30:	f7ff f817 	bl	8000b62 <_isatty>
 8001b34:	1c43      	adds	r3, r0, #1
 8001b36:	d102      	bne.n	8001b3e <_isatty_r+0x1a>
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	b103      	cbz	r3, 8001b3e <_isatty_r+0x1a>
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
 8001b40:	200001d4 	.word	0x200001d4

08001b44 <_sbrk_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	2300      	movs	r3, #0
 8001b48:	4d05      	ldr	r5, [pc, #20]	@ (8001b60 <_sbrk_r+0x1c>)
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	602b      	str	r3, [r5, #0]
 8001b50:	f7ff f81e 	bl	8000b90 <_sbrk>
 8001b54:	1c43      	adds	r3, r0, #1
 8001b56:	d102      	bne.n	8001b5e <_sbrk_r+0x1a>
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	b103      	cbz	r3, 8001b5e <_sbrk_r+0x1a>
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
 8001b60:	200001d4 	.word	0x200001d4

08001b64 <memchr>:
 8001b64:	b2c9      	uxtb	r1, r1
 8001b66:	4603      	mov	r3, r0
 8001b68:	4402      	add	r2, r0
 8001b6a:	b510      	push	{r4, lr}
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	d101      	bne.n	8001b76 <memchr+0x12>
 8001b72:	2000      	movs	r0, #0
 8001b74:	e003      	b.n	8001b7e <memchr+0x1a>
 8001b76:	7804      	ldrb	r4, [r0, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	428c      	cmp	r4, r1
 8001b7c:	d1f6      	bne.n	8001b6c <memchr+0x8>
 8001b7e:	bd10      	pop	{r4, pc}

08001b80 <_init>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	bf00      	nop
 8001b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b86:	bc08      	pop	{r3}
 8001b88:	469e      	mov	lr, r3
 8001b8a:	4770      	bx	lr

08001b8c <_fini>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr
