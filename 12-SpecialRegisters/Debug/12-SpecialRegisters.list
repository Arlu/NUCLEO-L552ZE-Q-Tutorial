
12-SpecialRegisters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f8  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  080013e8  080013e8  000023e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800169c  0800169c  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800169c  0800169c  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800169c  0800169c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800169c  0800169c  0000269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016a0  080016a0  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080016a4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000005c  08001700  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08001700  000033c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e4b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000695  00000000  00000000  00004ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000043f  00000000  00000000  0000556c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  000059b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000108  00000000  00000000  00005b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e7c  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b53  00000000  00000000  00008a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a29d  00000000  00000000  0000a5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001487c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac4  00000000  00000000  000148c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00015384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000005c 	.word	0x2000005c
 800020c:	00000000 	.word	0x00000000
 8000210:	080013d0 	.word	0x080013d0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000060 	.word	0x20000060
 800022c:	080013d0 	.word	0x080013d0

08000230 <_write>:
int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000230:	1e10      	subs	r0, r2, #0
 8000232:	dd1b      	ble.n	800026c <_write+0x3c>
    DEMCR |= (1 << 24);
 8000234:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
    ITM_TRACE_EN |= (1 << 0);
 8000238:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
{
 800023c:	b510      	push	{r4, lr}
 800023e:	eb01 0e00 	add.w	lr, r1, r0
    DEMCR |= (1 << 24);
 8000242:	f8dc 3dfc 	ldr.w	r3, [ip, #3580]	@ 0xdfc
  {
	  ITM_SendChar(*ptr++);
 8000246:	f811 4b01 	ldrb.w	r4, [r1], #1
    DEMCR |= (1 << 24);
 800024a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800024e:	f8cc 3dfc 	str.w	r3, [ip, #3580]	@ 0xdfc
    ITM_TRACE_EN |= (1 << 0);
 8000252:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    while (!(ITM_STIMULUS_PORT0 & 1));
 800025e:	6813      	ldr	r3, [r2, #0]
 8000260:	07db      	lsls	r3, r3, #31
 8000262:	d5fc      	bpl.n	800025e <_write+0x2e>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000264:	458e      	cmp	lr, r1
    ITM_STIMULUS_PORT0 = ch;
 8000266:	6014      	str	r4, [r2, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000268:	d1eb      	bne.n	8000242 <_write+0x12>
  }
  return len;
}
 800026a:	bd10      	pop	{r4, pc}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <trigger_svc>:
#endif

// Function to create a SVCall exception for demonstration
__attribute__((naked)) void trigger_svc(void)
{
    __asm volatile ("SVC #0");
 8000270:	df00      	svc	0
    __asm volatile ("BX LR");
 8000272:	4770      	bx	lr

08000274 <print_registers>:
    __asm volatile ("MOV %0, PC" : "=r" (pc));
    return pc;
}

void print_registers(void)
{
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	b083      	sub	sp, #12
    // Variables to store register values
    uint32_t msp_value, psp_value, lr_value, pc_value, xpsr_value;

    // Read MSP (Main Stack Pointer)
    __asm volatile ("MRS %0, MSP" : "=r" (msp_value));
 8000278:	f3ef 8108 	mrs	r1, MSP

    // Read PSP (Process Stack Pointer)
    __asm volatile ("MRS %0, PSP" : "=r" (psp_value));
 800027c:	f3ef 8709 	mrs	r7, PSP

    // Read LR (Link Register)
    __asm volatile ("MOV %0, LR" : "=r" (lr_value));
 8000280:	4676      	mov	r6, lr
    __asm volatile ("MOV %0, PC" : "=r" (pc));
 8000282:	467d      	mov	r5, pc

    // Get PC value
    pc_value = get_pc();

    // Read xPSR (Program Status Register)
    __asm volatile ("MRS %0, XPSR" : "=r" (xpsr_value));
 8000284:	f3ef 8403 	mrs	r4, PSR

    // Print the values
    printf("MSP (Main Stack Pointer): 0x%08lX\n", msp_value);
 8000288:	4815      	ldr	r0, [pc, #84]	@ (80002e0 <print_registers+0x6c>)
 800028a:	f000 f9cb 	bl	8000624 <iprintf>
    printf("PSP (Process Stack Pointer): 0x%08lX\n", psp_value);
 800028e:	4639      	mov	r1, r7
 8000290:	4814      	ldr	r0, [pc, #80]	@ (80002e4 <print_registers+0x70>)
 8000292:	f000 f9c7 	bl	8000624 <iprintf>
    printf("LR (Link Register): 0x%08lX\n", lr_value);
 8000296:	4631      	mov	r1, r6
 8000298:	4813      	ldr	r0, [pc, #76]	@ (80002e8 <print_registers+0x74>)
 800029a:	f000 f9c3 	bl	8000624 <iprintf>
    printf("PC (Program Counter): 0x%08lX\n", pc_value);
 800029e:	4629      	mov	r1, r5
 80002a0:	4812      	ldr	r0, [pc, #72]	@ (80002ec <print_registers+0x78>)
 80002a2:	f000 f9bf 	bl	8000624 <iprintf>
    printf("xPSR: 0x%08lX\n", xpsr_value);
 80002a6:	4621      	mov	r1, r4
 80002a8:	4811      	ldr	r0, [pc, #68]	@ (80002f0 <print_registers+0x7c>)
 80002aa:	f000 f9bb 	bl	8000624 <iprintf>

    // Decoding xPSR
    printf("xPSR Decoded:\n");
 80002ae:	4811      	ldr	r0, [pc, #68]	@ (80002f4 <print_registers+0x80>)
 80002b0:	f000 fa20 	bl	80006f4 <puts>
    printf("  N=%ld, Z=%ld, C=%ld, V=%ld, Q=%ld\n",
 80002b4:	f3c4 62c0 	ubfx	r2, r4, #27, #1
 80002b8:	f3c4 7300 	ubfx	r3, r4, #28, #1
 80002bc:	e9cd 3200 	strd	r3, r2, [sp]
 80002c0:	0fe1      	lsrs	r1, r4, #31
 80002c2:	f3c4 7340 	ubfx	r3, r4, #29, #1
 80002c6:	f3c4 7280 	ubfx	r2, r4, #30, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <print_registers+0x84>)
 80002cc:	f000 f9aa 	bl	8000624 <iprintf>
           (xpsr_value >> 30) & 1,    // Z flag
           (xpsr_value >> 29) & 1,    // C flag
           (xpsr_value >> 28) & 1,    // V flag
           (xpsr_value >> 27) & 1);   // Q flag

    printf("  ISR Number: %lu\n", xpsr_value & 0xFF); // Exception number
 80002d0:	480a      	ldr	r0, [pc, #40]	@ (80002fc <print_registers+0x88>)
 80002d2:	b2e1      	uxtb	r1, r4
}
 80002d4:	b003      	add	sp, #12
 80002d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("  ISR Number: %lu\n", xpsr_value & 0xFF); // Exception number
 80002da:	f000 b9a3 	b.w	8000624 <iprintf>
 80002de:	bf00      	nop
 80002e0:	080013e8 	.word	0x080013e8
 80002e4:	0800140c 	.word	0x0800140c
 80002e8:	08001434 	.word	0x08001434
 80002ec:	08001454 	.word	0x08001454
 80002f0:	08001474 	.word	0x08001474
 80002f4:	08001484 	.word	0x08001484
 80002f8:	08001494 	.word	0x08001494
 80002fc:	080014bc 	.word	0x080014bc

08000300 <SVC_Handler>:

// SVC Handler for demonstrating EXC_RETURN values
void SVC_Handler(void)
{
 8000300:	b510      	push	{r4, lr}
    uint32_t exc_return;

    // Read LR which contains EXC_RETURN value
    __asm volatile ("MOV %0, LR" : "=r" (exc_return));
 8000302:	4674      	mov	r4, lr

    printf("\nInside SVC Handler:\n");
 8000304:	4810      	ldr	r0, [pc, #64]	@ (8000348 <SVC_Handler+0x48>)
 8000306:	f000 f9f5 	bl	80006f4 <puts>
    printf("EXC_RETURN value: 0x%08lX\n", exc_return);
 800030a:	4621      	mov	r1, r4
 800030c:	480f      	ldr	r0, [pc, #60]	@ (800034c <SVC_Handler+0x4c>)
 800030e:	f000 f989 	bl	8000624 <iprintf>

    // Decode EXC_RETURN value
    printf("EXC_RETURN decoded:\n");
 8000312:	480f      	ldr	r0, [pc, #60]	@ (8000350 <SVC_Handler+0x50>)
 8000314:	f000 f9ee 	bl	80006f4 <puts>

    if (exc_return & (1 << 2)) {
 8000318:	0761      	lsls	r1, r4, #29
        printf("  Return stack: PSP\n");
 800031a:	bf4c      	ite	mi
 800031c:	480d      	ldrmi	r0, [pc, #52]	@ (8000354 <SVC_Handler+0x54>)
    } else {
        printf("  Return stack: MSP\n");
 800031e:	480e      	ldrpl	r0, [pc, #56]	@ (8000358 <SVC_Handler+0x58>)
 8000320:	f000 f9e8 	bl	80006f4 <puts>
    }

    if (exc_return & (1 << 3)) {
 8000324:	0722      	lsls	r2, r4, #28
        printf("  Return mode: Thread\n");
 8000326:	bf4c      	ite	mi
 8000328:	480c      	ldrmi	r0, [pc, #48]	@ (800035c <SVC_Handler+0x5c>)
    } else {
        printf("  Return mode: Handler\n");
 800032a:	480d      	ldrpl	r0, [pc, #52]	@ (8000360 <SVC_Handler+0x60>)
 800032c:	f000 f9e2 	bl	80006f4 <puts>
    }

    if (exc_return & (1 << 4)) {
 8000330:	06e3      	lsls	r3, r4, #27
 8000332:	d504      	bpl.n	800033e <SVC_Handler+0x3e>
        printf("  Floating-point state: Not preserved\n");
    } else {
        printf("  Floating-point state: Preserved\n");
    }
}
 8000334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printf("  Floating-point state: Not preserved\n");
 8000338:	480a      	ldr	r0, [pc, #40]	@ (8000364 <SVC_Handler+0x64>)
 800033a:	f000 b9db 	b.w	80006f4 <puts>
        printf("  Floating-point state: Preserved\n");
 800033e:	480a      	ldr	r0, [pc, #40]	@ (8000368 <SVC_Handler+0x68>)
}
 8000340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printf("  Floating-point state: Preserved\n");
 8000344:	f000 b9d6 	b.w	80006f4 <puts>
 8000348:	080014d0 	.word	0x080014d0
 800034c:	080014e8 	.word	0x080014e8
 8000350:	08001504 	.word	0x08001504
 8000354:	08001518 	.word	0x08001518
 8000358:	0800152c 	.word	0x0800152c
 800035c:	08001540 	.word	0x08001540
 8000360:	08001558 	.word	0x08001558
 8000364:	08001570 	.word	0x08001570
 8000368:	08001598 	.word	0x08001598

0800036c <main>:

    printf("\nSwitched to PSP in Thread mode\n");
}

int main(void)
{
 800036c:	b508      	push	{r3, lr}
	// Initialize your hardware, UART, etc.

	printf("Register values in Thread mode using MSP:\n");
 800036e:	4811      	ldr	r0, [pc, #68]	@ (80003b4 <main+0x48>)
 8000370:	f000 f9c0 	bl	80006f4 <puts>
	print_registers();
 8000374:	f7ff ff7e 	bl	8000274 <print_registers>
    __asm volatile ("MSR PSP, %0" :: "r" (psp));
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <main+0x4c>)
 800037a:	f383 8809 	msr	PSP, r3
    __asm volatile (
 800037e:	f3ef 8014 	mrs	r0, CONTROL
 8000382:	f040 0002 	orr.w	r0, r0, #2
 8000386:	f380 8814 	msr	CONTROL, r0
 800038a:	f3bf 8f6f 	isb	sy
    printf("\nSwitched to PSP in Thread mode\n");
 800038e:	480b      	ldr	r0, [pc, #44]	@ (80003bc <main+0x50>)
 8000390:	f000 f9b0 	bl	80006f4 <puts>

	// Switch to PSP
	switch_to_psp();

	printf("\nRegister values in Thread mode using PSP:\n");
 8000394:	480a      	ldr	r0, [pc, #40]	@ (80003c0 <main+0x54>)
 8000396:	f000 f9ad 	bl	80006f4 <puts>
	print_registers();
 800039a:	f7ff ff6b 	bl	8000274 <print_registers>

	// Trigger SVC to see EXC_RETURN values
	printf("\nTriggering SVC exception...\n");
 800039e:	4809      	ldr	r0, [pc, #36]	@ (80003c4 <main+0x58>)
 80003a0:	f000 f9a8 	bl	80006f4 <puts>
	trigger_svc();
 80003a4:	f7ff ff64 	bl	8000270 <trigger_svc>

	printf("\nBack to Thread mode\n");
 80003a8:	4807      	ldr	r0, [pc, #28]	@ (80003c8 <main+0x5c>)
 80003aa:	f000 f9a3 	bl	80006f4 <puts>
	print_registers();
 80003ae:	f7ff ff61 	bl	8000274 <print_registers>

	/* Loop forever */
	for (;;);
 80003b2:	e7fe      	b.n	80003b2 <main+0x46>
 80003b4:	080015dc 	.word	0x080015dc
 80003b8:	20000278 	.word	0x20000278
 80003bc:	080015bc 	.word	0x080015bc
 80003c0:	08001608 	.word	0x08001608
 80003c4:	08001634 	.word	0x08001634
 80003c8:	08001654 	.word	0x08001654

080003cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003cc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	1e16      	subs	r6, r2, #0
 80003d0:	dd07      	ble.n	80003e2 <_read+0x16>
 80003d2:	460c      	mov	r4, r1
 80003d4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80003d6:	f3af 8000 	nop.w
 80003da:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	42a5      	cmp	r5, r4
 80003e0:	d1f9      	bne.n	80003d6 <_read+0xa>
  }

  return len;
}
 80003e2:	4630      	mov	r0, r6
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	bf00      	nop

080003e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80003e8:	f04f 30ff 	mov.w	r0, #4294967295
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80003f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80003f4:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80003f6:	604b      	str	r3, [r1, #4]
}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop

080003fc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80003fc:	2001      	movs	r0, #1
 80003fe:	4770      	bx	lr

08000400 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr

08000404 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000404:	490d      	ldr	r1, [pc, #52]	@ (800043c <_sbrk+0x38>)
{
 8000406:	4603      	mov	r3, r0
 8000408:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040a:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <_sbrk+0x3c>)
 800040c:	4c0d      	ldr	r4, [pc, #52]	@ (8000444 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800040e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000410:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000412:	b120      	cbz	r0, 800041e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000414:	4403      	add	r3, r0
 8000416:	4293      	cmp	r3, r2
 8000418:	d807      	bhi.n	800042a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800041a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800041c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800041e:	4c0a      	ldr	r4, [pc, #40]	@ (8000448 <_sbrk+0x44>)
 8000420:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8000422:	4403      	add	r3, r0
 8000424:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8000426:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000428:	d9f7      	bls.n	800041a <_sbrk+0x16>
    errno = ENOMEM;
 800042a:	f000 fa91 	bl	8000950 <__errno>
 800042e:	220c      	movs	r2, #12
 8000430:	4603      	mov	r3, r0
    return (void *)-1;
 8000432:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bd10      	pop	{r4, pc}
 800043a:	bf00      	nop
 800043c:	20000278 	.word	0x20000278
 8000440:	20030000 	.word	0x20030000
 8000444:	00000400 	.word	0x00000400
 8000448:	200003c8 	.word	0x200003c8

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	@ (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000450:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	@ (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	@ (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	@ (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	@ (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 fa6f 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff ff75 	bl	800036c <main>

08000482 <LoopForever>:

LoopForever:
  b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000490:	080016a4 	.word	0x080016a4
  ldr r2, =_sbss
 8000494:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000498:	200003c8 	.word	0x200003c8

0800049c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_2_IRQHandler>
	...

080004a0 <std>:
 80004a0:	2300      	movs	r3, #0
 80004a2:	b510      	push	{r4, lr}
 80004a4:	4604      	mov	r4, r0
 80004a6:	6083      	str	r3, [r0, #8]
 80004a8:	8181      	strh	r1, [r0, #12]
 80004aa:	4619      	mov	r1, r3
 80004ac:	6643      	str	r3, [r0, #100]	@ 0x64
 80004ae:	81c2      	strh	r2, [r0, #14]
 80004b0:	2208      	movs	r2, #8
 80004b2:	6183      	str	r3, [r0, #24]
 80004b4:	e9c0 3300 	strd	r3, r3, [r0]
 80004b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004bc:	305c      	adds	r0, #92	@ 0x5c
 80004be:	f000 f9f9 	bl	80008b4 <memset>
 80004c2:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <std+0x58>)
 80004c4:	6224      	str	r4, [r4, #32]
 80004c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <std+0x5c>)
 80004ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <std+0x60>)
 80004ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <std+0x64>)
 80004d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <std+0x68>)
 80004d6:	429c      	cmp	r4, r3
 80004d8:	d006      	beq.n	80004e8 <std+0x48>
 80004da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004de:	4294      	cmp	r4, r2
 80004e0:	d002      	beq.n	80004e8 <std+0x48>
 80004e2:	33d0      	adds	r3, #208	@ 0xd0
 80004e4:	429c      	cmp	r4, r3
 80004e6:	d105      	bne.n	80004f4 <std+0x54>
 80004e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004f0:	f000 ba58 	b.w	80009a4 <__retarget_lock_init_recursive>
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	bf00      	nop
 80004f8:	08000705 	.word	0x08000705
 80004fc:	08000727 	.word	0x08000727
 8000500:	0800075f 	.word	0x0800075f
 8000504:	08000783 	.word	0x08000783
 8000508:	2000027c 	.word	0x2000027c

0800050c <stdio_exit_handler>:
 800050c:	4a02      	ldr	r2, [pc, #8]	@ (8000518 <stdio_exit_handler+0xc>)
 800050e:	4903      	ldr	r1, [pc, #12]	@ (800051c <stdio_exit_handler+0x10>)
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <stdio_exit_handler+0x14>)
 8000512:	f000 b869 	b.w	80005e8 <_fwalk_sglue>
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	0800123d 	.word	0x0800123d
 8000520:	20000010 	.word	0x20000010

08000524 <cleanup_stdio>:
 8000524:	6841      	ldr	r1, [r0, #4]
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <cleanup_stdio+0x34>)
 8000528:	4299      	cmp	r1, r3
 800052a:	b510      	push	{r4, lr}
 800052c:	4604      	mov	r4, r0
 800052e:	d001      	beq.n	8000534 <cleanup_stdio+0x10>
 8000530:	f000 fe84 	bl	800123c <_fflush_r>
 8000534:	68a1      	ldr	r1, [r4, #8]
 8000536:	4b09      	ldr	r3, [pc, #36]	@ (800055c <cleanup_stdio+0x38>)
 8000538:	4299      	cmp	r1, r3
 800053a:	d002      	beq.n	8000542 <cleanup_stdio+0x1e>
 800053c:	4620      	mov	r0, r4
 800053e:	f000 fe7d 	bl	800123c <_fflush_r>
 8000542:	68e1      	ldr	r1, [r4, #12]
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <cleanup_stdio+0x3c>)
 8000546:	4299      	cmp	r1, r3
 8000548:	d004      	beq.n	8000554 <cleanup_stdio+0x30>
 800054a:	4620      	mov	r0, r4
 800054c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000550:	f000 be74 	b.w	800123c <_fflush_r>
 8000554:	bd10      	pop	{r4, pc}
 8000556:	bf00      	nop
 8000558:	2000027c 	.word	0x2000027c
 800055c:	200002e4 	.word	0x200002e4
 8000560:	2000034c 	.word	0x2000034c

08000564 <global_stdio_init.part.0>:
 8000564:	b510      	push	{r4, lr}
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <global_stdio_init.part.0+0x30>)
 8000568:	2104      	movs	r1, #4
 800056a:	4c0b      	ldr	r4, [pc, #44]	@ (8000598 <global_stdio_init.part.0+0x34>)
 800056c:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <global_stdio_init.part.0+0x38>)
 800056e:	4620      	mov	r0, r4
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	2200      	movs	r2, #0
 8000574:	f7ff ff94 	bl	80004a0 <std>
 8000578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800057c:	2201      	movs	r2, #1
 800057e:	2109      	movs	r1, #9
 8000580:	f7ff ff8e 	bl	80004a0 <std>
 8000584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000588:	2202      	movs	r2, #2
 800058a:	2112      	movs	r1, #18
 800058c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000590:	f7ff bf86 	b.w	80004a0 <std>
 8000594:	200003b4 	.word	0x200003b4
 8000598:	2000027c 	.word	0x2000027c
 800059c:	0800050d 	.word	0x0800050d

080005a0 <__sfp_lock_acquire>:
 80005a0:	4801      	ldr	r0, [pc, #4]	@ (80005a8 <__sfp_lock_acquire+0x8>)
 80005a2:	f000 ba00 	b.w	80009a6 <__retarget_lock_acquire_recursive>
 80005a6:	bf00      	nop
 80005a8:	200003bd 	.word	0x200003bd

080005ac <__sfp_lock_release>:
 80005ac:	4801      	ldr	r0, [pc, #4]	@ (80005b4 <__sfp_lock_release+0x8>)
 80005ae:	f000 b9fb 	b.w	80009a8 <__retarget_lock_release_recursive>
 80005b2:	bf00      	nop
 80005b4:	200003bd 	.word	0x200003bd

080005b8 <__sinit>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	4604      	mov	r4, r0
 80005bc:	f7ff fff0 	bl	80005a0 <__sfp_lock_acquire>
 80005c0:	6a23      	ldr	r3, [r4, #32]
 80005c2:	b11b      	cbz	r3, 80005cc <__sinit+0x14>
 80005c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c8:	f7ff bff0 	b.w	80005ac <__sfp_lock_release>
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <__sinit+0x28>)
 80005ce:	6223      	str	r3, [r4, #32]
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <__sinit+0x2c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f5      	bne.n	80005c4 <__sinit+0xc>
 80005d8:	f7ff ffc4 	bl	8000564 <global_stdio_init.part.0>
 80005dc:	e7f2      	b.n	80005c4 <__sinit+0xc>
 80005de:	bf00      	nop
 80005e0:	08000525 	.word	0x08000525
 80005e4:	200003b4 	.word	0x200003b4

080005e8 <_fwalk_sglue>:
 80005e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005ec:	4607      	mov	r7, r0
 80005ee:	4688      	mov	r8, r1
 80005f0:	4614      	mov	r4, r2
 80005f2:	2600      	movs	r6, #0
 80005f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005f8:	f1b9 0901 	subs.w	r9, r9, #1
 80005fc:	d505      	bpl.n	800060a <_fwalk_sglue+0x22>
 80005fe:	6824      	ldr	r4, [r4, #0]
 8000600:	2c00      	cmp	r4, #0
 8000602:	d1f7      	bne.n	80005f4 <_fwalk_sglue+0xc>
 8000604:	4630      	mov	r0, r6
 8000606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800060a:	89ab      	ldrh	r3, [r5, #12]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d907      	bls.n	8000620 <_fwalk_sglue+0x38>
 8000610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000614:	3301      	adds	r3, #1
 8000616:	d003      	beq.n	8000620 <_fwalk_sglue+0x38>
 8000618:	4629      	mov	r1, r5
 800061a:	4638      	mov	r0, r7
 800061c:	47c0      	blx	r8
 800061e:	4306      	orrs	r6, r0
 8000620:	3568      	adds	r5, #104	@ 0x68
 8000622:	e7e9      	b.n	80005f8 <_fwalk_sglue+0x10>

08000624 <iprintf>:
 8000624:	b40f      	push	{r0, r1, r2, r3}
 8000626:	b507      	push	{r0, r1, r2, lr}
 8000628:	4906      	ldr	r1, [pc, #24]	@ (8000644 <iprintf+0x20>)
 800062a:	ab04      	add	r3, sp, #16
 800062c:	6808      	ldr	r0, [r1, #0]
 800062e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000632:	6881      	ldr	r1, [r0, #8]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	f000 fad9 	bl	8000bec <_vfiprintf_r>
 800063a:	b003      	add	sp, #12
 800063c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000640:	b004      	add	sp, #16
 8000642:	4770      	bx	lr
 8000644:	2000000c 	.word	0x2000000c

08000648 <_puts_r>:
 8000648:	6a03      	ldr	r3, [r0, #32]
 800064a:	b570      	push	{r4, r5, r6, lr}
 800064c:	4605      	mov	r5, r0
 800064e:	460e      	mov	r6, r1
 8000650:	6884      	ldr	r4, [r0, #8]
 8000652:	b90b      	cbnz	r3, 8000658 <_puts_r+0x10>
 8000654:	f7ff ffb0 	bl	80005b8 <__sinit>
 8000658:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800065a:	07db      	lsls	r3, r3, #31
 800065c:	d405      	bmi.n	800066a <_puts_r+0x22>
 800065e:	89a3      	ldrh	r3, [r4, #12]
 8000660:	0598      	lsls	r0, r3, #22
 8000662:	d402      	bmi.n	800066a <_puts_r+0x22>
 8000664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000666:	f000 f99e 	bl	80009a6 <__retarget_lock_acquire_recursive>
 800066a:	89a3      	ldrh	r3, [r4, #12]
 800066c:	0719      	lsls	r1, r3, #28
 800066e:	d502      	bpl.n	8000676 <_puts_r+0x2e>
 8000670:	6923      	ldr	r3, [r4, #16]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d135      	bne.n	80006e2 <_puts_r+0x9a>
 8000676:	4621      	mov	r1, r4
 8000678:	4628      	mov	r0, r5
 800067a:	f000 f8c5 	bl	8000808 <__swsetup_r>
 800067e:	b380      	cbz	r0, 80006e2 <_puts_r+0x9a>
 8000680:	f04f 35ff 	mov.w	r5, #4294967295
 8000684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000686:	07da      	lsls	r2, r3, #31
 8000688:	d405      	bmi.n	8000696 <_puts_r+0x4e>
 800068a:	89a3      	ldrh	r3, [r4, #12]
 800068c:	059b      	lsls	r3, r3, #22
 800068e:	d402      	bmi.n	8000696 <_puts_r+0x4e>
 8000690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000692:	f000 f989 	bl	80009a8 <__retarget_lock_release_recursive>
 8000696:	4628      	mov	r0, r5
 8000698:	bd70      	pop	{r4, r5, r6, pc}
 800069a:	2b00      	cmp	r3, #0
 800069c:	da04      	bge.n	80006a8 <_puts_r+0x60>
 800069e:	69a2      	ldr	r2, [r4, #24]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dc17      	bgt.n	80006d4 <_puts_r+0x8c>
 80006a4:	290a      	cmp	r1, #10
 80006a6:	d015      	beq.n	80006d4 <_puts_r+0x8c>
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	6022      	str	r2, [r4, #0]
 80006ae:	7019      	strb	r1, [r3, #0]
 80006b0:	68a3      	ldr	r3, [r4, #8]
 80006b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006b6:	3b01      	subs	r3, #1
 80006b8:	60a3      	str	r3, [r4, #8]
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d1ed      	bne.n	800069a <_puts_r+0x52>
 80006be:	2b00      	cmp	r3, #0
 80006c0:	da11      	bge.n	80006e6 <_puts_r+0x9e>
 80006c2:	4622      	mov	r2, r4
 80006c4:	210a      	movs	r1, #10
 80006c6:	4628      	mov	r0, r5
 80006c8:	f000 f85f 	bl	800078a <__swbuf_r>
 80006cc:	3001      	adds	r0, #1
 80006ce:	d0d7      	beq.n	8000680 <_puts_r+0x38>
 80006d0:	250a      	movs	r5, #10
 80006d2:	e7d7      	b.n	8000684 <_puts_r+0x3c>
 80006d4:	4622      	mov	r2, r4
 80006d6:	4628      	mov	r0, r5
 80006d8:	f000 f857 	bl	800078a <__swbuf_r>
 80006dc:	3001      	adds	r0, #1
 80006de:	d1e7      	bne.n	80006b0 <_puts_r+0x68>
 80006e0:	e7ce      	b.n	8000680 <_puts_r+0x38>
 80006e2:	3e01      	subs	r6, #1
 80006e4:	e7e4      	b.n	80006b0 <_puts_r+0x68>
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	6022      	str	r2, [r4, #0]
 80006ec:	220a      	movs	r2, #10
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e7ee      	b.n	80006d0 <_puts_r+0x88>
	...

080006f4 <puts>:
 80006f4:	4b02      	ldr	r3, [pc, #8]	@ (8000700 <puts+0xc>)
 80006f6:	4601      	mov	r1, r0
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f7ff bfa5 	b.w	8000648 <_puts_r>
 80006fe:	bf00      	nop
 8000700:	2000000c 	.word	0x2000000c

08000704 <__sread>:
 8000704:	b510      	push	{r4, lr}
 8000706:	460c      	mov	r4, r1
 8000708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800070c:	f000 f8fc 	bl	8000908 <_read_r>
 8000710:	2800      	cmp	r0, #0
 8000712:	bfab      	itete	ge
 8000714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000716:	89a3      	ldrhlt	r3, [r4, #12]
 8000718:	181b      	addge	r3, r3, r0
 800071a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800071e:	bfac      	ite	ge
 8000720:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000722:	81a3      	strhlt	r3, [r4, #12]
 8000724:	bd10      	pop	{r4, pc}

08000726 <__swrite>:
 8000726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800072a:	461f      	mov	r7, r3
 800072c:	898b      	ldrh	r3, [r1, #12]
 800072e:	4605      	mov	r5, r0
 8000730:	460c      	mov	r4, r1
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	4616      	mov	r6, r2
 8000736:	d505      	bpl.n	8000744 <__swrite+0x1e>
 8000738:	2302      	movs	r3, #2
 800073a:	2200      	movs	r2, #0
 800073c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000740:	f000 f8d0 	bl	80008e4 <_lseek_r>
 8000744:	89a3      	ldrh	r3, [r4, #12]
 8000746:	4632      	mov	r2, r6
 8000748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800074c:	4628      	mov	r0, r5
 800074e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000752:	81a3      	strh	r3, [r4, #12]
 8000754:	463b      	mov	r3, r7
 8000756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800075a:	f000 b8e7 	b.w	800092c <_write_r>

0800075e <__sseek>:
 800075e:	b510      	push	{r4, lr}
 8000760:	460c      	mov	r4, r1
 8000762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000766:	f000 f8bd 	bl	80008e4 <_lseek_r>
 800076a:	1c43      	adds	r3, r0, #1
 800076c:	89a3      	ldrh	r3, [r4, #12]
 800076e:	bf15      	itete	ne
 8000770:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800077a:	81a3      	strheq	r3, [r4, #12]
 800077c:	bf18      	it	ne
 800077e:	81a3      	strhne	r3, [r4, #12]
 8000780:	bd10      	pop	{r4, pc}

08000782 <__sclose>:
 8000782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000786:	f000 b89d 	b.w	80008c4 <_close_r>

0800078a <__swbuf_r>:
 800078a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078c:	460e      	mov	r6, r1
 800078e:	4614      	mov	r4, r2
 8000790:	4605      	mov	r5, r0
 8000792:	b118      	cbz	r0, 800079c <__swbuf_r+0x12>
 8000794:	6a03      	ldr	r3, [r0, #32]
 8000796:	b90b      	cbnz	r3, 800079c <__swbuf_r+0x12>
 8000798:	f7ff ff0e 	bl	80005b8 <__sinit>
 800079c:	69a3      	ldr	r3, [r4, #24]
 800079e:	60a3      	str	r3, [r4, #8]
 80007a0:	89a3      	ldrh	r3, [r4, #12]
 80007a2:	071a      	lsls	r2, r3, #28
 80007a4:	d501      	bpl.n	80007aa <__swbuf_r+0x20>
 80007a6:	6923      	ldr	r3, [r4, #16]
 80007a8:	b943      	cbnz	r3, 80007bc <__swbuf_r+0x32>
 80007aa:	4621      	mov	r1, r4
 80007ac:	4628      	mov	r0, r5
 80007ae:	f000 f82b 	bl	8000808 <__swsetup_r>
 80007b2:	b118      	cbz	r0, 80007bc <__swbuf_r+0x32>
 80007b4:	f04f 37ff 	mov.w	r7, #4294967295
 80007b8:	4638      	mov	r0, r7
 80007ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	b2f6      	uxtb	r6, r6
 80007c0:	6922      	ldr	r2, [r4, #16]
 80007c2:	4637      	mov	r7, r6
 80007c4:	1a98      	subs	r0, r3, r2
 80007c6:	6963      	ldr	r3, [r4, #20]
 80007c8:	4283      	cmp	r3, r0
 80007ca:	dc05      	bgt.n	80007d8 <__swbuf_r+0x4e>
 80007cc:	4621      	mov	r1, r4
 80007ce:	4628      	mov	r0, r5
 80007d0:	f000 fd34 	bl	800123c <_fflush_r>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d1ed      	bne.n	80007b4 <__swbuf_r+0x2a>
 80007d8:	68a3      	ldr	r3, [r4, #8]
 80007da:	3b01      	subs	r3, #1
 80007dc:	60a3      	str	r3, [r4, #8]
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	6022      	str	r2, [r4, #0]
 80007e4:	701e      	strb	r6, [r3, #0]
 80007e6:	1c43      	adds	r3, r0, #1
 80007e8:	6962      	ldr	r2, [r4, #20]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d004      	beq.n	80007f8 <__swbuf_r+0x6e>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	07db      	lsls	r3, r3, #31
 80007f2:	d5e1      	bpl.n	80007b8 <__swbuf_r+0x2e>
 80007f4:	2e0a      	cmp	r6, #10
 80007f6:	d1df      	bne.n	80007b8 <__swbuf_r+0x2e>
 80007f8:	4621      	mov	r1, r4
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 fd1e 	bl	800123c <_fflush_r>
 8000800:	2800      	cmp	r0, #0
 8000802:	d0d9      	beq.n	80007b8 <__swbuf_r+0x2e>
 8000804:	e7d6      	b.n	80007b4 <__swbuf_r+0x2a>
	...

08000808 <__swsetup_r>:
 8000808:	b538      	push	{r3, r4, r5, lr}
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <__swsetup_r+0xa8>)
 800080c:	4605      	mov	r5, r0
 800080e:	460c      	mov	r4, r1
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	b118      	cbz	r0, 800081c <__swsetup_r+0x14>
 8000814:	6a03      	ldr	r3, [r0, #32]
 8000816:	b90b      	cbnz	r3, 800081c <__swsetup_r+0x14>
 8000818:	f7ff fece 	bl	80005b8 <__sinit>
 800081c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000820:	0719      	lsls	r1, r3, #28
 8000822:	d422      	bmi.n	800086a <__swsetup_r+0x62>
 8000824:	06da      	lsls	r2, r3, #27
 8000826:	d407      	bmi.n	8000838 <__swsetup_r+0x30>
 8000828:	2209      	movs	r2, #9
 800082a:	602a      	str	r2, [r5, #0]
 800082c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	81a3      	strh	r3, [r4, #12]
 8000836:	e033      	b.n	80008a0 <__swsetup_r+0x98>
 8000838:	0758      	lsls	r0, r3, #29
 800083a:	d512      	bpl.n	8000862 <__swsetup_r+0x5a>
 800083c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800083e:	b141      	cbz	r1, 8000852 <__swsetup_r+0x4a>
 8000840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000844:	4299      	cmp	r1, r3
 8000846:	d002      	beq.n	800084e <__swsetup_r+0x46>
 8000848:	4628      	mov	r0, r5
 800084a:	f000 f8af 	bl	80009ac <_free_r>
 800084e:	2300      	movs	r3, #0
 8000850:	6363      	str	r3, [r4, #52]	@ 0x34
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000858:	81a3      	strh	r3, [r4, #12]
 800085a:	2300      	movs	r3, #0
 800085c:	6063      	str	r3, [r4, #4]
 800085e:	6923      	ldr	r3, [r4, #16]
 8000860:	6023      	str	r3, [r4, #0]
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	81a3      	strh	r3, [r4, #12]
 800086a:	6923      	ldr	r3, [r4, #16]
 800086c:	b94b      	cbnz	r3, 8000882 <__swsetup_r+0x7a>
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000878:	d003      	beq.n	8000882 <__swsetup_r+0x7a>
 800087a:	4621      	mov	r1, r4
 800087c:	4628      	mov	r0, r5
 800087e:	f000 fd2a 	bl	80012d6 <__smakebuf_r>
 8000882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000886:	f013 0201 	ands.w	r2, r3, #1
 800088a:	d00a      	beq.n	80008a2 <__swsetup_r+0x9a>
 800088c:	2200      	movs	r2, #0
 800088e:	60a2      	str	r2, [r4, #8]
 8000890:	6962      	ldr	r2, [r4, #20]
 8000892:	4252      	negs	r2, r2
 8000894:	61a2      	str	r2, [r4, #24]
 8000896:	6922      	ldr	r2, [r4, #16]
 8000898:	b942      	cbnz	r2, 80008ac <__swsetup_r+0xa4>
 800089a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800089e:	d1c5      	bne.n	800082c <__swsetup_r+0x24>
 80008a0:	bd38      	pop	{r3, r4, r5, pc}
 80008a2:	0799      	lsls	r1, r3, #30
 80008a4:	bf58      	it	pl
 80008a6:	6962      	ldrpl	r2, [r4, #20]
 80008a8:	60a2      	str	r2, [r4, #8]
 80008aa:	e7f4      	b.n	8000896 <__swsetup_r+0x8e>
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7f7      	b.n	80008a0 <__swsetup_r+0x98>
 80008b0:	2000000c 	.word	0x2000000c

080008b4 <memset>:
 80008b4:	4402      	add	r2, r0
 80008b6:	4603      	mov	r3, r0
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d100      	bne.n	80008be <memset+0xa>
 80008bc:	4770      	bx	lr
 80008be:	f803 1b01 	strb.w	r1, [r3], #1
 80008c2:	e7f9      	b.n	80008b8 <memset+0x4>

080008c4 <_close_r>:
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	2300      	movs	r3, #0
 80008c8:	4d05      	ldr	r5, [pc, #20]	@ (80008e0 <_close_r+0x1c>)
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	602b      	str	r3, [r5, #0]
 80008d0:	f7ff fd8a 	bl	80003e8 <_close>
 80008d4:	1c43      	adds	r3, r0, #1
 80008d6:	d102      	bne.n	80008de <_close_r+0x1a>
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	b103      	cbz	r3, 80008de <_close_r+0x1a>
 80008dc:	6023      	str	r3, [r4, #0]
 80008de:	bd38      	pop	{r3, r4, r5, pc}
 80008e0:	200003b8 	.word	0x200003b8

080008e4 <_lseek_r>:
 80008e4:	b538      	push	{r3, r4, r5, lr}
 80008e6:	4604      	mov	r4, r0
 80008e8:	4d06      	ldr	r5, [pc, #24]	@ (8000904 <_lseek_r+0x20>)
 80008ea:	4608      	mov	r0, r1
 80008ec:	4611      	mov	r1, r2
 80008ee:	2200      	movs	r2, #0
 80008f0:	602a      	str	r2, [r5, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	f7ff fd84 	bl	8000400 <_lseek>
 80008f8:	1c43      	adds	r3, r0, #1
 80008fa:	d102      	bne.n	8000902 <_lseek_r+0x1e>
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	b103      	cbz	r3, 8000902 <_lseek_r+0x1e>
 8000900:	6023      	str	r3, [r4, #0]
 8000902:	bd38      	pop	{r3, r4, r5, pc}
 8000904:	200003b8 	.word	0x200003b8

08000908 <_read_r>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	4604      	mov	r4, r0
 800090c:	4d06      	ldr	r5, [pc, #24]	@ (8000928 <_read_r+0x20>)
 800090e:	4608      	mov	r0, r1
 8000910:	4611      	mov	r1, r2
 8000912:	2200      	movs	r2, #0
 8000914:	602a      	str	r2, [r5, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	f7ff fd58 	bl	80003cc <_read>
 800091c:	1c43      	adds	r3, r0, #1
 800091e:	d102      	bne.n	8000926 <_read_r+0x1e>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	b103      	cbz	r3, 8000926 <_read_r+0x1e>
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	bd38      	pop	{r3, r4, r5, pc}
 8000928:	200003b8 	.word	0x200003b8

0800092c <_write_r>:
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4604      	mov	r4, r0
 8000930:	4d06      	ldr	r5, [pc, #24]	@ (800094c <_write_r+0x20>)
 8000932:	4608      	mov	r0, r1
 8000934:	4611      	mov	r1, r2
 8000936:	2200      	movs	r2, #0
 8000938:	602a      	str	r2, [r5, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	f7ff fc78 	bl	8000230 <_write>
 8000940:	1c43      	adds	r3, r0, #1
 8000942:	d102      	bne.n	800094a <_write_r+0x1e>
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	b103      	cbz	r3, 800094a <_write_r+0x1e>
 8000948:	6023      	str	r3, [r4, #0]
 800094a:	bd38      	pop	{r3, r4, r5, pc}
 800094c:	200003b8 	.word	0x200003b8

08000950 <__errno>:
 8000950:	4b01      	ldr	r3, [pc, #4]	@ (8000958 <__errno+0x8>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000000c 	.word	0x2000000c

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4d0d      	ldr	r5, [pc, #52]	@ (8000994 <__libc_init_array+0x38>)
 8000960:	2600      	movs	r6, #0
 8000962:	4c0d      	ldr	r4, [pc, #52]	@ (8000998 <__libc_init_array+0x3c>)
 8000964:	1b64      	subs	r4, r4, r5
 8000966:	10a4      	asrs	r4, r4, #2
 8000968:	42a6      	cmp	r6, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4d0b      	ldr	r5, [pc, #44]	@ (800099c <__libc_init_array+0x40>)
 800096e:	2600      	movs	r6, #0
 8000970:	4c0b      	ldr	r4, [pc, #44]	@ (80009a0 <__libc_init_array+0x44>)
 8000972:	f000 fd2d 	bl	80013d0 <_init>
 8000976:	1b64      	subs	r4, r4, r5
 8000978:	10a4      	asrs	r4, r4, #2
 800097a:	42a6      	cmp	r6, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f855 3b04 	ldr.w	r3, [r5], #4
 8000984:	3601      	adds	r6, #1
 8000986:	4798      	blx	r3
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f855 3b04 	ldr.w	r3, [r5], #4
 800098e:	3601      	adds	r6, #1
 8000990:	4798      	blx	r3
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	0800169c 	.word	0x0800169c
 8000998:	0800169c 	.word	0x0800169c
 800099c:	0800169c 	.word	0x0800169c
 80009a0:	080016a0 	.word	0x080016a0

080009a4 <__retarget_lock_init_recursive>:
 80009a4:	4770      	bx	lr

080009a6 <__retarget_lock_acquire_recursive>:
 80009a6:	4770      	bx	lr

080009a8 <__retarget_lock_release_recursive>:
 80009a8:	4770      	bx	lr
	...

080009ac <_free_r>:
 80009ac:	b538      	push	{r3, r4, r5, lr}
 80009ae:	4605      	mov	r5, r0
 80009b0:	2900      	cmp	r1, #0
 80009b2:	d041      	beq.n	8000a38 <_free_r+0x8c>
 80009b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009b8:	1f0c      	subs	r4, r1, #4
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bfb8      	it	lt
 80009be:	18e4      	addlt	r4, r4, r3
 80009c0:	f000 f8e0 	bl	8000b84 <__malloc_lock>
 80009c4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <_free_r+0x90>)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	b933      	cbnz	r3, 80009d8 <_free_r+0x2c>
 80009ca:	6063      	str	r3, [r4, #4]
 80009cc:	6014      	str	r4, [r2, #0]
 80009ce:	4628      	mov	r0, r5
 80009d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009d4:	f000 b8dc 	b.w	8000b90 <__malloc_unlock>
 80009d8:	42a3      	cmp	r3, r4
 80009da:	d908      	bls.n	80009ee <_free_r+0x42>
 80009dc:	6820      	ldr	r0, [r4, #0]
 80009de:	1821      	adds	r1, r4, r0
 80009e0:	428b      	cmp	r3, r1
 80009e2:	bf01      	itttt	eq
 80009e4:	6819      	ldreq	r1, [r3, #0]
 80009e6:	685b      	ldreq	r3, [r3, #4]
 80009e8:	1809      	addeq	r1, r1, r0
 80009ea:	6021      	streq	r1, [r4, #0]
 80009ec:	e7ed      	b.n	80009ca <_free_r+0x1e>
 80009ee:	461a      	mov	r2, r3
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	b10b      	cbz	r3, 80009f8 <_free_r+0x4c>
 80009f4:	42a3      	cmp	r3, r4
 80009f6:	d9fa      	bls.n	80009ee <_free_r+0x42>
 80009f8:	6811      	ldr	r1, [r2, #0]
 80009fa:	1850      	adds	r0, r2, r1
 80009fc:	42a0      	cmp	r0, r4
 80009fe:	d10b      	bne.n	8000a18 <_free_r+0x6c>
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	4401      	add	r1, r0
 8000a04:	1850      	adds	r0, r2, r1
 8000a06:	6011      	str	r1, [r2, #0]
 8000a08:	4283      	cmp	r3, r0
 8000a0a:	d1e0      	bne.n	80009ce <_free_r+0x22>
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4408      	add	r0, r1
 8000a12:	6053      	str	r3, [r2, #4]
 8000a14:	6010      	str	r0, [r2, #0]
 8000a16:	e7da      	b.n	80009ce <_free_r+0x22>
 8000a18:	d902      	bls.n	8000a20 <_free_r+0x74>
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	602b      	str	r3, [r5, #0]
 8000a1e:	e7d6      	b.n	80009ce <_free_r+0x22>
 8000a20:	6820      	ldr	r0, [r4, #0]
 8000a22:	1821      	adds	r1, r4, r0
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf02      	ittt	eq
 8000a28:	6819      	ldreq	r1, [r3, #0]
 8000a2a:	685b      	ldreq	r3, [r3, #4]
 8000a2c:	1809      	addeq	r1, r1, r0
 8000a2e:	6063      	str	r3, [r4, #4]
 8000a30:	bf08      	it	eq
 8000a32:	6021      	streq	r1, [r4, #0]
 8000a34:	6054      	str	r4, [r2, #4]
 8000a36:	e7ca      	b.n	80009ce <_free_r+0x22>
 8000a38:	bd38      	pop	{r3, r4, r5, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200003c4 	.word	0x200003c4

08000a40 <sbrk_aligned>:
 8000a40:	b570      	push	{r4, r5, r6, lr}
 8000a42:	4e0f      	ldr	r6, [pc, #60]	@ (8000a80 <sbrk_aligned+0x40>)
 8000a44:	460c      	mov	r4, r1
 8000a46:	4605      	mov	r5, r0
 8000a48:	6831      	ldr	r1, [r6, #0]
 8000a4a:	b911      	cbnz	r1, 8000a52 <sbrk_aligned+0x12>
 8000a4c:	f000 fca2 	bl	8001394 <_sbrk_r>
 8000a50:	6030      	str	r0, [r6, #0]
 8000a52:	4621      	mov	r1, r4
 8000a54:	4628      	mov	r0, r5
 8000a56:	f000 fc9d 	bl	8001394 <_sbrk_r>
 8000a5a:	1c43      	adds	r3, r0, #1
 8000a5c:	d103      	bne.n	8000a66 <sbrk_aligned+0x26>
 8000a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8000a62:	4620      	mov	r0, r4
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	1cc4      	adds	r4, r0, #3
 8000a68:	f024 0403 	bic.w	r4, r4, #3
 8000a6c:	42a0      	cmp	r0, r4
 8000a6e:	d0f8      	beq.n	8000a62 <sbrk_aligned+0x22>
 8000a70:	1a21      	subs	r1, r4, r0
 8000a72:	4628      	mov	r0, r5
 8000a74:	f000 fc8e 	bl	8001394 <_sbrk_r>
 8000a78:	3001      	adds	r0, #1
 8000a7a:	d1f2      	bne.n	8000a62 <sbrk_aligned+0x22>
 8000a7c:	e7ef      	b.n	8000a5e <sbrk_aligned+0x1e>
 8000a7e:	bf00      	nop
 8000a80:	200003c0 	.word	0x200003c0

08000a84 <_malloc_r>:
 8000a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a88:	1ccd      	adds	r5, r1, #3
 8000a8a:	4606      	mov	r6, r0
 8000a8c:	f025 0503 	bic.w	r5, r5, #3
 8000a90:	3508      	adds	r5, #8
 8000a92:	2d0c      	cmp	r5, #12
 8000a94:	bf38      	it	cc
 8000a96:	250c      	movcc	r5, #12
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	db01      	blt.n	8000aa0 <_malloc_r+0x1c>
 8000a9c:	42a9      	cmp	r1, r5
 8000a9e:	d904      	bls.n	8000aaa <_malloc_r+0x26>
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	6033      	str	r3, [r6, #0]
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b80 <_malloc_r+0xfc>
 8000aae:	f000 f869 	bl	8000b84 <__malloc_lock>
 8000ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ab6:	461c      	mov	r4, r3
 8000ab8:	bb44      	cbnz	r4, 8000b0c <_malloc_r+0x88>
 8000aba:	4629      	mov	r1, r5
 8000abc:	4630      	mov	r0, r6
 8000abe:	f7ff ffbf 	bl	8000a40 <sbrk_aligned>
 8000ac2:	1c43      	adds	r3, r0, #1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	d158      	bne.n	8000b7a <_malloc_r+0xf6>
 8000ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8000acc:	4627      	mov	r7, r4
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d143      	bne.n	8000b5a <_malloc_r+0xd6>
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d04b      	beq.n	8000b6e <_malloc_r+0xea>
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	4639      	mov	r1, r7
 8000ada:	4630      	mov	r0, r6
 8000adc:	eb04 0903 	add.w	r9, r4, r3
 8000ae0:	f000 fc58 	bl	8001394 <_sbrk_r>
 8000ae4:	4581      	cmp	r9, r0
 8000ae6:	d142      	bne.n	8000b6e <_malloc_r+0xea>
 8000ae8:	6821      	ldr	r1, [r4, #0]
 8000aea:	4630      	mov	r0, r6
 8000aec:	1a6d      	subs	r5, r5, r1
 8000aee:	4629      	mov	r1, r5
 8000af0:	f7ff ffa6 	bl	8000a40 <sbrk_aligned>
 8000af4:	3001      	adds	r0, #1
 8000af6:	d03a      	beq.n	8000b6e <_malloc_r+0xea>
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	442b      	add	r3, r5
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	f8d8 3000 	ldr.w	r3, [r8]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	bb62      	cbnz	r2, 8000b60 <_malloc_r+0xdc>
 8000b06:	f8c8 7000 	str.w	r7, [r8]
 8000b0a:	e00f      	b.n	8000b2c <_malloc_r+0xa8>
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	1b52      	subs	r2, r2, r5
 8000b10:	d420      	bmi.n	8000b54 <_malloc_r+0xd0>
 8000b12:	2a0b      	cmp	r2, #11
 8000b14:	d917      	bls.n	8000b46 <_malloc_r+0xc2>
 8000b16:	1961      	adds	r1, r4, r5
 8000b18:	42a3      	cmp	r3, r4
 8000b1a:	6025      	str	r5, [r4, #0]
 8000b1c:	bf18      	it	ne
 8000b1e:	6059      	strne	r1, [r3, #4]
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	bf08      	it	eq
 8000b24:	f8c8 1000 	streq.w	r1, [r8]
 8000b28:	5162      	str	r2, [r4, r5]
 8000b2a:	604b      	str	r3, [r1, #4]
 8000b2c:	4630      	mov	r0, r6
 8000b2e:	f000 f82f 	bl	8000b90 <__malloc_unlock>
 8000b32:	f104 000b 	add.w	r0, r4, #11
 8000b36:	1d23      	adds	r3, r4, #4
 8000b38:	f020 0007 	bic.w	r0, r0, #7
 8000b3c:	1ac2      	subs	r2, r0, r3
 8000b3e:	bf1c      	itt	ne
 8000b40:	1a1b      	subne	r3, r3, r0
 8000b42:	50a3      	strne	r3, [r4, r2]
 8000b44:	e7af      	b.n	8000aa6 <_malloc_r+0x22>
 8000b46:	6862      	ldr	r2, [r4, #4]
 8000b48:	42a3      	cmp	r3, r4
 8000b4a:	bf0c      	ite	eq
 8000b4c:	f8c8 2000 	streq.w	r2, [r8]
 8000b50:	605a      	strne	r2, [r3, #4]
 8000b52:	e7eb      	b.n	8000b2c <_malloc_r+0xa8>
 8000b54:	4623      	mov	r3, r4
 8000b56:	6864      	ldr	r4, [r4, #4]
 8000b58:	e7ae      	b.n	8000ab8 <_malloc_r+0x34>
 8000b5a:	463c      	mov	r4, r7
 8000b5c:	687f      	ldr	r7, [r7, #4]
 8000b5e:	e7b6      	b.n	8000ace <_malloc_r+0x4a>
 8000b60:	461a      	mov	r2, r3
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	42a3      	cmp	r3, r4
 8000b66:	d1fb      	bne.n	8000b60 <_malloc_r+0xdc>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	6053      	str	r3, [r2, #4]
 8000b6c:	e7de      	b.n	8000b2c <_malloc_r+0xa8>
 8000b6e:	230c      	movs	r3, #12
 8000b70:	4630      	mov	r0, r6
 8000b72:	6033      	str	r3, [r6, #0]
 8000b74:	f000 f80c 	bl	8000b90 <__malloc_unlock>
 8000b78:	e794      	b.n	8000aa4 <_malloc_r+0x20>
 8000b7a:	6005      	str	r5, [r0, #0]
 8000b7c:	e7d6      	b.n	8000b2c <_malloc_r+0xa8>
 8000b7e:	bf00      	nop
 8000b80:	200003c4 	.word	0x200003c4

08000b84 <__malloc_lock>:
 8000b84:	4801      	ldr	r0, [pc, #4]	@ (8000b8c <__malloc_lock+0x8>)
 8000b86:	f7ff bf0e 	b.w	80009a6 <__retarget_lock_acquire_recursive>
 8000b8a:	bf00      	nop
 8000b8c:	200003bc 	.word	0x200003bc

08000b90 <__malloc_unlock>:
 8000b90:	4801      	ldr	r0, [pc, #4]	@ (8000b98 <__malloc_unlock+0x8>)
 8000b92:	f7ff bf09 	b.w	80009a8 <__retarget_lock_release_recursive>
 8000b96:	bf00      	nop
 8000b98:	200003bc 	.word	0x200003bc

08000b9c <__sfputc_r>:
 8000b9c:	6893      	ldr	r3, [r2, #8]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	b410      	push	{r4}
 8000ba4:	6093      	str	r3, [r2, #8]
 8000ba6:	da07      	bge.n	8000bb8 <__sfputc_r+0x1c>
 8000ba8:	6994      	ldr	r4, [r2, #24]
 8000baa:	42a3      	cmp	r3, r4
 8000bac:	db01      	blt.n	8000bb2 <__sfputc_r+0x16>
 8000bae:	290a      	cmp	r1, #10
 8000bb0:	d102      	bne.n	8000bb8 <__sfputc_r+0x1c>
 8000bb2:	bc10      	pop	{r4}
 8000bb4:	f7ff bde9 	b.w	800078a <__swbuf_r>
 8000bb8:	6813      	ldr	r3, [r2, #0]
 8000bba:	1c58      	adds	r0, r3, #1
 8000bbc:	6010      	str	r0, [r2, #0]
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	7019      	strb	r1, [r3, #0]
 8000bc2:	bc10      	pop	{r4}
 8000bc4:	4770      	bx	lr

08000bc6 <__sfputs_r>:
 8000bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc8:	4606      	mov	r6, r0
 8000bca:	460f      	mov	r7, r1
 8000bcc:	4614      	mov	r4, r2
 8000bce:	18d5      	adds	r5, r2, r3
 8000bd0:	42ac      	cmp	r4, r5
 8000bd2:	d101      	bne.n	8000bd8 <__sfputs_r+0x12>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e007      	b.n	8000be8 <__sfputs_r+0x22>
 8000bd8:	463a      	mov	r2, r7
 8000bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bde:	4630      	mov	r0, r6
 8000be0:	f7ff ffdc 	bl	8000b9c <__sfputc_r>
 8000be4:	1c43      	adds	r3, r0, #1
 8000be6:	d1f3      	bne.n	8000bd0 <__sfputs_r+0xa>
 8000be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bec <_vfiprintf_r>:
 8000bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf0:	460d      	mov	r5, r1
 8000bf2:	b09d      	sub	sp, #116	@ 0x74
 8000bf4:	4614      	mov	r4, r2
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	b118      	cbz	r0, 8000c04 <_vfiprintf_r+0x18>
 8000bfc:	6a03      	ldr	r3, [r0, #32]
 8000bfe:	b90b      	cbnz	r3, 8000c04 <_vfiprintf_r+0x18>
 8000c00:	f7ff fcda 	bl	80005b8 <__sinit>
 8000c04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c06:	07d9      	lsls	r1, r3, #31
 8000c08:	d405      	bmi.n	8000c16 <_vfiprintf_r+0x2a>
 8000c0a:	89ab      	ldrh	r3, [r5, #12]
 8000c0c:	059a      	lsls	r2, r3, #22
 8000c0e:	d402      	bmi.n	8000c16 <_vfiprintf_r+0x2a>
 8000c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c12:	f7ff fec8 	bl	80009a6 <__retarget_lock_acquire_recursive>
 8000c16:	89ab      	ldrh	r3, [r5, #12]
 8000c18:	071b      	lsls	r3, r3, #28
 8000c1a:	d501      	bpl.n	8000c20 <_vfiprintf_r+0x34>
 8000c1c:	692b      	ldr	r3, [r5, #16]
 8000c1e:	b99b      	cbnz	r3, 8000c48 <_vfiprintf_r+0x5c>
 8000c20:	4629      	mov	r1, r5
 8000c22:	4630      	mov	r0, r6
 8000c24:	f7ff fdf0 	bl	8000808 <__swsetup_r>
 8000c28:	b170      	cbz	r0, 8000c48 <_vfiprintf_r+0x5c>
 8000c2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c2c:	07dc      	lsls	r4, r3, #31
 8000c2e:	d504      	bpl.n	8000c3a <_vfiprintf_r+0x4e>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	b01d      	add	sp, #116	@ 0x74
 8000c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c3a:	89ab      	ldrh	r3, [r5, #12]
 8000c3c:	0598      	lsls	r0, r3, #22
 8000c3e:	d4f7      	bmi.n	8000c30 <_vfiprintf_r+0x44>
 8000c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c42:	f7ff feb1 	bl	80009a8 <__retarget_lock_release_recursive>
 8000c46:	e7f3      	b.n	8000c30 <_vfiprintf_r+0x44>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c4e:	f04f 0901 	mov.w	r9, #1
 8000c52:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8000e08 <_vfiprintf_r+0x21c>
 8000c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c58:	2320      	movs	r3, #32
 8000c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c5e:	2330      	movs	r3, #48	@ 0x30
 8000c60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c64:	4623      	mov	r3, r4
 8000c66:	469a      	mov	sl, r3
 8000c68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c6c:	b10a      	cbz	r2, 8000c72 <_vfiprintf_r+0x86>
 8000c6e:	2a25      	cmp	r2, #37	@ 0x25
 8000c70:	d1f9      	bne.n	8000c66 <_vfiprintf_r+0x7a>
 8000c72:	ebba 0b04 	subs.w	fp, sl, r4
 8000c76:	d00b      	beq.n	8000c90 <_vfiprintf_r+0xa4>
 8000c78:	465b      	mov	r3, fp
 8000c7a:	4622      	mov	r2, r4
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f7ff ffa1 	bl	8000bc6 <__sfputs_r>
 8000c84:	3001      	adds	r0, #1
 8000c86:	f000 80a7 	beq.w	8000dd8 <_vfiprintf_r+0x1ec>
 8000c8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c8c:	445a      	add	r2, fp
 8000c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c90:	f89a 3000 	ldrb.w	r3, [sl]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 809f 	beq.w	8000dd8 <_vfiprintf_r+0x1ec>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	f10a 0a01 	add.w	sl, sl, #1
 8000ca4:	9304      	str	r3, [sp, #16]
 8000ca6:	9307      	str	r3, [sp, #28]
 8000ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cb2:	4654      	mov	r4, sl
 8000cb4:	2205      	movs	r2, #5
 8000cb6:	4854      	ldr	r0, [pc, #336]	@ (8000e08 <_vfiprintf_r+0x21c>)
 8000cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cbc:	f000 fb7a 	bl	80013b4 <memchr>
 8000cc0:	9a04      	ldr	r2, [sp, #16]
 8000cc2:	b9d8      	cbnz	r0, 8000cfc <_vfiprintf_r+0x110>
 8000cc4:	06d1      	lsls	r1, r2, #27
 8000cc6:	bf44      	itt	mi
 8000cc8:	2320      	movmi	r3, #32
 8000cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cce:	0713      	lsls	r3, r2, #28
 8000cd0:	bf44      	itt	mi
 8000cd2:	232b      	movmi	r3, #43	@ 0x2b
 8000cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cde:	d015      	beq.n	8000d0c <_vfiprintf_r+0x120>
 8000ce0:	9a07      	ldr	r2, [sp, #28]
 8000ce2:	4654      	mov	r4, sl
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f04f 0c0a 	mov.w	ip, #10
 8000cea:	4621      	mov	r1, r4
 8000cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cf0:	3b30      	subs	r3, #48	@ 0x30
 8000cf2:	2b09      	cmp	r3, #9
 8000cf4:	d94b      	bls.n	8000d8e <_vfiprintf_r+0x1a2>
 8000cf6:	b1b0      	cbz	r0, 8000d26 <_vfiprintf_r+0x13a>
 8000cf8:	9207      	str	r2, [sp, #28]
 8000cfa:	e014      	b.n	8000d26 <_vfiprintf_r+0x13a>
 8000cfc:	eba0 0308 	sub.w	r3, r0, r8
 8000d00:	46a2      	mov	sl, r4
 8000d02:	fa09 f303 	lsl.w	r3, r9, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	9304      	str	r3, [sp, #16]
 8000d0a:	e7d2      	b.n	8000cb2 <_vfiprintf_r+0xc6>
 8000d0c:	9b03      	ldr	r3, [sp, #12]
 8000d0e:	1d19      	adds	r1, r3, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	9103      	str	r1, [sp, #12]
 8000d16:	bfbb      	ittet	lt
 8000d18:	425b      	neglt	r3, r3
 8000d1a:	f042 0202 	orrlt.w	r2, r2, #2
 8000d1e:	9307      	strge	r3, [sp, #28]
 8000d20:	9307      	strlt	r3, [sp, #28]
 8000d22:	bfb8      	it	lt
 8000d24:	9204      	strlt	r2, [sp, #16]
 8000d26:	7823      	ldrb	r3, [r4, #0]
 8000d28:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d2a:	d10a      	bne.n	8000d42 <_vfiprintf_r+0x156>
 8000d2c:	7863      	ldrb	r3, [r4, #1]
 8000d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d30:	d132      	bne.n	8000d98 <_vfiprintf_r+0x1ac>
 8000d32:	9b03      	ldr	r3, [sp, #12]
 8000d34:	3402      	adds	r4, #2
 8000d36:	1d1a      	adds	r2, r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d3e:	9203      	str	r2, [sp, #12]
 8000d40:	9305      	str	r3, [sp, #20]
 8000d42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000e0c <_vfiprintf_r+0x220>
 8000d46:	2203      	movs	r2, #3
 8000d48:	7821      	ldrb	r1, [r4, #0]
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	f000 fb32 	bl	80013b4 <memchr>
 8000d50:	b138      	cbz	r0, 8000d62 <_vfiprintf_r+0x176>
 8000d52:	eba0 000a 	sub.w	r0, r0, sl
 8000d56:	2240      	movs	r2, #64	@ 0x40
 8000d58:	9b04      	ldr	r3, [sp, #16]
 8000d5a:	3401      	adds	r4, #1
 8000d5c:	4082      	lsls	r2, r0
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	9304      	str	r3, [sp, #16]
 8000d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d66:	2206      	movs	r2, #6
 8000d68:	4829      	ldr	r0, [pc, #164]	@ (8000e10 <_vfiprintf_r+0x224>)
 8000d6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d6e:	f000 fb21 	bl	80013b4 <memchr>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d03f      	beq.n	8000df6 <_vfiprintf_r+0x20a>
 8000d76:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <_vfiprintf_r+0x228>)
 8000d78:	bb1b      	cbnz	r3, 8000dc2 <_vfiprintf_r+0x1d6>
 8000d7a:	9b03      	ldr	r3, [sp, #12]
 8000d7c:	3307      	adds	r3, #7
 8000d7e:	f023 0307 	bic.w	r3, r3, #7
 8000d82:	3308      	adds	r3, #8
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d88:	443b      	add	r3, r7
 8000d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d8c:	e76a      	b.n	8000c64 <_vfiprintf_r+0x78>
 8000d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d92:	460c      	mov	r4, r1
 8000d94:	2001      	movs	r0, #1
 8000d96:	e7a8      	b.n	8000cea <_vfiprintf_r+0xfe>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	3401      	adds	r4, #1
 8000d9c:	f04f 0c0a 	mov.w	ip, #10
 8000da0:	4619      	mov	r1, r3
 8000da2:	9305      	str	r3, [sp, #20]
 8000da4:	4620      	mov	r0, r4
 8000da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000daa:	3a30      	subs	r2, #48	@ 0x30
 8000dac:	2a09      	cmp	r2, #9
 8000dae:	d903      	bls.n	8000db8 <_vfiprintf_r+0x1cc>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0c6      	beq.n	8000d42 <_vfiprintf_r+0x156>
 8000db4:	9105      	str	r1, [sp, #20]
 8000db6:	e7c4      	b.n	8000d42 <_vfiprintf_r+0x156>
 8000db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e7f0      	b.n	8000da4 <_vfiprintf_r+0x1b8>
 8000dc2:	ab03      	add	r3, sp, #12
 8000dc4:	462a      	mov	r2, r5
 8000dc6:	a904      	add	r1, sp, #16
 8000dc8:	4630      	mov	r0, r6
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <_vfiprintf_r+0x22c>)
 8000dce:	f3af 8000 	nop.w
 8000dd2:	4607      	mov	r7, r0
 8000dd4:	1c78      	adds	r0, r7, #1
 8000dd6:	d1d6      	bne.n	8000d86 <_vfiprintf_r+0x19a>
 8000dd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dda:	07d9      	lsls	r1, r3, #31
 8000ddc:	d405      	bmi.n	8000dea <_vfiprintf_r+0x1fe>
 8000dde:	89ab      	ldrh	r3, [r5, #12]
 8000de0:	059a      	lsls	r2, r3, #22
 8000de2:	d402      	bmi.n	8000dea <_vfiprintf_r+0x1fe>
 8000de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000de6:	f7ff fddf 	bl	80009a8 <__retarget_lock_release_recursive>
 8000dea:	89ab      	ldrh	r3, [r5, #12]
 8000dec:	065b      	lsls	r3, r3, #25
 8000dee:	f53f af1f 	bmi.w	8000c30 <_vfiprintf_r+0x44>
 8000df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000df4:	e71e      	b.n	8000c34 <_vfiprintf_r+0x48>
 8000df6:	ab03      	add	r3, sp, #12
 8000df8:	462a      	mov	r2, r5
 8000dfa:	a904      	add	r1, sp, #16
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <_vfiprintf_r+0x22c>)
 8000e02:	f000 f87d 	bl	8000f00 <_printf_i>
 8000e06:	e7e4      	b.n	8000dd2 <_vfiprintf_r+0x1e6>
 8000e08:	08001669 	.word	0x08001669
 8000e0c:	0800166f 	.word	0x0800166f
 8000e10:	08001673 	.word	0x08001673
 8000e14:	00000000 	.word	0x00000000
 8000e18:	08000bc7 	.word	0x08000bc7

08000e1c <_printf_common>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	4616      	mov	r6, r2
 8000e22:	4698      	mov	r8, r3
 8000e24:	688a      	ldr	r2, [r1, #8]
 8000e26:	4607      	mov	r7, r0
 8000e28:	690b      	ldr	r3, [r1, #16]
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e30:	4293      	cmp	r3, r2
 8000e32:	bfb8      	it	lt
 8000e34:	4613      	movlt	r3, r2
 8000e36:	6033      	str	r3, [r6, #0]
 8000e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e3c:	b10a      	cbz	r2, 8000e42 <_printf_common+0x26>
 8000e3e:	3301      	adds	r3, #1
 8000e40:	6033      	str	r3, [r6, #0]
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	0699      	lsls	r1, r3, #26
 8000e46:	bf42      	ittt	mi
 8000e48:	6833      	ldrmi	r3, [r6, #0]
 8000e4a:	3302      	addmi	r3, #2
 8000e4c:	6033      	strmi	r3, [r6, #0]
 8000e4e:	6825      	ldr	r5, [r4, #0]
 8000e50:	f015 0506 	ands.w	r5, r5, #6
 8000e54:	d106      	bne.n	8000e64 <_printf_common+0x48>
 8000e56:	f104 0a19 	add.w	sl, r4, #25
 8000e5a:	68e3      	ldr	r3, [r4, #12]
 8000e5c:	6832      	ldr	r2, [r6, #0]
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	dc2b      	bgt.n	8000ebc <_printf_common+0xa0>
 8000e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	3b00      	subs	r3, #0
 8000e6c:	bf18      	it	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	0692      	lsls	r2, r2, #26
 8000e72:	d430      	bmi.n	8000ed6 <_printf_common+0xba>
 8000e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e78:	4641      	mov	r1, r8
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	47c8      	blx	r9
 8000e7e:	3001      	adds	r0, #1
 8000e80:	d023      	beq.n	8000eca <_printf_common+0xae>
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	341a      	adds	r4, #26
 8000e86:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8000e8a:	f003 0306 	and.w	r3, r3, #6
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf0a      	itet	eq
 8000e92:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8000e96:	2500      	movne	r5, #0
 8000e98:	6833      	ldreq	r3, [r6, #0]
 8000e9a:	f04f 0600 	mov.w	r6, #0
 8000e9e:	bf08      	it	eq
 8000ea0:	1aed      	subeq	r5, r5, r3
 8000ea2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000ea6:	bf08      	it	eq
 8000ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000eac:	4293      	cmp	r3, r2
 8000eae:	bfc4      	itt	gt
 8000eb0:	1a9b      	subgt	r3, r3, r2
 8000eb2:	18ed      	addgt	r5, r5, r3
 8000eb4:	42b5      	cmp	r5, r6
 8000eb6:	d11a      	bne.n	8000eee <_printf_common+0xd2>
 8000eb8:	2000      	movs	r0, #0
 8000eba:	e008      	b.n	8000ece <_printf_common+0xb2>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	4652      	mov	r2, sl
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c8      	blx	r9
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d103      	bne.n	8000ed2 <_printf_common+0xb6>
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	3501      	adds	r5, #1
 8000ed4:	e7c1      	b.n	8000e5a <_printf_common+0x3e>
 8000ed6:	18e1      	adds	r1, r4, r3
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	2030      	movs	r0, #48	@ 0x30
 8000edc:	3302      	adds	r3, #2
 8000ede:	4422      	add	r2, r4
 8000ee0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ee8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000eec:	e7c2      	b.n	8000e74 <_printf_common+0x58>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4622      	mov	r2, r4
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	47c8      	blx	r9
 8000ef8:	3001      	adds	r0, #1
 8000efa:	d0e6      	beq.n	8000eca <_printf_common+0xae>
 8000efc:	3601      	adds	r6, #1
 8000efe:	e7d9      	b.n	8000eb4 <_printf_common+0x98>

08000f00 <_printf_i>:
 8000f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f04:	7e0f      	ldrb	r7, [r1, #24]
 8000f06:	4691      	mov	r9, r2
 8000f08:	4680      	mov	r8, r0
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	2f78      	cmp	r7, #120	@ 0x78
 8000f0e:	469a      	mov	sl, r3
 8000f10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f16:	d807      	bhi.n	8000f28 <_printf_i+0x28>
 8000f18:	2f62      	cmp	r7, #98	@ 0x62
 8000f1a:	d80a      	bhi.n	8000f32 <_printf_i+0x32>
 8000f1c:	2f00      	cmp	r7, #0
 8000f1e:	f000 80d1 	beq.w	80010c4 <_printf_i+0x1c4>
 8000f22:	2f58      	cmp	r7, #88	@ 0x58
 8000f24:	f000 80b8 	beq.w	8001098 <_printf_i+0x198>
 8000f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f30:	e03a      	b.n	8000fa8 <_printf_i+0xa8>
 8000f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f36:	2b15      	cmp	r3, #21
 8000f38:	d8f6      	bhi.n	8000f28 <_printf_i+0x28>
 8000f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f40 <_printf_i+0x40>)
 8000f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f40:	08000f99 	.word	0x08000f99
 8000f44:	08000fad 	.word	0x08000fad
 8000f48:	08000f29 	.word	0x08000f29
 8000f4c:	08000f29 	.word	0x08000f29
 8000f50:	08000f29 	.word	0x08000f29
 8000f54:	08000f29 	.word	0x08000f29
 8000f58:	08000fad 	.word	0x08000fad
 8000f5c:	08000f29 	.word	0x08000f29
 8000f60:	08000f29 	.word	0x08000f29
 8000f64:	08000f29 	.word	0x08000f29
 8000f68:	08000f29 	.word	0x08000f29
 8000f6c:	080010ab 	.word	0x080010ab
 8000f70:	08000fd7 	.word	0x08000fd7
 8000f74:	08001065 	.word	0x08001065
 8000f78:	08000f29 	.word	0x08000f29
 8000f7c:	08000f29 	.word	0x08000f29
 8000f80:	080010cd 	.word	0x080010cd
 8000f84:	08000f29 	.word	0x08000f29
 8000f88:	08000fd7 	.word	0x08000fd7
 8000f8c:	08000f29 	.word	0x08000f29
 8000f90:	08000f29 	.word	0x08000f29
 8000f94:	0800106d 	.word	0x0800106d
 8000f98:	6833      	ldr	r3, [r6, #0]
 8000f9a:	1d1a      	adds	r2, r3, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6032      	str	r2, [r6, #0]
 8000fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e09c      	b.n	80010e6 <_printf_i+0x1e6>
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	6820      	ldr	r0, [r4, #0]
 8000fb0:	1d19      	adds	r1, r3, #4
 8000fb2:	6031      	str	r1, [r6, #0]
 8000fb4:	0606      	lsls	r6, r0, #24
 8000fb6:	d501      	bpl.n	8000fbc <_printf_i+0xbc>
 8000fb8:	681d      	ldr	r5, [r3, #0]
 8000fba:	e003      	b.n	8000fc4 <_printf_i+0xc4>
 8000fbc:	0645      	lsls	r5, r0, #25
 8000fbe:	d5fb      	bpl.n	8000fb8 <_printf_i+0xb8>
 8000fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fc4:	2d00      	cmp	r5, #0
 8000fc6:	da03      	bge.n	8000fd0 <_printf_i+0xd0>
 8000fc8:	232d      	movs	r3, #45	@ 0x2d
 8000fca:	426d      	negs	r5, r5
 8000fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fd0:	4858      	ldr	r0, [pc, #352]	@ (8001134 <_printf_i+0x234>)
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	e011      	b.n	8000ffa <_printf_i+0xfa>
 8000fd6:	6821      	ldr	r1, [r4, #0]
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	0608      	lsls	r0, r1, #24
 8000fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8000fe0:	d402      	bmi.n	8000fe8 <_printf_i+0xe8>
 8000fe2:	0649      	lsls	r1, r1, #25
 8000fe4:	bf48      	it	mi
 8000fe6:	b2ad      	uxthmi	r5, r5
 8000fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000fea:	6033      	str	r3, [r6, #0]
 8000fec:	4851      	ldr	r0, [pc, #324]	@ (8001134 <_printf_i+0x234>)
 8000fee:	bf14      	ite	ne
 8000ff0:	230a      	movne	r3, #10
 8000ff2:	2308      	moveq	r3, #8
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ffa:	6866      	ldr	r6, [r4, #4]
 8000ffc:	2e00      	cmp	r6, #0
 8000ffe:	60a6      	str	r6, [r4, #8]
 8001000:	db05      	blt.n	800100e <_printf_i+0x10e>
 8001002:	6821      	ldr	r1, [r4, #0]
 8001004:	432e      	orrs	r6, r5
 8001006:	f021 0104 	bic.w	r1, r1, #4
 800100a:	6021      	str	r1, [r4, #0]
 800100c:	d04b      	beq.n	80010a6 <_printf_i+0x1a6>
 800100e:	4616      	mov	r6, r2
 8001010:	fbb5 f1f3 	udiv	r1, r5, r3
 8001014:	fb03 5711 	mls	r7, r3, r1, r5
 8001018:	5dc7      	ldrb	r7, [r0, r7]
 800101a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800101e:	462f      	mov	r7, r5
 8001020:	460d      	mov	r5, r1
 8001022:	42bb      	cmp	r3, r7
 8001024:	d9f4      	bls.n	8001010 <_printf_i+0x110>
 8001026:	2b08      	cmp	r3, #8
 8001028:	d10b      	bne.n	8001042 <_printf_i+0x142>
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	07df      	lsls	r7, r3, #31
 800102e:	d508      	bpl.n	8001042 <_printf_i+0x142>
 8001030:	6923      	ldr	r3, [r4, #16]
 8001032:	6861      	ldr	r1, [r4, #4]
 8001034:	4299      	cmp	r1, r3
 8001036:	bfde      	ittt	le
 8001038:	2330      	movle	r3, #48	@ 0x30
 800103a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800103e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001042:	1b92      	subs	r2, r2, r6
 8001044:	6122      	str	r2, [r4, #16]
 8001046:	464b      	mov	r3, r9
 8001048:	aa03      	add	r2, sp, #12
 800104a:	4621      	mov	r1, r4
 800104c:	4640      	mov	r0, r8
 800104e:	f8cd a000 	str.w	sl, [sp]
 8001052:	f7ff fee3 	bl	8000e1c <_printf_common>
 8001056:	3001      	adds	r0, #1
 8001058:	d14a      	bne.n	80010f0 <_printf_i+0x1f0>
 800105a:	f04f 30ff 	mov.w	r0, #4294967295
 800105e:	b004      	add	sp, #16
 8001060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	f043 0320 	orr.w	r3, r3, #32
 800106a:	6023      	str	r3, [r4, #0]
 800106c:	2778      	movs	r7, #120	@ 0x78
 800106e:	4832      	ldr	r0, [pc, #200]	@ (8001138 <_printf_i+0x238>)
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001076:	061f      	lsls	r7, r3, #24
 8001078:	6831      	ldr	r1, [r6, #0]
 800107a:	f851 5b04 	ldr.w	r5, [r1], #4
 800107e:	d402      	bmi.n	8001086 <_printf_i+0x186>
 8001080:	065f      	lsls	r7, r3, #25
 8001082:	bf48      	it	mi
 8001084:	b2ad      	uxthmi	r5, r5
 8001086:	6031      	str	r1, [r6, #0]
 8001088:	07d9      	lsls	r1, r3, #31
 800108a:	bf44      	itt	mi
 800108c:	f043 0320 	orrmi.w	r3, r3, #32
 8001090:	6023      	strmi	r3, [r4, #0]
 8001092:	b11d      	cbz	r5, 800109c <_printf_i+0x19c>
 8001094:	2310      	movs	r3, #16
 8001096:	e7ad      	b.n	8000ff4 <_printf_i+0xf4>
 8001098:	4826      	ldr	r0, [pc, #152]	@ (8001134 <_printf_i+0x234>)
 800109a:	e7e9      	b.n	8001070 <_printf_i+0x170>
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	f023 0320 	bic.w	r3, r3, #32
 80010a2:	6023      	str	r3, [r4, #0]
 80010a4:	e7f6      	b.n	8001094 <_printf_i+0x194>
 80010a6:	4616      	mov	r6, r2
 80010a8:	e7bd      	b.n	8001026 <_printf_i+0x126>
 80010aa:	6833      	ldr	r3, [r6, #0]
 80010ac:	6825      	ldr	r5, [r4, #0]
 80010ae:	1d18      	adds	r0, r3, #4
 80010b0:	6961      	ldr	r1, [r4, #20]
 80010b2:	6030      	str	r0, [r6, #0]
 80010b4:	062e      	lsls	r6, r5, #24
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	d501      	bpl.n	80010be <_printf_i+0x1be>
 80010ba:	6019      	str	r1, [r3, #0]
 80010bc:	e002      	b.n	80010c4 <_printf_i+0x1c4>
 80010be:	0668      	lsls	r0, r5, #25
 80010c0:	d5fb      	bpl.n	80010ba <_printf_i+0x1ba>
 80010c2:	8019      	strh	r1, [r3, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	4616      	mov	r6, r2
 80010c8:	6123      	str	r3, [r4, #16]
 80010ca:	e7bc      	b.n	8001046 <_printf_i+0x146>
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	2100      	movs	r1, #0
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	6032      	str	r2, [r6, #0]
 80010d4:	681e      	ldr	r6, [r3, #0]
 80010d6:	6862      	ldr	r2, [r4, #4]
 80010d8:	4630      	mov	r0, r6
 80010da:	f000 f96b 	bl	80013b4 <memchr>
 80010de:	b108      	cbz	r0, 80010e4 <_printf_i+0x1e4>
 80010e0:	1b80      	subs	r0, r0, r6
 80010e2:	6060      	str	r0, [r4, #4]
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	6123      	str	r3, [r4, #16]
 80010e8:	2300      	movs	r3, #0
 80010ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010ee:	e7aa      	b.n	8001046 <_printf_i+0x146>
 80010f0:	6923      	ldr	r3, [r4, #16]
 80010f2:	4632      	mov	r2, r6
 80010f4:	4649      	mov	r1, r9
 80010f6:	4640      	mov	r0, r8
 80010f8:	47d0      	blx	sl
 80010fa:	3001      	adds	r0, #1
 80010fc:	d0ad      	beq.n	800105a <_printf_i+0x15a>
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	079b      	lsls	r3, r3, #30
 8001102:	d413      	bmi.n	800112c <_printf_i+0x22c>
 8001104:	68e0      	ldr	r0, [r4, #12]
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	4298      	cmp	r0, r3
 800110a:	bfb8      	it	lt
 800110c:	4618      	movlt	r0, r3
 800110e:	e7a6      	b.n	800105e <_printf_i+0x15e>
 8001110:	2301      	movs	r3, #1
 8001112:	4632      	mov	r2, r6
 8001114:	4649      	mov	r1, r9
 8001116:	4640      	mov	r0, r8
 8001118:	47d0      	blx	sl
 800111a:	3001      	adds	r0, #1
 800111c:	d09d      	beq.n	800105a <_printf_i+0x15a>
 800111e:	3501      	adds	r5, #1
 8001120:	68e3      	ldr	r3, [r4, #12]
 8001122:	9903      	ldr	r1, [sp, #12]
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	42ab      	cmp	r3, r5
 8001128:	dcf2      	bgt.n	8001110 <_printf_i+0x210>
 800112a:	e7eb      	b.n	8001104 <_printf_i+0x204>
 800112c:	2500      	movs	r5, #0
 800112e:	f104 0619 	add.w	r6, r4, #25
 8001132:	e7f5      	b.n	8001120 <_printf_i+0x220>
 8001134:	0800167a 	.word	0x0800167a
 8001138:	0800168b 	.word	0x0800168b

0800113c <__sflush_r>:
 800113c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	0716      	lsls	r6, r2, #28
 8001144:	4605      	mov	r5, r0
 8001146:	460c      	mov	r4, r1
 8001148:	d454      	bmi.n	80011f4 <__sflush_r+0xb8>
 800114a:	684b      	ldr	r3, [r1, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dc02      	bgt.n	8001156 <__sflush_r+0x1a>
 8001150:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	dd48      	ble.n	80011e8 <__sflush_r+0xac>
 8001156:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001158:	2e00      	cmp	r6, #0
 800115a:	d045      	beq.n	80011e8 <__sflush_r+0xac>
 800115c:	2300      	movs	r3, #0
 800115e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001162:	682f      	ldr	r7, [r5, #0]
 8001164:	6a21      	ldr	r1, [r4, #32]
 8001166:	602b      	str	r3, [r5, #0]
 8001168:	d030      	beq.n	80011cc <__sflush_r+0x90>
 800116a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	0759      	lsls	r1, r3, #29
 8001170:	d505      	bpl.n	800117e <__sflush_r+0x42>
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001178:	b10b      	cbz	r3, 800117e <__sflush_r+0x42>
 800117a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	2300      	movs	r3, #0
 8001180:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001182:	6a21      	ldr	r1, [r4, #32]
 8001184:	4628      	mov	r0, r5
 8001186:	47b0      	blx	r6
 8001188:	1c43      	adds	r3, r0, #1
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	d106      	bne.n	800119c <__sflush_r+0x60>
 800118e:	6829      	ldr	r1, [r5, #0]
 8001190:	291d      	cmp	r1, #29
 8001192:	d82b      	bhi.n	80011ec <__sflush_r+0xb0>
 8001194:	4a28      	ldr	r2, [pc, #160]	@ (8001238 <__sflush_r+0xfc>)
 8001196:	40ca      	lsrs	r2, r1
 8001198:	07d6      	lsls	r6, r2, #31
 800119a:	d527      	bpl.n	80011ec <__sflush_r+0xb0>
 800119c:	2200      	movs	r2, #0
 800119e:	04d9      	lsls	r1, r3, #19
 80011a0:	6062      	str	r2, [r4, #4]
 80011a2:	6922      	ldr	r2, [r4, #16]
 80011a4:	6022      	str	r2, [r4, #0]
 80011a6:	d504      	bpl.n	80011b2 <__sflush_r+0x76>
 80011a8:	1c42      	adds	r2, r0, #1
 80011aa:	d101      	bne.n	80011b0 <__sflush_r+0x74>
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	b903      	cbnz	r3, 80011b2 <__sflush_r+0x76>
 80011b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80011b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011b4:	602f      	str	r7, [r5, #0]
 80011b6:	b1b9      	cbz	r1, 80011e8 <__sflush_r+0xac>
 80011b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011bc:	4299      	cmp	r1, r3
 80011be:	d002      	beq.n	80011c6 <__sflush_r+0x8a>
 80011c0:	4628      	mov	r0, r5
 80011c2:	f7ff fbf3 	bl	80009ac <_free_r>
 80011c6:	2300      	movs	r3, #0
 80011c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ca:	e00d      	b.n	80011e8 <__sflush_r+0xac>
 80011cc:	2301      	movs	r3, #1
 80011ce:	4628      	mov	r0, r5
 80011d0:	47b0      	blx	r6
 80011d2:	4602      	mov	r2, r0
 80011d4:	1c50      	adds	r0, r2, #1
 80011d6:	d1c9      	bne.n	800116c <__sflush_r+0x30>
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0c6      	beq.n	800116c <__sflush_r+0x30>
 80011de:	2b1d      	cmp	r3, #29
 80011e0:	d001      	beq.n	80011e6 <__sflush_r+0xaa>
 80011e2:	2b16      	cmp	r3, #22
 80011e4:	d11c      	bne.n	8001220 <__sflush_r+0xe4>
 80011e6:	602f      	str	r7, [r5, #0]
 80011e8:	2000      	movs	r0, #0
 80011ea:	e020      	b.n	800122e <__sflush_r+0xf2>
 80011ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	e019      	b.n	8001228 <__sflush_r+0xec>
 80011f4:	690f      	ldr	r7, [r1, #16]
 80011f6:	2f00      	cmp	r7, #0
 80011f8:	d0f6      	beq.n	80011e8 <__sflush_r+0xac>
 80011fa:	0793      	lsls	r3, r2, #30
 80011fc:	680e      	ldr	r6, [r1, #0]
 80011fe:	600f      	str	r7, [r1, #0]
 8001200:	bf0c      	ite	eq
 8001202:	694b      	ldreq	r3, [r1, #20]
 8001204:	2300      	movne	r3, #0
 8001206:	1bf6      	subs	r6, r6, r7
 8001208:	608b      	str	r3, [r1, #8]
 800120a:	2e00      	cmp	r6, #0
 800120c:	ddec      	ble.n	80011e8 <__sflush_r+0xac>
 800120e:	4633      	mov	r3, r6
 8001210:	463a      	mov	r2, r7
 8001212:	6a21      	ldr	r1, [r4, #32]
 8001214:	4628      	mov	r0, r5
 8001216:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800121a:	47e0      	blx	ip
 800121c:	2800      	cmp	r0, #0
 800121e:	dc07      	bgt.n	8001230 <__sflush_r+0xf4>
 8001220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	81a3      	strh	r3, [r4, #12]
 800122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001230:	4407      	add	r7, r0
 8001232:	1a36      	subs	r6, r6, r0
 8001234:	e7e9      	b.n	800120a <__sflush_r+0xce>
 8001236:	bf00      	nop
 8001238:	20400001 	.word	0x20400001

0800123c <_fflush_r>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	690b      	ldr	r3, [r1, #16]
 8001240:	4605      	mov	r5, r0
 8001242:	460c      	mov	r4, r1
 8001244:	b913      	cbnz	r3, 800124c <_fflush_r+0x10>
 8001246:	2500      	movs	r5, #0
 8001248:	4628      	mov	r0, r5
 800124a:	bd38      	pop	{r3, r4, r5, pc}
 800124c:	b118      	cbz	r0, 8001256 <_fflush_r+0x1a>
 800124e:	6a03      	ldr	r3, [r0, #32]
 8001250:	b90b      	cbnz	r3, 8001256 <_fflush_r+0x1a>
 8001252:	f7ff f9b1 	bl	80005b8 <__sinit>
 8001256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f3      	beq.n	8001246 <_fflush_r+0xa>
 800125e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001260:	07d0      	lsls	r0, r2, #31
 8001262:	d404      	bmi.n	800126e <_fflush_r+0x32>
 8001264:	0599      	lsls	r1, r3, #22
 8001266:	d402      	bmi.n	800126e <_fflush_r+0x32>
 8001268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800126a:	f7ff fb9c 	bl	80009a6 <__retarget_lock_acquire_recursive>
 800126e:	4628      	mov	r0, r5
 8001270:	4621      	mov	r1, r4
 8001272:	f7ff ff63 	bl	800113c <__sflush_r>
 8001276:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001278:	4605      	mov	r5, r0
 800127a:	07da      	lsls	r2, r3, #31
 800127c:	d4e4      	bmi.n	8001248 <_fflush_r+0xc>
 800127e:	89a3      	ldrh	r3, [r4, #12]
 8001280:	059b      	lsls	r3, r3, #22
 8001282:	d4e1      	bmi.n	8001248 <_fflush_r+0xc>
 8001284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001286:	f7ff fb8f 	bl	80009a8 <__retarget_lock_release_recursive>
 800128a:	e7dd      	b.n	8001248 <_fflush_r+0xc>

0800128c <__swhatbuf_r>:
 800128c:	b570      	push	{r4, r5, r6, lr}
 800128e:	460c      	mov	r4, r1
 8001290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001294:	b096      	sub	sp, #88	@ 0x58
 8001296:	4615      	mov	r5, r2
 8001298:	2900      	cmp	r1, #0
 800129a:	461e      	mov	r6, r3
 800129c:	da0c      	bge.n	80012b8 <__swhatbuf_r+0x2c>
 800129e:	89a3      	ldrh	r3, [r4, #12]
 80012a0:	2100      	movs	r1, #0
 80012a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012a6:	bf14      	ite	ne
 80012a8:	2340      	movne	r3, #64	@ 0x40
 80012aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012ae:	2000      	movs	r0, #0
 80012b0:	6031      	str	r1, [r6, #0]
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	b016      	add	sp, #88	@ 0x58
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
 80012b8:	466a      	mov	r2, sp
 80012ba:	f000 f849 	bl	8001350 <_fstat_r>
 80012be:	2800      	cmp	r0, #0
 80012c0:	dbed      	blt.n	800129e <__swhatbuf_r+0x12>
 80012c2:	9901      	ldr	r1, [sp, #4]
 80012c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80012c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012cc:	4259      	negs	r1, r3
 80012ce:	4159      	adcs	r1, r3
 80012d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d4:	e7eb      	b.n	80012ae <__swhatbuf_r+0x22>

080012d6 <__smakebuf_r>:
 80012d6:	898b      	ldrh	r3, [r1, #12]
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012da:	079d      	lsls	r5, r3, #30
 80012dc:	4606      	mov	r6, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	d507      	bpl.n	80012f2 <__smakebuf_r+0x1c>
 80012e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80012e6:	6023      	str	r3, [r4, #0]
 80012e8:	6123      	str	r3, [r4, #16]
 80012ea:	2301      	movs	r3, #1
 80012ec:	6163      	str	r3, [r4, #20]
 80012ee:	b003      	add	sp, #12
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f2:	ab01      	add	r3, sp, #4
 80012f4:	466a      	mov	r2, sp
 80012f6:	f7ff ffc9 	bl	800128c <__swhatbuf_r>
 80012fa:	9f00      	ldr	r7, [sp, #0]
 80012fc:	4605      	mov	r5, r0
 80012fe:	4630      	mov	r0, r6
 8001300:	4639      	mov	r1, r7
 8001302:	f7ff fbbf 	bl	8000a84 <_malloc_r>
 8001306:	b948      	cbnz	r0, 800131c <__smakebuf_r+0x46>
 8001308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800130c:	059a      	lsls	r2, r3, #22
 800130e:	d4ee      	bmi.n	80012ee <__smakebuf_r+0x18>
 8001310:	f023 0303 	bic.w	r3, r3, #3
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	81a3      	strh	r3, [r4, #12]
 800131a:	e7e2      	b.n	80012e2 <__smakebuf_r+0xc>
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	6020      	str	r0, [r4, #0]
 8001320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	9b01      	ldr	r3, [sp, #4]
 8001328:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800132c:	b15b      	cbz	r3, 8001346 <__smakebuf_r+0x70>
 800132e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001332:	4630      	mov	r0, r6
 8001334:	f000 f81e 	bl	8001374 <_isatty_r>
 8001338:	b128      	cbz	r0, 8001346 <__smakebuf_r+0x70>
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f023 0303 	bic.w	r3, r3, #3
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	81a3      	strh	r3, [r4, #12]
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	431d      	orrs	r5, r3
 800134a:	81a5      	strh	r5, [r4, #12]
 800134c:	e7cf      	b.n	80012ee <__smakebuf_r+0x18>
	...

08001350 <_fstat_r>:
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	2300      	movs	r3, #0
 8001354:	4d06      	ldr	r5, [pc, #24]	@ (8001370 <_fstat_r+0x20>)
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	602b      	str	r3, [r5, #0]
 800135e:	f7ff f847 	bl	80003f0 <_fstat>
 8001362:	1c43      	adds	r3, r0, #1
 8001364:	d102      	bne.n	800136c <_fstat_r+0x1c>
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	b103      	cbz	r3, 800136c <_fstat_r+0x1c>
 800136a:	6023      	str	r3, [r4, #0]
 800136c:	bd38      	pop	{r3, r4, r5, pc}
 800136e:	bf00      	nop
 8001370:	200003b8 	.word	0x200003b8

08001374 <_isatty_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	2300      	movs	r3, #0
 8001378:	4d05      	ldr	r5, [pc, #20]	@ (8001390 <_isatty_r+0x1c>)
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	f7ff f83c 	bl	80003fc <_isatty>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	d102      	bne.n	800138e <_isatty_r+0x1a>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	b103      	cbz	r3, 800138e <_isatty_r+0x1a>
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	200003b8 	.word	0x200003b8

08001394 <_sbrk_r>:
 8001394:	b538      	push	{r3, r4, r5, lr}
 8001396:	2300      	movs	r3, #0
 8001398:	4d05      	ldr	r5, [pc, #20]	@ (80013b0 <_sbrk_r+0x1c>)
 800139a:	4604      	mov	r4, r0
 800139c:	4608      	mov	r0, r1
 800139e:	602b      	str	r3, [r5, #0]
 80013a0:	f7ff f830 	bl	8000404 <_sbrk>
 80013a4:	1c43      	adds	r3, r0, #1
 80013a6:	d102      	bne.n	80013ae <_sbrk_r+0x1a>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	b103      	cbz	r3, 80013ae <_sbrk_r+0x1a>
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	bd38      	pop	{r3, r4, r5, pc}
 80013b0:	200003b8 	.word	0x200003b8

080013b4 <memchr>:
 80013b4:	b2c9      	uxtb	r1, r1
 80013b6:	4603      	mov	r3, r0
 80013b8:	4402      	add	r2, r0
 80013ba:	b510      	push	{r4, lr}
 80013bc:	4293      	cmp	r3, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	d101      	bne.n	80013c6 <memchr+0x12>
 80013c2:	2000      	movs	r0, #0
 80013c4:	e003      	b.n	80013ce <memchr+0x1a>
 80013c6:	7804      	ldrb	r4, [r0, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	428c      	cmp	r4, r1
 80013cc:	d1f6      	bne.n	80013bc <memchr+0x8>
 80013ce:	bd10      	pop	{r4, pc}

080013d0 <_init>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	bf00      	nop
 80013d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d6:	bc08      	pop	{r3}
 80013d8:	469e      	mov	lr, r3
 80013da:	4770      	bx	lr

080013dc <_fini>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	bf00      	nop
 80013e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e2:	bc08      	pop	{r3}
 80013e4:	469e      	mov	lr, r3
 80013e6:	4770      	bx	lr
