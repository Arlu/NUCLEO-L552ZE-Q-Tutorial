
12-SpecialRegisters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001338  080001f0  080001f0  000011f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08001528  08001528  00002528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017dc  080017dc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080017dc  080017dc  0000305c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080017dc  080017dc  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017dc  080017dc  000027dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017e0  080017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080017e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000005c  08001840  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08001840  000033c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a4d  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000552  00000000  00000000  00004ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000eb  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e7c  00000000  00000000  00005273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001954  00000000  00000000  000080ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a28f  00000000  00000000  00009a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c20  00000000  00000000  00013d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00014938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000005c 	.word	0x2000005c
 800020c:	00000000 	.word	0x00000000
 8000210:	08001510 	.word	0x08001510

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000060 	.word	0x20000060
 800022c:	08001510 	.word	0x08001510

08000230 <ITM_SendChar>:
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000 )
/* ITM Trace Enable Register */
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
    // Enable TRCENA (Trace Enable)
    DEMCR |= (1 << 24);
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <ITM_SendChar+0x44>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0d      	ldr	r2, [pc, #52]	@ (8000274 <ITM_SendChar+0x44>)
 8000240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000244:	6013      	str	r3, [r2, #0]

    // Enable stimulus port 0
    ITM_TRACE_EN |= (1 << 0);
 8000246:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <ITM_SendChar+0x48>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a0b      	ldr	r2, [pc, #44]	@ (8000278 <ITM_SendChar+0x48>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6013      	str	r3, [r2, #0]

    // Wait until FIFO is ready in bit [0]
    while (!(ITM_STIMULUS_PORT0 & 1));
 8000252:	bf00      	nop
 8000254:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f8      	beq.n	8000254 <ITM_SendChar+0x24>

    // Write to ITM stimulus port 0
    ITM_STIMULUS_PORT0 = ch;
 8000262:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000edfc 	.word	0xe000edfc
 8000278:	e0000e00 	.word	0xe0000e00

0800027c <_write>:

int _write(int file, char *ptr, int len)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e009      	b.n	80002a2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	60ba      	str	r2, [r7, #8]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ffca 	bl	8000230 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	3301      	adds	r3, #1
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	697a      	ldr	r2, [r7, #20]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbf1      	blt.n	800028e <_write+0x12>
  }
  return len;
 80002aa:	687b      	ldr	r3, [r7, #4]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <trigger_svc>:
#endif

// Function to create a SVCall exception for demonstration
__attribute__((naked)) void trigger_svc(void)
{
    __asm volatile ("SVC #0");
 80002b4:	df00      	svc	0
    __asm volatile ("BX LR");
 80002b6:	4770      	bx	lr
}
 80002b8:	bf00      	nop
	...

080002bc <print_registers>:
    __asm volatile ("MOV %0, PC" : "=r" (pc));
    return pc;
}

void print_registers(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b089      	sub	sp, #36	@ 0x24
 80002c0:	af02      	add	r7, sp, #8
    // Variables to store register values
    uint32_t msp_value, psp_value, lr_value, pc_value, xpsr_value;

    // Read MSP (Main Stack Pointer)
    __asm volatile ("MRS %0, MSP" : "=r" (msp_value));
 80002c2:	f3ef 8308 	mrs	r3, MSP
 80002c6:	617b      	str	r3, [r7, #20]

    // Read PSP (Process Stack Pointer)
    __asm volatile ("MRS %0, PSP" : "=r" (psp_value));
 80002c8:	f3ef 8309 	mrs	r3, PSP
 80002cc:	613b      	str	r3, [r7, #16]

    // Read LR (Link Register)
    __asm volatile ("MOV %0, LR" : "=r" (lr_value));
 80002ce:	4673      	mov	r3, lr
 80002d0:	60fb      	str	r3, [r7, #12]
    __asm volatile ("MOV %0, PC" : "=r" (pc));
 80002d2:	467b      	mov	r3, pc
 80002d4:	603b      	str	r3, [r7, #0]
    return pc;
 80002d6:	683b      	ldr	r3, [r7, #0]

    // Get PC value
    pc_value = get_pc();
 80002d8:	60bb      	str	r3, [r7, #8]

    // Read xPSR (Program Status Register)
    __asm volatile ("MRS %0, XPSR" : "=r" (xpsr_value));
 80002da:	f3ef 8303 	mrs	r3, PSR
 80002de:	607b      	str	r3, [r7, #4]

    // Print the values
    printf("MSP (Main Stack Pointer): 0x%08lX\n", msp_value);
 80002e0:	6979      	ldr	r1, [r7, #20]
 80002e2:	481c      	ldr	r0, [pc, #112]	@ (8000354 <print_registers+0x98>)
 80002e4:	f000 fa3e 	bl	8000764 <iprintf>
    printf("PSP (Process Stack Pointer): 0x%08lX\n", psp_value);
 80002e8:	6939      	ldr	r1, [r7, #16]
 80002ea:	481b      	ldr	r0, [pc, #108]	@ (8000358 <print_registers+0x9c>)
 80002ec:	f000 fa3a 	bl	8000764 <iprintf>
    printf("LR (Link Register): 0x%08lX\n", lr_value);
 80002f0:	68f9      	ldr	r1, [r7, #12]
 80002f2:	481a      	ldr	r0, [pc, #104]	@ (800035c <print_registers+0xa0>)
 80002f4:	f000 fa36 	bl	8000764 <iprintf>
    printf("PC (Program Counter): 0x%08lX\n", pc_value);
 80002f8:	68b9      	ldr	r1, [r7, #8]
 80002fa:	4819      	ldr	r0, [pc, #100]	@ (8000360 <print_registers+0xa4>)
 80002fc:	f000 fa32 	bl	8000764 <iprintf>
    printf("xPSR: 0x%08lX\n", xpsr_value);
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	4818      	ldr	r0, [pc, #96]	@ (8000364 <print_registers+0xa8>)
 8000304:	f000 fa2e 	bl	8000764 <iprintf>

    // Decoding xPSR
    printf("xPSR Decoded:\n");
 8000308:	4817      	ldr	r0, [pc, #92]	@ (8000368 <print_registers+0xac>)
 800030a:	f000 fa93 	bl	8000834 <puts>
    printf("  N=%ld, Z=%ld, C=%ld, V=%ld, Q=%ld\n",
           (xpsr_value >> 31) & 1,    // N flag
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	0fd9      	lsrs	r1, r3, #31
           (xpsr_value >> 30) & 1,    // Z flag
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	0f9b      	lsrs	r3, r3, #30
    printf("  N=%ld, Z=%ld, C=%ld, V=%ld, Q=%ld\n",
 8000316:	f003 0001 	and.w	r0, r3, #1
           (xpsr_value >> 29) & 1,    // C flag
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	0f5b      	lsrs	r3, r3, #29
    printf("  N=%ld, Z=%ld, C=%ld, V=%ld, Q=%ld\n",
 800031e:	f003 0401 	and.w	r4, r3, #1
           (xpsr_value >> 28) & 1,    // V flag
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	0f1b      	lsrs	r3, r3, #28
    printf("  N=%ld, Z=%ld, C=%ld, V=%ld, Q=%ld\n",
 8000326:	f003 0301 	and.w	r3, r3, #1
           (xpsr_value >> 27) & 1);   // Q flag
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	0ed2      	lsrs	r2, r2, #27
    printf("  N=%ld, Z=%ld, C=%ld, V=%ld, Q=%ld\n",
 800032e:	f002 0201 	and.w	r2, r2, #1
 8000332:	9201      	str	r2, [sp, #4]
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	4623      	mov	r3, r4
 8000338:	4602      	mov	r2, r0
 800033a:	480c      	ldr	r0, [pc, #48]	@ (800036c <print_registers+0xb0>)
 800033c:	f000 fa12 	bl	8000764 <iprintf>

    printf("  ISR Number: %lu\n", xpsr_value & 0xFF); // Exception number
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4619      	mov	r1, r3
 8000346:	480a      	ldr	r0, [pc, #40]	@ (8000370 <print_registers+0xb4>)
 8000348:	f000 fa0c 	bl	8000764 <iprintf>
}
 800034c:	bf00      	nop
 800034e:	371c      	adds	r7, #28
 8000350:	46bd      	mov	sp, r7
 8000352:	bd90      	pop	{r4, r7, pc}
 8000354:	08001528 	.word	0x08001528
 8000358:	0800154c 	.word	0x0800154c
 800035c:	08001574 	.word	0x08001574
 8000360:	08001594 	.word	0x08001594
 8000364:	080015b4 	.word	0x080015b4
 8000368:	080015c4 	.word	0x080015c4
 800036c:	080015d4 	.word	0x080015d4
 8000370:	080015fc 	.word	0x080015fc

08000374 <SVC_Handler>:

// SVC Handler for demonstrating EXC_RETURN values
void SVC_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
    uint32_t exc_return;

    // Read LR which contains EXC_RETURN value
    __asm volatile ("MOV %0, LR" : "=r" (exc_return));
 800037a:	4673      	mov	r3, lr
 800037c:	607b      	str	r3, [r7, #4]

    printf("\nInside SVC Handler:\n");
 800037e:	4819      	ldr	r0, [pc, #100]	@ (80003e4 <SVC_Handler+0x70>)
 8000380:	f000 fa58 	bl	8000834 <puts>
    printf("EXC_RETURN value: 0x%08lX\n", exc_return);
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	4818      	ldr	r0, [pc, #96]	@ (80003e8 <SVC_Handler+0x74>)
 8000388:	f000 f9ec 	bl	8000764 <iprintf>

    // Decode EXC_RETURN value
    printf("EXC_RETURN decoded:\n");
 800038c:	4817      	ldr	r0, [pc, #92]	@ (80003ec <SVC_Handler+0x78>)
 800038e:	f000 fa51 	bl	8000834 <puts>

    if (exc_return & (1 << 2)) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	2b00      	cmp	r3, #0
 800039a:	d003      	beq.n	80003a4 <SVC_Handler+0x30>
        printf("  Return stack: PSP\n");
 800039c:	4814      	ldr	r0, [pc, #80]	@ (80003f0 <SVC_Handler+0x7c>)
 800039e:	f000 fa49 	bl	8000834 <puts>
 80003a2:	e002      	b.n	80003aa <SVC_Handler+0x36>
    } else {
        printf("  Return stack: MSP\n");
 80003a4:	4813      	ldr	r0, [pc, #76]	@ (80003f4 <SVC_Handler+0x80>)
 80003a6:	f000 fa45 	bl	8000834 <puts>
    }

    if (exc_return & (1 << 3)) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d003      	beq.n	80003bc <SVC_Handler+0x48>
        printf("  Return mode: Thread\n");
 80003b4:	4810      	ldr	r0, [pc, #64]	@ (80003f8 <SVC_Handler+0x84>)
 80003b6:	f000 fa3d 	bl	8000834 <puts>
 80003ba:	e002      	b.n	80003c2 <SVC_Handler+0x4e>
    } else {
        printf("  Return mode: Handler\n");
 80003bc:	480f      	ldr	r0, [pc, #60]	@ (80003fc <SVC_Handler+0x88>)
 80003be:	f000 fa39 	bl	8000834 <puts>
    }

    if (exc_return & (1 << 4)) {
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d003      	beq.n	80003d4 <SVC_Handler+0x60>
        printf("  Floating-point state: Not preserved\n");
 80003cc:	480c      	ldr	r0, [pc, #48]	@ (8000400 <SVC_Handler+0x8c>)
 80003ce:	f000 fa31 	bl	8000834 <puts>
    } else {
        printf("  Floating-point state: Preserved\n");
    }
}
 80003d2:	e002      	b.n	80003da <SVC_Handler+0x66>
        printf("  Floating-point state: Preserved\n");
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <SVC_Handler+0x90>)
 80003d6:	f000 fa2d 	bl	8000834 <puts>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	08001610 	.word	0x08001610
 80003e8:	08001628 	.word	0x08001628
 80003ec:	08001644 	.word	0x08001644
 80003f0:	08001658 	.word	0x08001658
 80003f4:	0800166c 	.word	0x0800166c
 80003f8:	08001680 	.word	0x08001680
 80003fc:	08001698 	.word	0x08001698
 8000400:	080016b0 	.word	0x080016b0
 8000404:	080016d8 	.word	0x080016d8

08000408 <switch_to_psp>:

// Function to switch to PSP for Thread mode
void switch_to_psp(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
    // Allocate space for Process Stack
    static uint32_t process_stack[128];
    uint32_t psp = (uint32_t)(&process_stack[128]); // Top of stack
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <switch_to_psp+0x30>)
 8000410:	607b      	str	r3, [r7, #4]

    // Set PSP
    __asm volatile ("MSR PSP, %0" :: "r" (psp));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f383 8809 	msr	PSP, r3

    // Switch to PSP in Thread mode
    __asm volatile (
 8000418:	f3ef 8014 	mrs	r0, CONTROL
 800041c:	f040 0002 	orr.w	r0, r0, #2
 8000420:	f380 8814 	msr	CONTROL, r0
 8000424:	f3bf 8f6f 	isb	sy
        "ORR r0, r0, #2 \n"    // Set SPSEL bit to use PSP
        "MSR CONTROL, r0 \n"
        "ISB \n"               // Instruction sync barrier
    );

    printf("\nSwitched to PSP in Thread mode\n");
 8000428:	4804      	ldr	r0, [pc, #16]	@ (800043c <switch_to_psp+0x34>)
 800042a:	f000 fa03 	bl	8000834 <puts>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000278 	.word	0x20000278
 800043c:	080016fc 	.word	0x080016fc

08000440 <main>:

int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	// Initialize your hardware, UART, etc.

	printf("Register values in Thread mode using MSP:\n");
 8000444:	480b      	ldr	r0, [pc, #44]	@ (8000474 <main+0x34>)
 8000446:	f000 f9f5 	bl	8000834 <puts>
	print_registers();
 800044a:	f7ff ff37 	bl	80002bc <print_registers>

	// Switch to PSP
	switch_to_psp();
 800044e:	f7ff ffdb 	bl	8000408 <switch_to_psp>

	printf("\nRegister values in Thread mode using PSP:\n");
 8000452:	4809      	ldr	r0, [pc, #36]	@ (8000478 <main+0x38>)
 8000454:	f000 f9ee 	bl	8000834 <puts>
	print_registers();
 8000458:	f7ff ff30 	bl	80002bc <print_registers>

	// Trigger SVC to see EXC_RETURN values
	printf("\nTriggering SVC exception...\n");
 800045c:	4807      	ldr	r0, [pc, #28]	@ (800047c <main+0x3c>)
 800045e:	f000 f9e9 	bl	8000834 <puts>
	trigger_svc();
 8000462:	f7ff ff27 	bl	80002b4 <trigger_svc>

	printf("\nBack to Thread mode\n");
 8000466:	4806      	ldr	r0, [pc, #24]	@ (8000480 <main+0x40>)
 8000468:	f000 f9e4 	bl	8000834 <puts>
	print_registers();
 800046c:	f7ff ff26 	bl	80002bc <print_registers>

	/* Loop forever */
	for (;;);
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <main+0x30>
 8000474:	0800171c 	.word	0x0800171c
 8000478:	08001748 	.word	0x08001748
 800047c:	08001774 	.word	0x08001774
 8000480:	08001794 	.word	0x08001794

08000484 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e00a      	b.n	80004ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000496:	f3af 8000 	nop.w
 800049a:	4601      	mov	r1, r0
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	b2ca      	uxtb	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	3301      	adds	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbf0      	blt.n	8000496 <_read+0x12>
  }

  return len;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <_close>:
  }
  return len;
}

int _close(int file)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004e4:	605a      	str	r2, [r3, #4]
  return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <_isatty>:

int _isatty(int file)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004fa:	2301      	movs	r3, #1
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f000 fa9e 	bl	8000a90 <__errno>
 8000554:	4603      	mov	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a05      	ldr	r2, [pc, #20]	@ (8000584 <_sbrk+0x64>)
 8000570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20030000 	.word	0x20030000
 8000580:	00000400 	.word	0x00000400
 8000584:	20000278 	.word	0x20000278
 8000588:	200003c8 	.word	0x200003c8

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	@ (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	@ (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ba:	f000 fa6f 	bl	8000a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff ff3f 	bl	8000440 <main>

080005c2 <LoopForever>:

LoopForever:
  b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005d0:	080017e4 	.word	0x080017e4
  ldr r2, =_sbss
 80005d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d8:	200003c8 	.word	0x200003c8

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <std>:
 80005e0:	2300      	movs	r3, #0
 80005e2:	b510      	push	{r4, lr}
 80005e4:	4604      	mov	r4, r0
 80005e6:	6083      	str	r3, [r0, #8]
 80005e8:	8181      	strh	r1, [r0, #12]
 80005ea:	4619      	mov	r1, r3
 80005ec:	6643      	str	r3, [r0, #100]	@ 0x64
 80005ee:	81c2      	strh	r2, [r0, #14]
 80005f0:	2208      	movs	r2, #8
 80005f2:	6183      	str	r3, [r0, #24]
 80005f4:	e9c0 3300 	strd	r3, r3, [r0]
 80005f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005fc:	305c      	adds	r0, #92	@ 0x5c
 80005fe:	f000 f9f9 	bl	80009f4 <memset>
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x58>)
 8000604:	6224      	str	r4, [r4, #32]
 8000606:	6263      	str	r3, [r4, #36]	@ 0x24
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <std+0x5c>)
 800060a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <std+0x60>)
 800060e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <std+0x64>)
 8000612:	6323      	str	r3, [r4, #48]	@ 0x30
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <std+0x68>)
 8000616:	429c      	cmp	r4, r3
 8000618:	d006      	beq.n	8000628 <std+0x48>
 800061a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800061e:	4294      	cmp	r4, r2
 8000620:	d002      	beq.n	8000628 <std+0x48>
 8000622:	33d0      	adds	r3, #208	@ 0xd0
 8000624:	429c      	cmp	r4, r3
 8000626:	d105      	bne.n	8000634 <std+0x54>
 8000628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000630:	f000 ba58 	b.w	8000ae4 <__retarget_lock_init_recursive>
 8000634:	bd10      	pop	{r4, pc}
 8000636:	bf00      	nop
 8000638:	08000845 	.word	0x08000845
 800063c:	08000867 	.word	0x08000867
 8000640:	0800089f 	.word	0x0800089f
 8000644:	080008c3 	.word	0x080008c3
 8000648:	2000027c 	.word	0x2000027c

0800064c <stdio_exit_handler>:
 800064c:	4a02      	ldr	r2, [pc, #8]	@ (8000658 <stdio_exit_handler+0xc>)
 800064e:	4903      	ldr	r1, [pc, #12]	@ (800065c <stdio_exit_handler+0x10>)
 8000650:	4803      	ldr	r0, [pc, #12]	@ (8000660 <stdio_exit_handler+0x14>)
 8000652:	f000 b869 	b.w	8000728 <_fwalk_sglue>
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	0800137d 	.word	0x0800137d
 8000660:	20000010 	.word	0x20000010

08000664 <cleanup_stdio>:
 8000664:	6841      	ldr	r1, [r0, #4]
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <cleanup_stdio+0x34>)
 8000668:	4299      	cmp	r1, r3
 800066a:	b510      	push	{r4, lr}
 800066c:	4604      	mov	r4, r0
 800066e:	d001      	beq.n	8000674 <cleanup_stdio+0x10>
 8000670:	f000 fe84 	bl	800137c <_fflush_r>
 8000674:	68a1      	ldr	r1, [r4, #8]
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <cleanup_stdio+0x38>)
 8000678:	4299      	cmp	r1, r3
 800067a:	d002      	beq.n	8000682 <cleanup_stdio+0x1e>
 800067c:	4620      	mov	r0, r4
 800067e:	f000 fe7d 	bl	800137c <_fflush_r>
 8000682:	68e1      	ldr	r1, [r4, #12]
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <cleanup_stdio+0x3c>)
 8000686:	4299      	cmp	r1, r3
 8000688:	d004      	beq.n	8000694 <cleanup_stdio+0x30>
 800068a:	4620      	mov	r0, r4
 800068c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000690:	f000 be74 	b.w	800137c <_fflush_r>
 8000694:	bd10      	pop	{r4, pc}
 8000696:	bf00      	nop
 8000698:	2000027c 	.word	0x2000027c
 800069c:	200002e4 	.word	0x200002e4
 80006a0:	2000034c 	.word	0x2000034c

080006a4 <global_stdio_init.part.0>:
 80006a4:	b510      	push	{r4, lr}
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <global_stdio_init.part.0+0x30>)
 80006a8:	2104      	movs	r1, #4
 80006aa:	4c0b      	ldr	r4, [pc, #44]	@ (80006d8 <global_stdio_init.part.0+0x34>)
 80006ac:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <global_stdio_init.part.0+0x38>)
 80006ae:	4620      	mov	r0, r4
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	2200      	movs	r2, #0
 80006b4:	f7ff ff94 	bl	80005e0 <std>
 80006b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006bc:	2201      	movs	r2, #1
 80006be:	2109      	movs	r1, #9
 80006c0:	f7ff ff8e 	bl	80005e0 <std>
 80006c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006c8:	2202      	movs	r2, #2
 80006ca:	2112      	movs	r1, #18
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f7ff bf86 	b.w	80005e0 <std>
 80006d4:	200003b4 	.word	0x200003b4
 80006d8:	2000027c 	.word	0x2000027c
 80006dc:	0800064d 	.word	0x0800064d

080006e0 <__sfp_lock_acquire>:
 80006e0:	4801      	ldr	r0, [pc, #4]	@ (80006e8 <__sfp_lock_acquire+0x8>)
 80006e2:	f000 ba00 	b.w	8000ae6 <__retarget_lock_acquire_recursive>
 80006e6:	bf00      	nop
 80006e8:	200003bd 	.word	0x200003bd

080006ec <__sfp_lock_release>:
 80006ec:	4801      	ldr	r0, [pc, #4]	@ (80006f4 <__sfp_lock_release+0x8>)
 80006ee:	f000 b9fb 	b.w	8000ae8 <__retarget_lock_release_recursive>
 80006f2:	bf00      	nop
 80006f4:	200003bd 	.word	0x200003bd

080006f8 <__sinit>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	f7ff fff0 	bl	80006e0 <__sfp_lock_acquire>
 8000700:	6a23      	ldr	r3, [r4, #32]
 8000702:	b11b      	cbz	r3, 800070c <__sinit+0x14>
 8000704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000708:	f7ff bff0 	b.w	80006ec <__sfp_lock_release>
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <__sinit+0x28>)
 800070e:	6223      	str	r3, [r4, #32]
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <__sinit+0x2c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f5      	bne.n	8000704 <__sinit+0xc>
 8000718:	f7ff ffc4 	bl	80006a4 <global_stdio_init.part.0>
 800071c:	e7f2      	b.n	8000704 <__sinit+0xc>
 800071e:	bf00      	nop
 8000720:	08000665 	.word	0x08000665
 8000724:	200003b4 	.word	0x200003b4

08000728 <_fwalk_sglue>:
 8000728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800072c:	4607      	mov	r7, r0
 800072e:	4688      	mov	r8, r1
 8000730:	4614      	mov	r4, r2
 8000732:	2600      	movs	r6, #0
 8000734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000738:	f1b9 0901 	subs.w	r9, r9, #1
 800073c:	d505      	bpl.n	800074a <_fwalk_sglue+0x22>
 800073e:	6824      	ldr	r4, [r4, #0]
 8000740:	2c00      	cmp	r4, #0
 8000742:	d1f7      	bne.n	8000734 <_fwalk_sglue+0xc>
 8000744:	4630      	mov	r0, r6
 8000746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800074a:	89ab      	ldrh	r3, [r5, #12]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d907      	bls.n	8000760 <_fwalk_sglue+0x38>
 8000750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000754:	3301      	adds	r3, #1
 8000756:	d003      	beq.n	8000760 <_fwalk_sglue+0x38>
 8000758:	4629      	mov	r1, r5
 800075a:	4638      	mov	r0, r7
 800075c:	47c0      	blx	r8
 800075e:	4306      	orrs	r6, r0
 8000760:	3568      	adds	r5, #104	@ 0x68
 8000762:	e7e9      	b.n	8000738 <_fwalk_sglue+0x10>

08000764 <iprintf>:
 8000764:	b40f      	push	{r0, r1, r2, r3}
 8000766:	b507      	push	{r0, r1, r2, lr}
 8000768:	4906      	ldr	r1, [pc, #24]	@ (8000784 <iprintf+0x20>)
 800076a:	ab04      	add	r3, sp, #16
 800076c:	6808      	ldr	r0, [r1, #0]
 800076e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000772:	6881      	ldr	r1, [r0, #8]
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	f000 fad9 	bl	8000d2c <_vfiprintf_r>
 800077a:	b003      	add	sp, #12
 800077c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000780:	b004      	add	sp, #16
 8000782:	4770      	bx	lr
 8000784:	2000000c 	.word	0x2000000c

08000788 <_puts_r>:
 8000788:	6a03      	ldr	r3, [r0, #32]
 800078a:	b570      	push	{r4, r5, r6, lr}
 800078c:	4605      	mov	r5, r0
 800078e:	460e      	mov	r6, r1
 8000790:	6884      	ldr	r4, [r0, #8]
 8000792:	b90b      	cbnz	r3, 8000798 <_puts_r+0x10>
 8000794:	f7ff ffb0 	bl	80006f8 <__sinit>
 8000798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800079a:	07db      	lsls	r3, r3, #31
 800079c:	d405      	bmi.n	80007aa <_puts_r+0x22>
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	0598      	lsls	r0, r3, #22
 80007a2:	d402      	bmi.n	80007aa <_puts_r+0x22>
 80007a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007a6:	f000 f99e 	bl	8000ae6 <__retarget_lock_acquire_recursive>
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	0719      	lsls	r1, r3, #28
 80007ae:	d502      	bpl.n	80007b6 <_puts_r+0x2e>
 80007b0:	6923      	ldr	r3, [r4, #16]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d135      	bne.n	8000822 <_puts_r+0x9a>
 80007b6:	4621      	mov	r1, r4
 80007b8:	4628      	mov	r0, r5
 80007ba:	f000 f8c5 	bl	8000948 <__swsetup_r>
 80007be:	b380      	cbz	r0, 8000822 <_puts_r+0x9a>
 80007c0:	f04f 35ff 	mov.w	r5, #4294967295
 80007c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007c6:	07da      	lsls	r2, r3, #31
 80007c8:	d405      	bmi.n	80007d6 <_puts_r+0x4e>
 80007ca:	89a3      	ldrh	r3, [r4, #12]
 80007cc:	059b      	lsls	r3, r3, #22
 80007ce:	d402      	bmi.n	80007d6 <_puts_r+0x4e>
 80007d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007d2:	f000 f989 	bl	8000ae8 <__retarget_lock_release_recursive>
 80007d6:	4628      	mov	r0, r5
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da04      	bge.n	80007e8 <_puts_r+0x60>
 80007de:	69a2      	ldr	r2, [r4, #24]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dc17      	bgt.n	8000814 <_puts_r+0x8c>
 80007e4:	290a      	cmp	r1, #10
 80007e6:	d015      	beq.n	8000814 <_puts_r+0x8c>
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	6022      	str	r2, [r4, #0]
 80007ee:	7019      	strb	r1, [r3, #0]
 80007f0:	68a3      	ldr	r3, [r4, #8]
 80007f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007f6:	3b01      	subs	r3, #1
 80007f8:	60a3      	str	r3, [r4, #8]
 80007fa:	2900      	cmp	r1, #0
 80007fc:	d1ed      	bne.n	80007da <_puts_r+0x52>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da11      	bge.n	8000826 <_puts_r+0x9e>
 8000802:	4622      	mov	r2, r4
 8000804:	210a      	movs	r1, #10
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f85f 	bl	80008ca <__swbuf_r>
 800080c:	3001      	adds	r0, #1
 800080e:	d0d7      	beq.n	80007c0 <_puts_r+0x38>
 8000810:	250a      	movs	r5, #10
 8000812:	e7d7      	b.n	80007c4 <_puts_r+0x3c>
 8000814:	4622      	mov	r2, r4
 8000816:	4628      	mov	r0, r5
 8000818:	f000 f857 	bl	80008ca <__swbuf_r>
 800081c:	3001      	adds	r0, #1
 800081e:	d1e7      	bne.n	80007f0 <_puts_r+0x68>
 8000820:	e7ce      	b.n	80007c0 <_puts_r+0x38>
 8000822:	3e01      	subs	r6, #1
 8000824:	e7e4      	b.n	80007f0 <_puts_r+0x68>
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	1c5a      	adds	r2, r3, #1
 800082a:	6022      	str	r2, [r4, #0]
 800082c:	220a      	movs	r2, #10
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e7ee      	b.n	8000810 <_puts_r+0x88>
	...

08000834 <puts>:
 8000834:	4b02      	ldr	r3, [pc, #8]	@ (8000840 <puts+0xc>)
 8000836:	4601      	mov	r1, r0
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	f7ff bfa5 	b.w	8000788 <_puts_r>
 800083e:	bf00      	nop
 8000840:	2000000c 	.word	0x2000000c

08000844 <__sread>:
 8000844:	b510      	push	{r4, lr}
 8000846:	460c      	mov	r4, r1
 8000848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800084c:	f000 f8fc 	bl	8000a48 <_read_r>
 8000850:	2800      	cmp	r0, #0
 8000852:	bfab      	itete	ge
 8000854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000856:	89a3      	ldrhlt	r3, [r4, #12]
 8000858:	181b      	addge	r3, r3, r0
 800085a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800085e:	bfac      	ite	ge
 8000860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000862:	81a3      	strhlt	r3, [r4, #12]
 8000864:	bd10      	pop	{r4, pc}

08000866 <__swrite>:
 8000866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086a:	461f      	mov	r7, r3
 800086c:	898b      	ldrh	r3, [r1, #12]
 800086e:	4605      	mov	r5, r0
 8000870:	460c      	mov	r4, r1
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	4616      	mov	r6, r2
 8000876:	d505      	bpl.n	8000884 <__swrite+0x1e>
 8000878:	2302      	movs	r3, #2
 800087a:	2200      	movs	r2, #0
 800087c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000880:	f000 f8d0 	bl	8000a24 <_lseek_r>
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	4632      	mov	r2, r6
 8000888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800088c:	4628      	mov	r0, r5
 800088e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000892:	81a3      	strh	r3, [r4, #12]
 8000894:	463b      	mov	r3, r7
 8000896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800089a:	f000 b8e7 	b.w	8000a6c <_write_r>

0800089e <__sseek>:
 800089e:	b510      	push	{r4, lr}
 80008a0:	460c      	mov	r4, r1
 80008a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a6:	f000 f8bd 	bl	8000a24 <_lseek_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	bf15      	itete	ne
 80008b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ba:	81a3      	strheq	r3, [r4, #12]
 80008bc:	bf18      	it	ne
 80008be:	81a3      	strhne	r3, [r4, #12]
 80008c0:	bd10      	pop	{r4, pc}

080008c2 <__sclose>:
 80008c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c6:	f000 b89d 	b.w	8000a04 <_close_r>

080008ca <__swbuf_r>:
 80008ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008cc:	460e      	mov	r6, r1
 80008ce:	4614      	mov	r4, r2
 80008d0:	4605      	mov	r5, r0
 80008d2:	b118      	cbz	r0, 80008dc <__swbuf_r+0x12>
 80008d4:	6a03      	ldr	r3, [r0, #32]
 80008d6:	b90b      	cbnz	r3, 80008dc <__swbuf_r+0x12>
 80008d8:	f7ff ff0e 	bl	80006f8 <__sinit>
 80008dc:	69a3      	ldr	r3, [r4, #24]
 80008de:	60a3      	str	r3, [r4, #8]
 80008e0:	89a3      	ldrh	r3, [r4, #12]
 80008e2:	071a      	lsls	r2, r3, #28
 80008e4:	d501      	bpl.n	80008ea <__swbuf_r+0x20>
 80008e6:	6923      	ldr	r3, [r4, #16]
 80008e8:	b943      	cbnz	r3, 80008fc <__swbuf_r+0x32>
 80008ea:	4621      	mov	r1, r4
 80008ec:	4628      	mov	r0, r5
 80008ee:	f000 f82b 	bl	8000948 <__swsetup_r>
 80008f2:	b118      	cbz	r0, 80008fc <__swbuf_r+0x32>
 80008f4:	f04f 37ff 	mov.w	r7, #4294967295
 80008f8:	4638      	mov	r0, r7
 80008fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	b2f6      	uxtb	r6, r6
 8000900:	6922      	ldr	r2, [r4, #16]
 8000902:	4637      	mov	r7, r6
 8000904:	1a98      	subs	r0, r3, r2
 8000906:	6963      	ldr	r3, [r4, #20]
 8000908:	4283      	cmp	r3, r0
 800090a:	dc05      	bgt.n	8000918 <__swbuf_r+0x4e>
 800090c:	4621      	mov	r1, r4
 800090e:	4628      	mov	r0, r5
 8000910:	f000 fd34 	bl	800137c <_fflush_r>
 8000914:	2800      	cmp	r0, #0
 8000916:	d1ed      	bne.n	80008f4 <__swbuf_r+0x2a>
 8000918:	68a3      	ldr	r3, [r4, #8]
 800091a:	3b01      	subs	r3, #1
 800091c:	60a3      	str	r3, [r4, #8]
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	6022      	str	r2, [r4, #0]
 8000924:	701e      	strb	r6, [r3, #0]
 8000926:	1c43      	adds	r3, r0, #1
 8000928:	6962      	ldr	r2, [r4, #20]
 800092a:	429a      	cmp	r2, r3
 800092c:	d004      	beq.n	8000938 <__swbuf_r+0x6e>
 800092e:	89a3      	ldrh	r3, [r4, #12]
 8000930:	07db      	lsls	r3, r3, #31
 8000932:	d5e1      	bpl.n	80008f8 <__swbuf_r+0x2e>
 8000934:	2e0a      	cmp	r6, #10
 8000936:	d1df      	bne.n	80008f8 <__swbuf_r+0x2e>
 8000938:	4621      	mov	r1, r4
 800093a:	4628      	mov	r0, r5
 800093c:	f000 fd1e 	bl	800137c <_fflush_r>
 8000940:	2800      	cmp	r0, #0
 8000942:	d0d9      	beq.n	80008f8 <__swbuf_r+0x2e>
 8000944:	e7d6      	b.n	80008f4 <__swbuf_r+0x2a>
	...

08000948 <__swsetup_r>:
 8000948:	b538      	push	{r3, r4, r5, lr}
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <__swsetup_r+0xa8>)
 800094c:	4605      	mov	r5, r0
 800094e:	460c      	mov	r4, r1
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	b118      	cbz	r0, 800095c <__swsetup_r+0x14>
 8000954:	6a03      	ldr	r3, [r0, #32]
 8000956:	b90b      	cbnz	r3, 800095c <__swsetup_r+0x14>
 8000958:	f7ff fece 	bl	80006f8 <__sinit>
 800095c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000960:	0719      	lsls	r1, r3, #28
 8000962:	d422      	bmi.n	80009aa <__swsetup_r+0x62>
 8000964:	06da      	lsls	r2, r3, #27
 8000966:	d407      	bmi.n	8000978 <__swsetup_r+0x30>
 8000968:	2209      	movs	r2, #9
 800096a:	602a      	str	r2, [r5, #0]
 800096c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	81a3      	strh	r3, [r4, #12]
 8000976:	e033      	b.n	80009e0 <__swsetup_r+0x98>
 8000978:	0758      	lsls	r0, r3, #29
 800097a:	d512      	bpl.n	80009a2 <__swsetup_r+0x5a>
 800097c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800097e:	b141      	cbz	r1, 8000992 <__swsetup_r+0x4a>
 8000980:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000984:	4299      	cmp	r1, r3
 8000986:	d002      	beq.n	800098e <__swsetup_r+0x46>
 8000988:	4628      	mov	r0, r5
 800098a:	f000 f8af 	bl	8000aec <_free_r>
 800098e:	2300      	movs	r3, #0
 8000990:	6363      	str	r3, [r4, #52]	@ 0x34
 8000992:	89a3      	ldrh	r3, [r4, #12]
 8000994:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000998:	81a3      	strh	r3, [r4, #12]
 800099a:	2300      	movs	r3, #0
 800099c:	6063      	str	r3, [r4, #4]
 800099e:	6923      	ldr	r3, [r4, #16]
 80009a0:	6023      	str	r3, [r4, #0]
 80009a2:	89a3      	ldrh	r3, [r4, #12]
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	81a3      	strh	r3, [r4, #12]
 80009aa:	6923      	ldr	r3, [r4, #16]
 80009ac:	b94b      	cbnz	r3, 80009c2 <__swsetup_r+0x7a>
 80009ae:	89a3      	ldrh	r3, [r4, #12]
 80009b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009b8:	d003      	beq.n	80009c2 <__swsetup_r+0x7a>
 80009ba:	4621      	mov	r1, r4
 80009bc:	4628      	mov	r0, r5
 80009be:	f000 fd2a 	bl	8001416 <__smakebuf_r>
 80009c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009c6:	f013 0201 	ands.w	r2, r3, #1
 80009ca:	d00a      	beq.n	80009e2 <__swsetup_r+0x9a>
 80009cc:	2200      	movs	r2, #0
 80009ce:	60a2      	str	r2, [r4, #8]
 80009d0:	6962      	ldr	r2, [r4, #20]
 80009d2:	4252      	negs	r2, r2
 80009d4:	61a2      	str	r2, [r4, #24]
 80009d6:	6922      	ldr	r2, [r4, #16]
 80009d8:	b942      	cbnz	r2, 80009ec <__swsetup_r+0xa4>
 80009da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80009de:	d1c5      	bne.n	800096c <__swsetup_r+0x24>
 80009e0:	bd38      	pop	{r3, r4, r5, pc}
 80009e2:	0799      	lsls	r1, r3, #30
 80009e4:	bf58      	it	pl
 80009e6:	6962      	ldrpl	r2, [r4, #20]
 80009e8:	60a2      	str	r2, [r4, #8]
 80009ea:	e7f4      	b.n	80009d6 <__swsetup_r+0x8e>
 80009ec:	2000      	movs	r0, #0
 80009ee:	e7f7      	b.n	80009e0 <__swsetup_r+0x98>
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <memset>:
 80009f4:	4402      	add	r2, r0
 80009f6:	4603      	mov	r3, r0
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d100      	bne.n	80009fe <memset+0xa>
 80009fc:	4770      	bx	lr
 80009fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000a02:	e7f9      	b.n	80009f8 <memset+0x4>

08000a04 <_close_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	2300      	movs	r3, #0
 8000a08:	4d05      	ldr	r5, [pc, #20]	@ (8000a20 <_close_r+0x1c>)
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	602b      	str	r3, [r5, #0]
 8000a10:	f7ff fd55 	bl	80004be <_close>
 8000a14:	1c43      	adds	r3, r0, #1
 8000a16:	d102      	bne.n	8000a1e <_close_r+0x1a>
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	b103      	cbz	r3, 8000a1e <_close_r+0x1a>
 8000a1c:	6023      	str	r3, [r4, #0]
 8000a1e:	bd38      	pop	{r3, r4, r5, pc}
 8000a20:	200003b8 	.word	0x200003b8

08000a24 <_lseek_r>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4604      	mov	r4, r0
 8000a28:	4d06      	ldr	r5, [pc, #24]	@ (8000a44 <_lseek_r+0x20>)
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	602a      	str	r2, [r5, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	f7ff fd67 	bl	8000506 <_lseek>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d102      	bne.n	8000a42 <_lseek_r+0x1e>
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	b103      	cbz	r3, 8000a42 <_lseek_r+0x1e>
 8000a40:	6023      	str	r3, [r4, #0]
 8000a42:	bd38      	pop	{r3, r4, r5, pc}
 8000a44:	200003b8 	.word	0x200003b8

08000a48 <_read_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4d06      	ldr	r5, [pc, #24]	@ (8000a68 <_read_r+0x20>)
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4611      	mov	r1, r2
 8000a52:	2200      	movs	r2, #0
 8000a54:	602a      	str	r2, [r5, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	f7ff fd14 	bl	8000484 <_read>
 8000a5c:	1c43      	adds	r3, r0, #1
 8000a5e:	d102      	bne.n	8000a66 <_read_r+0x1e>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	b103      	cbz	r3, 8000a66 <_read_r+0x1e>
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	200003b8 	.word	0x200003b8

08000a6c <_write_r>:
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4d06      	ldr	r5, [pc, #24]	@ (8000a8c <_write_r+0x20>)
 8000a72:	4608      	mov	r0, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	602a      	str	r2, [r5, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f7ff fbfe 	bl	800027c <_write>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d102      	bne.n	8000a8a <_write_r+0x1e>
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	b103      	cbz	r3, 8000a8a <_write_r+0x1e>
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	200003b8 	.word	0x200003b8

08000a90 <__errno>:
 8000a90:	4b01      	ldr	r3, [pc, #4]	@ (8000a98 <__errno+0x8>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	2000000c 	.word	0x2000000c

08000a9c <__libc_init_array>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ad4 <__libc_init_array+0x38>)
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad8 <__libc_init_array+0x3c>)
 8000aa4:	1b64      	subs	r4, r4, r5
 8000aa6:	10a4      	asrs	r4, r4, #2
 8000aa8:	42a6      	cmp	r6, r4
 8000aaa:	d109      	bne.n	8000ac0 <__libc_init_array+0x24>
 8000aac:	4d0b      	ldr	r5, [pc, #44]	@ (8000adc <__libc_init_array+0x40>)
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8000ae0 <__libc_init_array+0x44>)
 8000ab2:	f000 fd2d 	bl	8001510 <_init>
 8000ab6:	1b64      	subs	r4, r4, r5
 8000ab8:	10a4      	asrs	r4, r4, #2
 8000aba:	42a6      	cmp	r6, r4
 8000abc:	d105      	bne.n	8000aca <__libc_init_array+0x2e>
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	4798      	blx	r3
 8000ac8:	e7ee      	b.n	8000aa8 <__libc_init_array+0xc>
 8000aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ace:	3601      	adds	r6, #1
 8000ad0:	4798      	blx	r3
 8000ad2:	e7f2      	b.n	8000aba <__libc_init_array+0x1e>
 8000ad4:	080017dc 	.word	0x080017dc
 8000ad8:	080017dc 	.word	0x080017dc
 8000adc:	080017dc 	.word	0x080017dc
 8000ae0:	080017e0 	.word	0x080017e0

08000ae4 <__retarget_lock_init_recursive>:
 8000ae4:	4770      	bx	lr

08000ae6 <__retarget_lock_acquire_recursive>:
 8000ae6:	4770      	bx	lr

08000ae8 <__retarget_lock_release_recursive>:
 8000ae8:	4770      	bx	lr
	...

08000aec <_free_r>:
 8000aec:	b538      	push	{r3, r4, r5, lr}
 8000aee:	4605      	mov	r5, r0
 8000af0:	2900      	cmp	r1, #0
 8000af2:	d041      	beq.n	8000b78 <_free_r+0x8c>
 8000af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000af8:	1f0c      	subs	r4, r1, #4
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bfb8      	it	lt
 8000afe:	18e4      	addlt	r4, r4, r3
 8000b00:	f000 f8e0 	bl	8000cc4 <__malloc_lock>
 8000b04:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <_free_r+0x90>)
 8000b06:	6813      	ldr	r3, [r2, #0]
 8000b08:	b933      	cbnz	r3, 8000b18 <_free_r+0x2c>
 8000b0a:	6063      	str	r3, [r4, #4]
 8000b0c:	6014      	str	r4, [r2, #0]
 8000b0e:	4628      	mov	r0, r5
 8000b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b14:	f000 b8dc 	b.w	8000cd0 <__malloc_unlock>
 8000b18:	42a3      	cmp	r3, r4
 8000b1a:	d908      	bls.n	8000b2e <_free_r+0x42>
 8000b1c:	6820      	ldr	r0, [r4, #0]
 8000b1e:	1821      	adds	r1, r4, r0
 8000b20:	428b      	cmp	r3, r1
 8000b22:	bf01      	itttt	eq
 8000b24:	6819      	ldreq	r1, [r3, #0]
 8000b26:	685b      	ldreq	r3, [r3, #4]
 8000b28:	1809      	addeq	r1, r1, r0
 8000b2a:	6021      	streq	r1, [r4, #0]
 8000b2c:	e7ed      	b.n	8000b0a <_free_r+0x1e>
 8000b2e:	461a      	mov	r2, r3
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	b10b      	cbz	r3, 8000b38 <_free_r+0x4c>
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d9fa      	bls.n	8000b2e <_free_r+0x42>
 8000b38:	6811      	ldr	r1, [r2, #0]
 8000b3a:	1850      	adds	r0, r2, r1
 8000b3c:	42a0      	cmp	r0, r4
 8000b3e:	d10b      	bne.n	8000b58 <_free_r+0x6c>
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	4401      	add	r1, r0
 8000b44:	1850      	adds	r0, r2, r1
 8000b46:	6011      	str	r1, [r2, #0]
 8000b48:	4283      	cmp	r3, r0
 8000b4a:	d1e0      	bne.n	8000b0e <_free_r+0x22>
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	4408      	add	r0, r1
 8000b52:	6053      	str	r3, [r2, #4]
 8000b54:	6010      	str	r0, [r2, #0]
 8000b56:	e7da      	b.n	8000b0e <_free_r+0x22>
 8000b58:	d902      	bls.n	8000b60 <_free_r+0x74>
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	602b      	str	r3, [r5, #0]
 8000b5e:	e7d6      	b.n	8000b0e <_free_r+0x22>
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	1821      	adds	r1, r4, r0
 8000b64:	428b      	cmp	r3, r1
 8000b66:	bf02      	ittt	eq
 8000b68:	6819      	ldreq	r1, [r3, #0]
 8000b6a:	685b      	ldreq	r3, [r3, #4]
 8000b6c:	1809      	addeq	r1, r1, r0
 8000b6e:	6063      	str	r3, [r4, #4]
 8000b70:	bf08      	it	eq
 8000b72:	6021      	streq	r1, [r4, #0]
 8000b74:	6054      	str	r4, [r2, #4]
 8000b76:	e7ca      	b.n	8000b0e <_free_r+0x22>
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200003c4 	.word	0x200003c4

08000b80 <sbrk_aligned>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	4e0f      	ldr	r6, [pc, #60]	@ (8000bc0 <sbrk_aligned+0x40>)
 8000b84:	460c      	mov	r4, r1
 8000b86:	4605      	mov	r5, r0
 8000b88:	6831      	ldr	r1, [r6, #0]
 8000b8a:	b911      	cbnz	r1, 8000b92 <sbrk_aligned+0x12>
 8000b8c:	f000 fca2 	bl	80014d4 <_sbrk_r>
 8000b90:	6030      	str	r0, [r6, #0]
 8000b92:	4621      	mov	r1, r4
 8000b94:	4628      	mov	r0, r5
 8000b96:	f000 fc9d 	bl	80014d4 <_sbrk_r>
 8000b9a:	1c43      	adds	r3, r0, #1
 8000b9c:	d103      	bne.n	8000ba6 <sbrk_aligned+0x26>
 8000b9e:	f04f 34ff 	mov.w	r4, #4294967295
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	1cc4      	adds	r4, r0, #3
 8000ba8:	f024 0403 	bic.w	r4, r4, #3
 8000bac:	42a0      	cmp	r0, r4
 8000bae:	d0f8      	beq.n	8000ba2 <sbrk_aligned+0x22>
 8000bb0:	1a21      	subs	r1, r4, r0
 8000bb2:	4628      	mov	r0, r5
 8000bb4:	f000 fc8e 	bl	80014d4 <_sbrk_r>
 8000bb8:	3001      	adds	r0, #1
 8000bba:	d1f2      	bne.n	8000ba2 <sbrk_aligned+0x22>
 8000bbc:	e7ef      	b.n	8000b9e <sbrk_aligned+0x1e>
 8000bbe:	bf00      	nop
 8000bc0:	200003c0 	.word	0x200003c0

08000bc4 <_malloc_r>:
 8000bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	1ccd      	adds	r5, r1, #3
 8000bca:	4606      	mov	r6, r0
 8000bcc:	f025 0503 	bic.w	r5, r5, #3
 8000bd0:	3508      	adds	r5, #8
 8000bd2:	2d0c      	cmp	r5, #12
 8000bd4:	bf38      	it	cc
 8000bd6:	250c      	movcc	r5, #12
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	db01      	blt.n	8000be0 <_malloc_r+0x1c>
 8000bdc:	42a9      	cmp	r1, r5
 8000bde:	d904      	bls.n	8000bea <_malloc_r+0x26>
 8000be0:	230c      	movs	r3, #12
 8000be2:	6033      	str	r3, [r6, #0]
 8000be4:	2000      	movs	r0, #0
 8000be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cc0 <_malloc_r+0xfc>
 8000bee:	f000 f869 	bl	8000cc4 <__malloc_lock>
 8000bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	bb44      	cbnz	r4, 8000c4c <_malloc_r+0x88>
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f7ff ffbf 	bl	8000b80 <sbrk_aligned>
 8000c02:	1c43      	adds	r3, r0, #1
 8000c04:	4604      	mov	r4, r0
 8000c06:	d158      	bne.n	8000cba <_malloc_r+0xf6>
 8000c08:	f8d8 4000 	ldr.w	r4, [r8]
 8000c0c:	4627      	mov	r7, r4
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d143      	bne.n	8000c9a <_malloc_r+0xd6>
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d04b      	beq.n	8000cae <_malloc_r+0xea>
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	4639      	mov	r1, r7
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	eb04 0903 	add.w	r9, r4, r3
 8000c20:	f000 fc58 	bl	80014d4 <_sbrk_r>
 8000c24:	4581      	cmp	r9, r0
 8000c26:	d142      	bne.n	8000cae <_malloc_r+0xea>
 8000c28:	6821      	ldr	r1, [r4, #0]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	1a6d      	subs	r5, r5, r1
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f7ff ffa6 	bl	8000b80 <sbrk_aligned>
 8000c34:	3001      	adds	r0, #1
 8000c36:	d03a      	beq.n	8000cae <_malloc_r+0xea>
 8000c38:	6823      	ldr	r3, [r4, #0]
 8000c3a:	442b      	add	r3, r5
 8000c3c:	6023      	str	r3, [r4, #0]
 8000c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	bb62      	cbnz	r2, 8000ca0 <_malloc_r+0xdc>
 8000c46:	f8c8 7000 	str.w	r7, [r8]
 8000c4a:	e00f      	b.n	8000c6c <_malloc_r+0xa8>
 8000c4c:	6822      	ldr	r2, [r4, #0]
 8000c4e:	1b52      	subs	r2, r2, r5
 8000c50:	d420      	bmi.n	8000c94 <_malloc_r+0xd0>
 8000c52:	2a0b      	cmp	r2, #11
 8000c54:	d917      	bls.n	8000c86 <_malloc_r+0xc2>
 8000c56:	1961      	adds	r1, r4, r5
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	6025      	str	r5, [r4, #0]
 8000c5c:	bf18      	it	ne
 8000c5e:	6059      	strne	r1, [r3, #4]
 8000c60:	6863      	ldr	r3, [r4, #4]
 8000c62:	bf08      	it	eq
 8000c64:	f8c8 1000 	streq.w	r1, [r8]
 8000c68:	5162      	str	r2, [r4, r5]
 8000c6a:	604b      	str	r3, [r1, #4]
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	f000 f82f 	bl	8000cd0 <__malloc_unlock>
 8000c72:	f104 000b 	add.w	r0, r4, #11
 8000c76:	1d23      	adds	r3, r4, #4
 8000c78:	f020 0007 	bic.w	r0, r0, #7
 8000c7c:	1ac2      	subs	r2, r0, r3
 8000c7e:	bf1c      	itt	ne
 8000c80:	1a1b      	subne	r3, r3, r0
 8000c82:	50a3      	strne	r3, [r4, r2]
 8000c84:	e7af      	b.n	8000be6 <_malloc_r+0x22>
 8000c86:	6862      	ldr	r2, [r4, #4]
 8000c88:	42a3      	cmp	r3, r4
 8000c8a:	bf0c      	ite	eq
 8000c8c:	f8c8 2000 	streq.w	r2, [r8]
 8000c90:	605a      	strne	r2, [r3, #4]
 8000c92:	e7eb      	b.n	8000c6c <_malloc_r+0xa8>
 8000c94:	4623      	mov	r3, r4
 8000c96:	6864      	ldr	r4, [r4, #4]
 8000c98:	e7ae      	b.n	8000bf8 <_malloc_r+0x34>
 8000c9a:	463c      	mov	r4, r7
 8000c9c:	687f      	ldr	r7, [r7, #4]
 8000c9e:	e7b6      	b.n	8000c0e <_malloc_r+0x4a>
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d1fb      	bne.n	8000ca0 <_malloc_r+0xdc>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	6053      	str	r3, [r2, #4]
 8000cac:	e7de      	b.n	8000c6c <_malloc_r+0xa8>
 8000cae:	230c      	movs	r3, #12
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	6033      	str	r3, [r6, #0]
 8000cb4:	f000 f80c 	bl	8000cd0 <__malloc_unlock>
 8000cb8:	e794      	b.n	8000be4 <_malloc_r+0x20>
 8000cba:	6005      	str	r5, [r0, #0]
 8000cbc:	e7d6      	b.n	8000c6c <_malloc_r+0xa8>
 8000cbe:	bf00      	nop
 8000cc0:	200003c4 	.word	0x200003c4

08000cc4 <__malloc_lock>:
 8000cc4:	4801      	ldr	r0, [pc, #4]	@ (8000ccc <__malloc_lock+0x8>)
 8000cc6:	f7ff bf0e 	b.w	8000ae6 <__retarget_lock_acquire_recursive>
 8000cca:	bf00      	nop
 8000ccc:	200003bc 	.word	0x200003bc

08000cd0 <__malloc_unlock>:
 8000cd0:	4801      	ldr	r0, [pc, #4]	@ (8000cd8 <__malloc_unlock+0x8>)
 8000cd2:	f7ff bf09 	b.w	8000ae8 <__retarget_lock_release_recursive>
 8000cd6:	bf00      	nop
 8000cd8:	200003bc 	.word	0x200003bc

08000cdc <__sfputc_r>:
 8000cdc:	6893      	ldr	r3, [r2, #8]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	b410      	push	{r4}
 8000ce4:	6093      	str	r3, [r2, #8]
 8000ce6:	da07      	bge.n	8000cf8 <__sfputc_r+0x1c>
 8000ce8:	6994      	ldr	r4, [r2, #24]
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	db01      	blt.n	8000cf2 <__sfputc_r+0x16>
 8000cee:	290a      	cmp	r1, #10
 8000cf0:	d102      	bne.n	8000cf8 <__sfputc_r+0x1c>
 8000cf2:	bc10      	pop	{r4}
 8000cf4:	f7ff bde9 	b.w	80008ca <__swbuf_r>
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	1c58      	adds	r0, r3, #1
 8000cfc:	6010      	str	r0, [r2, #0]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	7019      	strb	r1, [r3, #0]
 8000d02:	bc10      	pop	{r4}
 8000d04:	4770      	bx	lr

08000d06 <__sfputs_r>:
 8000d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d08:	4606      	mov	r6, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	18d5      	adds	r5, r2, r3
 8000d10:	42ac      	cmp	r4, r5
 8000d12:	d101      	bne.n	8000d18 <__sfputs_r+0x12>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e007      	b.n	8000d28 <__sfputs_r+0x22>
 8000d18:	463a      	mov	r2, r7
 8000d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f7ff ffdc 	bl	8000cdc <__sfputc_r>
 8000d24:	1c43      	adds	r3, r0, #1
 8000d26:	d1f3      	bne.n	8000d10 <__sfputs_r+0xa>
 8000d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d2c <_vfiprintf_r>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	460d      	mov	r5, r1
 8000d32:	b09d      	sub	sp, #116	@ 0x74
 8000d34:	4614      	mov	r4, r2
 8000d36:	4698      	mov	r8, r3
 8000d38:	4606      	mov	r6, r0
 8000d3a:	b118      	cbz	r0, 8000d44 <_vfiprintf_r+0x18>
 8000d3c:	6a03      	ldr	r3, [r0, #32]
 8000d3e:	b90b      	cbnz	r3, 8000d44 <_vfiprintf_r+0x18>
 8000d40:	f7ff fcda 	bl	80006f8 <__sinit>
 8000d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d46:	07d9      	lsls	r1, r3, #31
 8000d48:	d405      	bmi.n	8000d56 <_vfiprintf_r+0x2a>
 8000d4a:	89ab      	ldrh	r3, [r5, #12]
 8000d4c:	059a      	lsls	r2, r3, #22
 8000d4e:	d402      	bmi.n	8000d56 <_vfiprintf_r+0x2a>
 8000d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d52:	f7ff fec8 	bl	8000ae6 <__retarget_lock_acquire_recursive>
 8000d56:	89ab      	ldrh	r3, [r5, #12]
 8000d58:	071b      	lsls	r3, r3, #28
 8000d5a:	d501      	bpl.n	8000d60 <_vfiprintf_r+0x34>
 8000d5c:	692b      	ldr	r3, [r5, #16]
 8000d5e:	b99b      	cbnz	r3, 8000d88 <_vfiprintf_r+0x5c>
 8000d60:	4629      	mov	r1, r5
 8000d62:	4630      	mov	r0, r6
 8000d64:	f7ff fdf0 	bl	8000948 <__swsetup_r>
 8000d68:	b170      	cbz	r0, 8000d88 <_vfiprintf_r+0x5c>
 8000d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d6c:	07dc      	lsls	r4, r3, #31
 8000d6e:	d504      	bpl.n	8000d7a <_vfiprintf_r+0x4e>
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	b01d      	add	sp, #116	@ 0x74
 8000d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	0598      	lsls	r0, r3, #22
 8000d7e:	d4f7      	bmi.n	8000d70 <_vfiprintf_r+0x44>
 8000d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d82:	f7ff feb1 	bl	8000ae8 <__retarget_lock_release_recursive>
 8000d86:	e7f3      	b.n	8000d70 <_vfiprintf_r+0x44>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d8e:	f04f 0901 	mov.w	r9, #1
 8000d92:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8000f48 <_vfiprintf_r+0x21c>
 8000d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d98:	2320      	movs	r3, #32
 8000d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d9e:	2330      	movs	r3, #48	@ 0x30
 8000da0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000da4:	4623      	mov	r3, r4
 8000da6:	469a      	mov	sl, r3
 8000da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dac:	b10a      	cbz	r2, 8000db2 <_vfiprintf_r+0x86>
 8000dae:	2a25      	cmp	r2, #37	@ 0x25
 8000db0:	d1f9      	bne.n	8000da6 <_vfiprintf_r+0x7a>
 8000db2:	ebba 0b04 	subs.w	fp, sl, r4
 8000db6:	d00b      	beq.n	8000dd0 <_vfiprintf_r+0xa4>
 8000db8:	465b      	mov	r3, fp
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f7ff ffa1 	bl	8000d06 <__sfputs_r>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	f000 80a7 	beq.w	8000f18 <_vfiprintf_r+0x1ec>
 8000dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dcc:	445a      	add	r2, fp
 8000dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 809f 	beq.w	8000f18 <_vfiprintf_r+0x1ec>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	f10a 0a01 	add.w	sl, sl, #1
 8000de4:	9304      	str	r3, [sp, #16]
 8000de6:	9307      	str	r3, [sp, #28]
 8000de8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dec:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000df2:	4654      	mov	r4, sl
 8000df4:	2205      	movs	r2, #5
 8000df6:	4854      	ldr	r0, [pc, #336]	@ (8000f48 <_vfiprintf_r+0x21c>)
 8000df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dfc:	f000 fb7a 	bl	80014f4 <memchr>
 8000e00:	9a04      	ldr	r2, [sp, #16]
 8000e02:	b9d8      	cbnz	r0, 8000e3c <_vfiprintf_r+0x110>
 8000e04:	06d1      	lsls	r1, r2, #27
 8000e06:	bf44      	itt	mi
 8000e08:	2320      	movmi	r3, #32
 8000e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e0e:	0713      	lsls	r3, r2, #28
 8000e10:	bf44      	itt	mi
 8000e12:	232b      	movmi	r3, #43	@ 0x2b
 8000e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e18:	f89a 3000 	ldrb.w	r3, [sl]
 8000e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e1e:	d015      	beq.n	8000e4c <_vfiprintf_r+0x120>
 8000e20:	9a07      	ldr	r2, [sp, #28]
 8000e22:	4654      	mov	r4, sl
 8000e24:	2000      	movs	r0, #0
 8000e26:	f04f 0c0a 	mov.w	ip, #10
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e30:	3b30      	subs	r3, #48	@ 0x30
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d94b      	bls.n	8000ece <_vfiprintf_r+0x1a2>
 8000e36:	b1b0      	cbz	r0, 8000e66 <_vfiprintf_r+0x13a>
 8000e38:	9207      	str	r2, [sp, #28]
 8000e3a:	e014      	b.n	8000e66 <_vfiprintf_r+0x13a>
 8000e3c:	eba0 0308 	sub.w	r3, r0, r8
 8000e40:	46a2      	mov	sl, r4
 8000e42:	fa09 f303 	lsl.w	r3, r9, r3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	9304      	str	r3, [sp, #16]
 8000e4a:	e7d2      	b.n	8000df2 <_vfiprintf_r+0xc6>
 8000e4c:	9b03      	ldr	r3, [sp, #12]
 8000e4e:	1d19      	adds	r1, r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	9103      	str	r1, [sp, #12]
 8000e56:	bfbb      	ittet	lt
 8000e58:	425b      	neglt	r3, r3
 8000e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e5e:	9307      	strge	r3, [sp, #28]
 8000e60:	9307      	strlt	r3, [sp, #28]
 8000e62:	bfb8      	it	lt
 8000e64:	9204      	strlt	r2, [sp, #16]
 8000e66:	7823      	ldrb	r3, [r4, #0]
 8000e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e6a:	d10a      	bne.n	8000e82 <_vfiprintf_r+0x156>
 8000e6c:	7863      	ldrb	r3, [r4, #1]
 8000e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e70:	d132      	bne.n	8000ed8 <_vfiprintf_r+0x1ac>
 8000e72:	9b03      	ldr	r3, [sp, #12]
 8000e74:	3402      	adds	r4, #2
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e7e:	9203      	str	r2, [sp, #12]
 8000e80:	9305      	str	r3, [sp, #20]
 8000e82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000f4c <_vfiprintf_r+0x220>
 8000e86:	2203      	movs	r2, #3
 8000e88:	7821      	ldrb	r1, [r4, #0]
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	f000 fb32 	bl	80014f4 <memchr>
 8000e90:	b138      	cbz	r0, 8000ea2 <_vfiprintf_r+0x176>
 8000e92:	eba0 000a 	sub.w	r0, r0, sl
 8000e96:	2240      	movs	r2, #64	@ 0x40
 8000e98:	9b04      	ldr	r3, [sp, #16]
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	4082      	lsls	r2, r0
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	9304      	str	r3, [sp, #16]
 8000ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	4829      	ldr	r0, [pc, #164]	@ (8000f50 <_vfiprintf_r+0x224>)
 8000eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000eae:	f000 fb21 	bl	80014f4 <memchr>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d03f      	beq.n	8000f36 <_vfiprintf_r+0x20a>
 8000eb6:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <_vfiprintf_r+0x228>)
 8000eb8:	bb1b      	cbnz	r3, 8000f02 <_vfiprintf_r+0x1d6>
 8000eba:	9b03      	ldr	r3, [sp, #12]
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	f023 0307 	bic.w	r3, r3, #7
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ec8:	443b      	add	r3, r7
 8000eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ecc:	e76a      	b.n	8000da4 <_vfiprintf_r+0x78>
 8000ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	e7a8      	b.n	8000e2a <_vfiprintf_r+0xfe>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	3401      	adds	r4, #1
 8000edc:	f04f 0c0a 	mov.w	ip, #10
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eea:	3a30      	subs	r2, #48	@ 0x30
 8000eec:	2a09      	cmp	r2, #9
 8000eee:	d903      	bls.n	8000ef8 <_vfiprintf_r+0x1cc>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0c6      	beq.n	8000e82 <_vfiprintf_r+0x156>
 8000ef4:	9105      	str	r1, [sp, #20]
 8000ef6:	e7c4      	b.n	8000e82 <_vfiprintf_r+0x156>
 8000ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000efc:	4604      	mov	r4, r0
 8000efe:	2301      	movs	r3, #1
 8000f00:	e7f0      	b.n	8000ee4 <_vfiprintf_r+0x1b8>
 8000f02:	ab03      	add	r3, sp, #12
 8000f04:	462a      	mov	r2, r5
 8000f06:	a904      	add	r1, sp, #16
 8000f08:	4630      	mov	r0, r6
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <_vfiprintf_r+0x22c>)
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4607      	mov	r7, r0
 8000f14:	1c78      	adds	r0, r7, #1
 8000f16:	d1d6      	bne.n	8000ec6 <_vfiprintf_r+0x19a>
 8000f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f1a:	07d9      	lsls	r1, r3, #31
 8000f1c:	d405      	bmi.n	8000f2a <_vfiprintf_r+0x1fe>
 8000f1e:	89ab      	ldrh	r3, [r5, #12]
 8000f20:	059a      	lsls	r2, r3, #22
 8000f22:	d402      	bmi.n	8000f2a <_vfiprintf_r+0x1fe>
 8000f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f26:	f7ff fddf 	bl	8000ae8 <__retarget_lock_release_recursive>
 8000f2a:	89ab      	ldrh	r3, [r5, #12]
 8000f2c:	065b      	lsls	r3, r3, #25
 8000f2e:	f53f af1f 	bmi.w	8000d70 <_vfiprintf_r+0x44>
 8000f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f34:	e71e      	b.n	8000d74 <_vfiprintf_r+0x48>
 8000f36:	ab03      	add	r3, sp, #12
 8000f38:	462a      	mov	r2, r5
 8000f3a:	a904      	add	r1, sp, #16
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <_vfiprintf_r+0x22c>)
 8000f42:	f000 f87d 	bl	8001040 <_printf_i>
 8000f46:	e7e4      	b.n	8000f12 <_vfiprintf_r+0x1e6>
 8000f48:	080017a9 	.word	0x080017a9
 8000f4c:	080017af 	.word	0x080017af
 8000f50:	080017b3 	.word	0x080017b3
 8000f54:	00000000 	.word	0x00000000
 8000f58:	08000d07 	.word	0x08000d07

08000f5c <_printf_common>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	4616      	mov	r6, r2
 8000f62:	4698      	mov	r8, r3
 8000f64:	688a      	ldr	r2, [r1, #8]
 8000f66:	4607      	mov	r7, r0
 8000f68:	690b      	ldr	r3, [r1, #16]
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	bfb8      	it	lt
 8000f74:	4613      	movlt	r3, r2
 8000f76:	6033      	str	r3, [r6, #0]
 8000f78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f7c:	b10a      	cbz	r2, 8000f82 <_printf_common+0x26>
 8000f7e:	3301      	adds	r3, #1
 8000f80:	6033      	str	r3, [r6, #0]
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	0699      	lsls	r1, r3, #26
 8000f86:	bf42      	ittt	mi
 8000f88:	6833      	ldrmi	r3, [r6, #0]
 8000f8a:	3302      	addmi	r3, #2
 8000f8c:	6033      	strmi	r3, [r6, #0]
 8000f8e:	6825      	ldr	r5, [r4, #0]
 8000f90:	f015 0506 	ands.w	r5, r5, #6
 8000f94:	d106      	bne.n	8000fa4 <_printf_common+0x48>
 8000f96:	f104 0a19 	add.w	sl, r4, #25
 8000f9a:	68e3      	ldr	r3, [r4, #12]
 8000f9c:	6832      	ldr	r2, [r6, #0]
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	42ab      	cmp	r3, r5
 8000fa2:	dc2b      	bgt.n	8000ffc <_printf_common+0xa0>
 8000fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	3b00      	subs	r3, #0
 8000fac:	bf18      	it	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	0692      	lsls	r2, r2, #26
 8000fb2:	d430      	bmi.n	8001016 <_printf_common+0xba>
 8000fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fb8:	4641      	mov	r1, r8
 8000fba:	4638      	mov	r0, r7
 8000fbc:	47c8      	blx	r9
 8000fbe:	3001      	adds	r0, #1
 8000fc0:	d023      	beq.n	800100a <_printf_common+0xae>
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	341a      	adds	r4, #26
 8000fc6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8000fca:	f003 0306 	and.w	r3, r3, #6
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf0a      	itet	eq
 8000fd2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8000fd6:	2500      	movne	r5, #0
 8000fd8:	6833      	ldreq	r3, [r6, #0]
 8000fda:	f04f 0600 	mov.w	r6, #0
 8000fde:	bf08      	it	eq
 8000fe0:	1aed      	subeq	r5, r5, r3
 8000fe2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000fe6:	bf08      	it	eq
 8000fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fec:	4293      	cmp	r3, r2
 8000fee:	bfc4      	itt	gt
 8000ff0:	1a9b      	subgt	r3, r3, r2
 8000ff2:	18ed      	addgt	r5, r5, r3
 8000ff4:	42b5      	cmp	r5, r6
 8000ff6:	d11a      	bne.n	800102e <_printf_common+0xd2>
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	e008      	b.n	800100e <_printf_common+0xb2>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4652      	mov	r2, sl
 8001000:	4641      	mov	r1, r8
 8001002:	4638      	mov	r0, r7
 8001004:	47c8      	blx	r9
 8001006:	3001      	adds	r0, #1
 8001008:	d103      	bne.n	8001012 <_printf_common+0xb6>
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	3501      	adds	r5, #1
 8001014:	e7c1      	b.n	8000f9a <_printf_common+0x3e>
 8001016:	18e1      	adds	r1, r4, r3
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	2030      	movs	r0, #48	@ 0x30
 800101c:	3302      	adds	r3, #2
 800101e:	4422      	add	r2, r4
 8001020:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800102c:	e7c2      	b.n	8000fb4 <_printf_common+0x58>
 800102e:	2301      	movs	r3, #1
 8001030:	4622      	mov	r2, r4
 8001032:	4641      	mov	r1, r8
 8001034:	4638      	mov	r0, r7
 8001036:	47c8      	blx	r9
 8001038:	3001      	adds	r0, #1
 800103a:	d0e6      	beq.n	800100a <_printf_common+0xae>
 800103c:	3601      	adds	r6, #1
 800103e:	e7d9      	b.n	8000ff4 <_printf_common+0x98>

08001040 <_printf_i>:
 8001040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	7e0f      	ldrb	r7, [r1, #24]
 8001046:	4691      	mov	r9, r2
 8001048:	4680      	mov	r8, r0
 800104a:	460c      	mov	r4, r1
 800104c:	2f78      	cmp	r7, #120	@ 0x78
 800104e:	469a      	mov	sl, r3
 8001050:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001056:	d807      	bhi.n	8001068 <_printf_i+0x28>
 8001058:	2f62      	cmp	r7, #98	@ 0x62
 800105a:	d80a      	bhi.n	8001072 <_printf_i+0x32>
 800105c:	2f00      	cmp	r7, #0
 800105e:	f000 80d1 	beq.w	8001204 <_printf_i+0x1c4>
 8001062:	2f58      	cmp	r7, #88	@ 0x58
 8001064:	f000 80b8 	beq.w	80011d8 <_printf_i+0x198>
 8001068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800106c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001070:	e03a      	b.n	80010e8 <_printf_i+0xa8>
 8001072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001076:	2b15      	cmp	r3, #21
 8001078:	d8f6      	bhi.n	8001068 <_printf_i+0x28>
 800107a:	a101      	add	r1, pc, #4	@ (adr r1, 8001080 <_printf_i+0x40>)
 800107c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001080:	080010d9 	.word	0x080010d9
 8001084:	080010ed 	.word	0x080010ed
 8001088:	08001069 	.word	0x08001069
 800108c:	08001069 	.word	0x08001069
 8001090:	08001069 	.word	0x08001069
 8001094:	08001069 	.word	0x08001069
 8001098:	080010ed 	.word	0x080010ed
 800109c:	08001069 	.word	0x08001069
 80010a0:	08001069 	.word	0x08001069
 80010a4:	08001069 	.word	0x08001069
 80010a8:	08001069 	.word	0x08001069
 80010ac:	080011eb 	.word	0x080011eb
 80010b0:	08001117 	.word	0x08001117
 80010b4:	080011a5 	.word	0x080011a5
 80010b8:	08001069 	.word	0x08001069
 80010bc:	08001069 	.word	0x08001069
 80010c0:	0800120d 	.word	0x0800120d
 80010c4:	08001069 	.word	0x08001069
 80010c8:	08001117 	.word	0x08001117
 80010cc:	08001069 	.word	0x08001069
 80010d0:	08001069 	.word	0x08001069
 80010d4:	080011ad 	.word	0x080011ad
 80010d8:	6833      	ldr	r3, [r6, #0]
 80010da:	1d1a      	adds	r2, r3, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6032      	str	r2, [r6, #0]
 80010e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010e8:	2301      	movs	r3, #1
 80010ea:	e09c      	b.n	8001226 <_printf_i+0x1e6>
 80010ec:	6833      	ldr	r3, [r6, #0]
 80010ee:	6820      	ldr	r0, [r4, #0]
 80010f0:	1d19      	adds	r1, r3, #4
 80010f2:	6031      	str	r1, [r6, #0]
 80010f4:	0606      	lsls	r6, r0, #24
 80010f6:	d501      	bpl.n	80010fc <_printf_i+0xbc>
 80010f8:	681d      	ldr	r5, [r3, #0]
 80010fa:	e003      	b.n	8001104 <_printf_i+0xc4>
 80010fc:	0645      	lsls	r5, r0, #25
 80010fe:	d5fb      	bpl.n	80010f8 <_printf_i+0xb8>
 8001100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001104:	2d00      	cmp	r5, #0
 8001106:	da03      	bge.n	8001110 <_printf_i+0xd0>
 8001108:	232d      	movs	r3, #45	@ 0x2d
 800110a:	426d      	negs	r5, r5
 800110c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001110:	4858      	ldr	r0, [pc, #352]	@ (8001274 <_printf_i+0x234>)
 8001112:	230a      	movs	r3, #10
 8001114:	e011      	b.n	800113a <_printf_i+0xfa>
 8001116:	6821      	ldr	r1, [r4, #0]
 8001118:	6833      	ldr	r3, [r6, #0]
 800111a:	0608      	lsls	r0, r1, #24
 800111c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001120:	d402      	bmi.n	8001128 <_printf_i+0xe8>
 8001122:	0649      	lsls	r1, r1, #25
 8001124:	bf48      	it	mi
 8001126:	b2ad      	uxthmi	r5, r5
 8001128:	2f6f      	cmp	r7, #111	@ 0x6f
 800112a:	6033      	str	r3, [r6, #0]
 800112c:	4851      	ldr	r0, [pc, #324]	@ (8001274 <_printf_i+0x234>)
 800112e:	bf14      	ite	ne
 8001130:	230a      	movne	r3, #10
 8001132:	2308      	moveq	r3, #8
 8001134:	2100      	movs	r1, #0
 8001136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800113a:	6866      	ldr	r6, [r4, #4]
 800113c:	2e00      	cmp	r6, #0
 800113e:	60a6      	str	r6, [r4, #8]
 8001140:	db05      	blt.n	800114e <_printf_i+0x10e>
 8001142:	6821      	ldr	r1, [r4, #0]
 8001144:	432e      	orrs	r6, r5
 8001146:	f021 0104 	bic.w	r1, r1, #4
 800114a:	6021      	str	r1, [r4, #0]
 800114c:	d04b      	beq.n	80011e6 <_printf_i+0x1a6>
 800114e:	4616      	mov	r6, r2
 8001150:	fbb5 f1f3 	udiv	r1, r5, r3
 8001154:	fb03 5711 	mls	r7, r3, r1, r5
 8001158:	5dc7      	ldrb	r7, [r0, r7]
 800115a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800115e:	462f      	mov	r7, r5
 8001160:	460d      	mov	r5, r1
 8001162:	42bb      	cmp	r3, r7
 8001164:	d9f4      	bls.n	8001150 <_printf_i+0x110>
 8001166:	2b08      	cmp	r3, #8
 8001168:	d10b      	bne.n	8001182 <_printf_i+0x142>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	07df      	lsls	r7, r3, #31
 800116e:	d508      	bpl.n	8001182 <_printf_i+0x142>
 8001170:	6923      	ldr	r3, [r4, #16]
 8001172:	6861      	ldr	r1, [r4, #4]
 8001174:	4299      	cmp	r1, r3
 8001176:	bfde      	ittt	le
 8001178:	2330      	movle	r3, #48	@ 0x30
 800117a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800117e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001182:	1b92      	subs	r2, r2, r6
 8001184:	6122      	str	r2, [r4, #16]
 8001186:	464b      	mov	r3, r9
 8001188:	aa03      	add	r2, sp, #12
 800118a:	4621      	mov	r1, r4
 800118c:	4640      	mov	r0, r8
 800118e:	f8cd a000 	str.w	sl, [sp]
 8001192:	f7ff fee3 	bl	8000f5c <_printf_common>
 8001196:	3001      	adds	r0, #1
 8001198:	d14a      	bne.n	8001230 <_printf_i+0x1f0>
 800119a:	f04f 30ff 	mov.w	r0, #4294967295
 800119e:	b004      	add	sp, #16
 80011a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6023      	str	r3, [r4, #0]
 80011ac:	2778      	movs	r7, #120	@ 0x78
 80011ae:	4832      	ldr	r0, [pc, #200]	@ (8001278 <_printf_i+0x238>)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011b6:	061f      	lsls	r7, r3, #24
 80011b8:	6831      	ldr	r1, [r6, #0]
 80011ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80011be:	d402      	bmi.n	80011c6 <_printf_i+0x186>
 80011c0:	065f      	lsls	r7, r3, #25
 80011c2:	bf48      	it	mi
 80011c4:	b2ad      	uxthmi	r5, r5
 80011c6:	6031      	str	r1, [r6, #0]
 80011c8:	07d9      	lsls	r1, r3, #31
 80011ca:	bf44      	itt	mi
 80011cc:	f043 0320 	orrmi.w	r3, r3, #32
 80011d0:	6023      	strmi	r3, [r4, #0]
 80011d2:	b11d      	cbz	r5, 80011dc <_printf_i+0x19c>
 80011d4:	2310      	movs	r3, #16
 80011d6:	e7ad      	b.n	8001134 <_printf_i+0xf4>
 80011d8:	4826      	ldr	r0, [pc, #152]	@ (8001274 <_printf_i+0x234>)
 80011da:	e7e9      	b.n	80011b0 <_printf_i+0x170>
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	f023 0320 	bic.w	r3, r3, #32
 80011e2:	6023      	str	r3, [r4, #0]
 80011e4:	e7f6      	b.n	80011d4 <_printf_i+0x194>
 80011e6:	4616      	mov	r6, r2
 80011e8:	e7bd      	b.n	8001166 <_printf_i+0x126>
 80011ea:	6833      	ldr	r3, [r6, #0]
 80011ec:	6825      	ldr	r5, [r4, #0]
 80011ee:	1d18      	adds	r0, r3, #4
 80011f0:	6961      	ldr	r1, [r4, #20]
 80011f2:	6030      	str	r0, [r6, #0]
 80011f4:	062e      	lsls	r6, r5, #24
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	d501      	bpl.n	80011fe <_printf_i+0x1be>
 80011fa:	6019      	str	r1, [r3, #0]
 80011fc:	e002      	b.n	8001204 <_printf_i+0x1c4>
 80011fe:	0668      	lsls	r0, r5, #25
 8001200:	d5fb      	bpl.n	80011fa <_printf_i+0x1ba>
 8001202:	8019      	strh	r1, [r3, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	4616      	mov	r6, r2
 8001208:	6123      	str	r3, [r4, #16]
 800120a:	e7bc      	b.n	8001186 <_printf_i+0x146>
 800120c:	6833      	ldr	r3, [r6, #0]
 800120e:	2100      	movs	r1, #0
 8001210:	1d1a      	adds	r2, r3, #4
 8001212:	6032      	str	r2, [r6, #0]
 8001214:	681e      	ldr	r6, [r3, #0]
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	4630      	mov	r0, r6
 800121a:	f000 f96b 	bl	80014f4 <memchr>
 800121e:	b108      	cbz	r0, 8001224 <_printf_i+0x1e4>
 8001220:	1b80      	subs	r0, r0, r6
 8001222:	6060      	str	r0, [r4, #4]
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	6123      	str	r3, [r4, #16]
 8001228:	2300      	movs	r3, #0
 800122a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800122e:	e7aa      	b.n	8001186 <_printf_i+0x146>
 8001230:	6923      	ldr	r3, [r4, #16]
 8001232:	4632      	mov	r2, r6
 8001234:	4649      	mov	r1, r9
 8001236:	4640      	mov	r0, r8
 8001238:	47d0      	blx	sl
 800123a:	3001      	adds	r0, #1
 800123c:	d0ad      	beq.n	800119a <_printf_i+0x15a>
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	079b      	lsls	r3, r3, #30
 8001242:	d413      	bmi.n	800126c <_printf_i+0x22c>
 8001244:	68e0      	ldr	r0, [r4, #12]
 8001246:	9b03      	ldr	r3, [sp, #12]
 8001248:	4298      	cmp	r0, r3
 800124a:	bfb8      	it	lt
 800124c:	4618      	movlt	r0, r3
 800124e:	e7a6      	b.n	800119e <_printf_i+0x15e>
 8001250:	2301      	movs	r3, #1
 8001252:	4632      	mov	r2, r6
 8001254:	4649      	mov	r1, r9
 8001256:	4640      	mov	r0, r8
 8001258:	47d0      	blx	sl
 800125a:	3001      	adds	r0, #1
 800125c:	d09d      	beq.n	800119a <_printf_i+0x15a>
 800125e:	3501      	adds	r5, #1
 8001260:	68e3      	ldr	r3, [r4, #12]
 8001262:	9903      	ldr	r1, [sp, #12]
 8001264:	1a5b      	subs	r3, r3, r1
 8001266:	42ab      	cmp	r3, r5
 8001268:	dcf2      	bgt.n	8001250 <_printf_i+0x210>
 800126a:	e7eb      	b.n	8001244 <_printf_i+0x204>
 800126c:	2500      	movs	r5, #0
 800126e:	f104 0619 	add.w	r6, r4, #25
 8001272:	e7f5      	b.n	8001260 <_printf_i+0x220>
 8001274:	080017ba 	.word	0x080017ba
 8001278:	080017cb 	.word	0x080017cb

0800127c <__sflush_r>:
 800127c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	0716      	lsls	r6, r2, #28
 8001284:	4605      	mov	r5, r0
 8001286:	460c      	mov	r4, r1
 8001288:	d454      	bmi.n	8001334 <__sflush_r+0xb8>
 800128a:	684b      	ldr	r3, [r1, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dc02      	bgt.n	8001296 <__sflush_r+0x1a>
 8001290:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	dd48      	ble.n	8001328 <__sflush_r+0xac>
 8001296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001298:	2e00      	cmp	r6, #0
 800129a:	d045      	beq.n	8001328 <__sflush_r+0xac>
 800129c:	2300      	movs	r3, #0
 800129e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012a2:	682f      	ldr	r7, [r5, #0]
 80012a4:	6a21      	ldr	r1, [r4, #32]
 80012a6:	602b      	str	r3, [r5, #0]
 80012a8:	d030      	beq.n	800130c <__sflush_r+0x90>
 80012aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012ac:	89a3      	ldrh	r3, [r4, #12]
 80012ae:	0759      	lsls	r1, r3, #29
 80012b0:	d505      	bpl.n	80012be <__sflush_r+0x42>
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012b8:	b10b      	cbz	r3, 80012be <__sflush_r+0x42>
 80012ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012bc:	1ad2      	subs	r2, r2, r3
 80012be:	2300      	movs	r3, #0
 80012c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012c2:	6a21      	ldr	r1, [r4, #32]
 80012c4:	4628      	mov	r0, r5
 80012c6:	47b0      	blx	r6
 80012c8:	1c43      	adds	r3, r0, #1
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	d106      	bne.n	80012dc <__sflush_r+0x60>
 80012ce:	6829      	ldr	r1, [r5, #0]
 80012d0:	291d      	cmp	r1, #29
 80012d2:	d82b      	bhi.n	800132c <__sflush_r+0xb0>
 80012d4:	4a28      	ldr	r2, [pc, #160]	@ (8001378 <__sflush_r+0xfc>)
 80012d6:	40ca      	lsrs	r2, r1
 80012d8:	07d6      	lsls	r6, r2, #31
 80012da:	d527      	bpl.n	800132c <__sflush_r+0xb0>
 80012dc:	2200      	movs	r2, #0
 80012de:	04d9      	lsls	r1, r3, #19
 80012e0:	6062      	str	r2, [r4, #4]
 80012e2:	6922      	ldr	r2, [r4, #16]
 80012e4:	6022      	str	r2, [r4, #0]
 80012e6:	d504      	bpl.n	80012f2 <__sflush_r+0x76>
 80012e8:	1c42      	adds	r2, r0, #1
 80012ea:	d101      	bne.n	80012f0 <__sflush_r+0x74>
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	b903      	cbnz	r3, 80012f2 <__sflush_r+0x76>
 80012f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80012f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012f4:	602f      	str	r7, [r5, #0]
 80012f6:	b1b9      	cbz	r1, 8001328 <__sflush_r+0xac>
 80012f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d002      	beq.n	8001306 <__sflush_r+0x8a>
 8001300:	4628      	mov	r0, r5
 8001302:	f7ff fbf3 	bl	8000aec <_free_r>
 8001306:	2300      	movs	r3, #0
 8001308:	6363      	str	r3, [r4, #52]	@ 0x34
 800130a:	e00d      	b.n	8001328 <__sflush_r+0xac>
 800130c:	2301      	movs	r3, #1
 800130e:	4628      	mov	r0, r5
 8001310:	47b0      	blx	r6
 8001312:	4602      	mov	r2, r0
 8001314:	1c50      	adds	r0, r2, #1
 8001316:	d1c9      	bne.n	80012ac <__sflush_r+0x30>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0c6      	beq.n	80012ac <__sflush_r+0x30>
 800131e:	2b1d      	cmp	r3, #29
 8001320:	d001      	beq.n	8001326 <__sflush_r+0xaa>
 8001322:	2b16      	cmp	r3, #22
 8001324:	d11c      	bne.n	8001360 <__sflush_r+0xe4>
 8001326:	602f      	str	r7, [r5, #0]
 8001328:	2000      	movs	r0, #0
 800132a:	e020      	b.n	800136e <__sflush_r+0xf2>
 800132c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001330:	b21b      	sxth	r3, r3
 8001332:	e019      	b.n	8001368 <__sflush_r+0xec>
 8001334:	690f      	ldr	r7, [r1, #16]
 8001336:	2f00      	cmp	r7, #0
 8001338:	d0f6      	beq.n	8001328 <__sflush_r+0xac>
 800133a:	0793      	lsls	r3, r2, #30
 800133c:	680e      	ldr	r6, [r1, #0]
 800133e:	600f      	str	r7, [r1, #0]
 8001340:	bf0c      	ite	eq
 8001342:	694b      	ldreq	r3, [r1, #20]
 8001344:	2300      	movne	r3, #0
 8001346:	1bf6      	subs	r6, r6, r7
 8001348:	608b      	str	r3, [r1, #8]
 800134a:	2e00      	cmp	r6, #0
 800134c:	ddec      	ble.n	8001328 <__sflush_r+0xac>
 800134e:	4633      	mov	r3, r6
 8001350:	463a      	mov	r2, r7
 8001352:	6a21      	ldr	r1, [r4, #32]
 8001354:	4628      	mov	r0, r5
 8001356:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800135a:	47e0      	blx	ip
 800135c:	2800      	cmp	r0, #0
 800135e:	dc07      	bgt.n	8001370 <__sflush_r+0xf4>
 8001360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001370:	4407      	add	r7, r0
 8001372:	1a36      	subs	r6, r6, r0
 8001374:	e7e9      	b.n	800134a <__sflush_r+0xce>
 8001376:	bf00      	nop
 8001378:	20400001 	.word	0x20400001

0800137c <_fflush_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	690b      	ldr	r3, [r1, #16]
 8001380:	4605      	mov	r5, r0
 8001382:	460c      	mov	r4, r1
 8001384:	b913      	cbnz	r3, 800138c <_fflush_r+0x10>
 8001386:	2500      	movs	r5, #0
 8001388:	4628      	mov	r0, r5
 800138a:	bd38      	pop	{r3, r4, r5, pc}
 800138c:	b118      	cbz	r0, 8001396 <_fflush_r+0x1a>
 800138e:	6a03      	ldr	r3, [r0, #32]
 8001390:	b90b      	cbnz	r3, 8001396 <_fflush_r+0x1a>
 8001392:	f7ff f9b1 	bl	80006f8 <__sinit>
 8001396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f3      	beq.n	8001386 <_fflush_r+0xa>
 800139e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013a0:	07d0      	lsls	r0, r2, #31
 80013a2:	d404      	bmi.n	80013ae <_fflush_r+0x32>
 80013a4:	0599      	lsls	r1, r3, #22
 80013a6:	d402      	bmi.n	80013ae <_fflush_r+0x32>
 80013a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013aa:	f7ff fb9c 	bl	8000ae6 <__retarget_lock_acquire_recursive>
 80013ae:	4628      	mov	r0, r5
 80013b0:	4621      	mov	r1, r4
 80013b2:	f7ff ff63 	bl	800127c <__sflush_r>
 80013b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013b8:	4605      	mov	r5, r0
 80013ba:	07da      	lsls	r2, r3, #31
 80013bc:	d4e4      	bmi.n	8001388 <_fflush_r+0xc>
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	059b      	lsls	r3, r3, #22
 80013c2:	d4e1      	bmi.n	8001388 <_fflush_r+0xc>
 80013c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013c6:	f7ff fb8f 	bl	8000ae8 <__retarget_lock_release_recursive>
 80013ca:	e7dd      	b.n	8001388 <_fflush_r+0xc>

080013cc <__swhatbuf_r>:
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	460c      	mov	r4, r1
 80013d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d4:	b096      	sub	sp, #88	@ 0x58
 80013d6:	4615      	mov	r5, r2
 80013d8:	2900      	cmp	r1, #0
 80013da:	461e      	mov	r6, r3
 80013dc:	da0c      	bge.n	80013f8 <__swhatbuf_r+0x2c>
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	2100      	movs	r1, #0
 80013e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013e6:	bf14      	ite	ne
 80013e8:	2340      	movne	r3, #64	@ 0x40
 80013ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013ee:	2000      	movs	r0, #0
 80013f0:	6031      	str	r1, [r6, #0]
 80013f2:	602b      	str	r3, [r5, #0]
 80013f4:	b016      	add	sp, #88	@ 0x58
 80013f6:	bd70      	pop	{r4, r5, r6, pc}
 80013f8:	466a      	mov	r2, sp
 80013fa:	f000 f849 	bl	8001490 <_fstat_r>
 80013fe:	2800      	cmp	r0, #0
 8001400:	dbed      	blt.n	80013de <__swhatbuf_r+0x12>
 8001402:	9901      	ldr	r1, [sp, #4]
 8001404:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001408:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800140c:	4259      	negs	r1, r3
 800140e:	4159      	adcs	r1, r3
 8001410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001414:	e7eb      	b.n	80013ee <__swhatbuf_r+0x22>

08001416 <__smakebuf_r>:
 8001416:	898b      	ldrh	r3, [r1, #12]
 8001418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800141a:	079d      	lsls	r5, r3, #30
 800141c:	4606      	mov	r6, r0
 800141e:	460c      	mov	r4, r1
 8001420:	d507      	bpl.n	8001432 <__smakebuf_r+0x1c>
 8001422:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	6123      	str	r3, [r4, #16]
 800142a:	2301      	movs	r3, #1
 800142c:	6163      	str	r3, [r4, #20]
 800142e:	b003      	add	sp, #12
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001432:	ab01      	add	r3, sp, #4
 8001434:	466a      	mov	r2, sp
 8001436:	f7ff ffc9 	bl	80013cc <__swhatbuf_r>
 800143a:	9f00      	ldr	r7, [sp, #0]
 800143c:	4605      	mov	r5, r0
 800143e:	4630      	mov	r0, r6
 8001440:	4639      	mov	r1, r7
 8001442:	f7ff fbbf 	bl	8000bc4 <_malloc_r>
 8001446:	b948      	cbnz	r0, 800145c <__smakebuf_r+0x46>
 8001448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144c:	059a      	lsls	r2, r3, #22
 800144e:	d4ee      	bmi.n	800142e <__smakebuf_r+0x18>
 8001450:	f023 0303 	bic.w	r3, r3, #3
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	81a3      	strh	r3, [r4, #12]
 800145a:	e7e2      	b.n	8001422 <__smakebuf_r+0xc>
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	6020      	str	r0, [r4, #0]
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	81a3      	strh	r3, [r4, #12]
 8001466:	9b01      	ldr	r3, [sp, #4]
 8001468:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800146c:	b15b      	cbz	r3, 8001486 <__smakebuf_r+0x70>
 800146e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001472:	4630      	mov	r0, r6
 8001474:	f000 f81e 	bl	80014b4 <_isatty_r>
 8001478:	b128      	cbz	r0, 8001486 <__smakebuf_r+0x70>
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	f023 0303 	bic.w	r3, r3, #3
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	431d      	orrs	r5, r3
 800148a:	81a5      	strh	r5, [r4, #12]
 800148c:	e7cf      	b.n	800142e <__smakebuf_r+0x18>
	...

08001490 <_fstat_r>:
 8001490:	b538      	push	{r3, r4, r5, lr}
 8001492:	2300      	movs	r3, #0
 8001494:	4d06      	ldr	r5, [pc, #24]	@ (80014b0 <_fstat_r+0x20>)
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	602b      	str	r3, [r5, #0]
 800149e:	f7ff f819 	bl	80004d4 <_fstat>
 80014a2:	1c43      	adds	r3, r0, #1
 80014a4:	d102      	bne.n	80014ac <_fstat_r+0x1c>
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	b103      	cbz	r3, 80014ac <_fstat_r+0x1c>
 80014aa:	6023      	str	r3, [r4, #0]
 80014ac:	bd38      	pop	{r3, r4, r5, pc}
 80014ae:	bf00      	nop
 80014b0:	200003b8 	.word	0x200003b8

080014b4 <_isatty_r>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	2300      	movs	r3, #0
 80014b8:	4d05      	ldr	r5, [pc, #20]	@ (80014d0 <_isatty_r+0x1c>)
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	602b      	str	r3, [r5, #0]
 80014c0:	f7ff f817 	bl	80004f2 <_isatty>
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	d102      	bne.n	80014ce <_isatty_r+0x1a>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	b103      	cbz	r3, 80014ce <_isatty_r+0x1a>
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	200003b8 	.word	0x200003b8

080014d4 <_sbrk_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	2300      	movs	r3, #0
 80014d8:	4d05      	ldr	r5, [pc, #20]	@ (80014f0 <_sbrk_r+0x1c>)
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff f81e 	bl	8000520 <_sbrk>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_sbrk_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_sbrk_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200003b8 	.word	0x200003b8

080014f4 <memchr>:
 80014f4:	b2c9      	uxtb	r1, r1
 80014f6:	4603      	mov	r3, r0
 80014f8:	4402      	add	r2, r0
 80014fa:	b510      	push	{r4, lr}
 80014fc:	4293      	cmp	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	d101      	bne.n	8001506 <memchr+0x12>
 8001502:	2000      	movs	r0, #0
 8001504:	e003      	b.n	800150e <memchr+0x1a>
 8001506:	7804      	ldrb	r4, [r0, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	428c      	cmp	r4, r1
 800150c:	d1f6      	bne.n	80014fc <memchr+0x8>
 800150e:	bd10      	pop	{r4, pc}

08001510 <_init>:
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	bf00      	nop
 8001514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001516:	bc08      	pop	{r3}
 8001518:	469e      	mov	lr, r3
 800151a:	4770      	bx	lr

0800151c <_fini>:
 800151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151e:	bf00      	nop
 8001520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001522:	bc08      	pop	{r3}
 8001524:	469e      	mov	lr, r3
 8001526:	4770      	bx	lr
